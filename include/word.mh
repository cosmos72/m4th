/**
 * This file is part of m4th.
 *
 * m4th is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * m4th is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with m4th.  If not, see <https://www.gnu.org/licenses/>.
 */

#ifndef M4TH_INCLUDE_WORD_MH
#define M4TH_INCLUDE_WORD_MH

/** used to insert an execution token (XT) in a sequence of functions */
#define m4XT(x) WORD_SYM(x) + WORD_OFF_XT

#define WORD_OFF_FLAGS 6   /* offset of m4word->flags        */
#define WORD_OFF_CODE_N 14 /* offset of m4word->code_n       */
#define WORD_OFF_DATA_N 16 /* offset of m4word->data_len     */
#define WORD_OFF_XT 20     /* offset of m4word->code i.e. XT */

#define XT_OFF_FLAGS -14 /* WORD_OFF_FLAGS  - WORD_OFF_XT  */
#define XT_OFF_CODE_N -6 /* WORD_OFF_CODE_N - WORD_OFF_XT  */
#define XT_OFF_DATA_N -4 /* WORD_OFF_DATA_N - WORD_OFF_XT  */

#define WORD_SYM(name) m4word_##name

#define WORD_DECL_SYM(name)                                                                        \
    .globl WORD_SYM(name);                                                                         \
    .type WORD_SYM(name), @object;

#define WORD_ALIGN() .p2align 2, 0; /* align words at 4 bytes: they do not contain any uint64_t */

#define WORD_DEF_SYM(name)                                                                         \
    WORD_ALIGN()                                                                                   \
    WORD_DECL_SYM(name)                                                                            \
    WORD_SYM(name) :

#define WORD_START(name, prev)                                                                     \
    WORD_DEF_SYM(name)                                                                             \
    WORD_PREV_OFF(name, prev)                                                                      \
    WORD_NAME_OFF(name)

#define WORD_PREV_OFF(name, prev) /**/ .4byte WORD_SYM(name) - WORD_SYM(prev);
#define WORD_NAME_OFF(name) /*      */ .2byte WORD_SYM(name) - COUNTEDSTRING_SYM(name);
#define WORD_FLAGS(flags) /*        */ .2byte flags;
#define WORD_DSTACK(in, out) /*     */ .byte /**/ ((in)&0xF) | (((out)&0xF) << 4);
#define WORD_DSTACK_UNKNOWN() /*    */ .byte 0xFF;
#define WORD_RSTACK(in, out) /*     */ .byte /**/ ((in)&0xF) | (((out)&0xF) << 4);
#define WORD_RSTACK_UNKNOWN() /*    */ .byte 0xFF;
#define WORD_STACK_NONE() /*            */ WORD_DSTACK(0, 0) WORD_RSTACK(0, 0)
#define WORD_NATIVE_LEN(name) /*    */ .2byte FUNC_SYM_NEXT(name) - FUNC_SYM(name);
#define WORD_NATIVE_LEN_0() /*      */ .2byte 0;
#define WORD_NATIVE_NONE() /*       */ .2byte 0xFFFF;

#define WORD_CODE_N(n_instr) /*     */ .2byte n_instr;
#define WORD_CODE_N_AUTO(name) /*   */                                                             \
    .2byte /**/ (.L.WORD_SYM(name).code_end - /**/.L.WORD_SYM(name).code_start) / SZt;

#define WORD_DATA_N_BYTES(n_bytes) /**/ .4byte n_bytes;
#define WORD_DATA_N(n_tokens) /*     */ .4byte SZt *(n_tokens);
#define WORD_DATA_N_AUTO(name) /*   */                                                             \
    .4byte /**/.L.WORD_SYM(name).data_end - /**/.L.WORD_SYM(name).data_start;

#define WORD_CODE_START(name) /*    */ .L.WORD_SYM(name).code_start:
#define WORD_CODE_END(name) /*      */ .L.WORD_SYM(name).code_end:
#define WORD_CODE_RAW(...) /*       */ CAT3(., SZt, byte) __VA_ARGS__;
#define WORD_CODE_TOKEN(token) /*   */ CAT3(., M4SIZEOF(token), byte) M4TOKEN_VAL(token);
#define WORD_CODE_TOKENS(...) /*    */ WRAP_ARGS(WORD_CODE_TOKEN, __VA_ARGS__)

#define WORD_DATA_ALIGN() /*        */ .p2align PSZ, 0; /* align word data at SZ bytes */
#define WORD_DATA_START(name) /*    */ WORD_DATA_ALIGN() /**/.L.WORD_SYM(name).data_start:
#define WORD_DATA_END(name) /*      */ .L.WORD_SYM(name).data_end:
#define WORD_DATA_BYTES(...) /*     */ WORD_DATA_ALIGN() /* */.byte __VA_ARGS__;
#define WORD_DATA_SHORTS(...) /*    */ WORD_DATA_ALIGN() /**/ .2byte __VA_ARGS__;
#define WORD_DATA_INTS(...) /*      */ WORD_DATA_ALIGN() /**/ .4byte __VA_ARGS__;
#define WORD_DATA_CELLS(...) /*     */ WORD_DATA_ALIGN() /**/ CAT3(., SZ, byte) __VA_ARGS__;
#define WORD_DATA_TOKEN(token) /*   */ CAT3(., M4SIZEOF(token), byte) M4TOKEN_VAL(token);
#define WORD_DATA_TOKENS(...)                                                                      \
    WORD_DATA_ALIGN()                                                                              \
    WRAP_ARGS(WORD_DATA_TOKEN, __VA_ARGS__)

#define WORD_END(name) /*           */ .size WORD_SYM(name), .- WORD_SYM(name);

#define WORD_CODE(...)                                                                             \
    WORD_CODE_N(M4SUM_SIZEOF(__VA_ARGS__) / SZt)                                                   \
    WORD_DATA_N_BYTES(0)                                                                           \
    WORD_CODE_TOKENS(__VA_ARGS__)

/* clang-format off */

#define WORD_CODE_AND_DATA(name, code_body, data_body)                                             \
    WORD_CODE_N_AUTO(name)                                                                         \
    WORD_DATA_N_AUTO(name)                                                                         \
    WORD_CODE_START(name)                                                                          \
    code_body                                                                                      \
    WORD_CODE_END(name)                                                                            \
    WORD_DATA_START(name)                                                                          \
    data_body                                                                                      \
    WORD_DATA_END(name)

#define WORD_BODY_SIMPLE(name, flags, dstack, rstack)                                              \
    WORD_FLAGS(flags)                                                                              \
    WORD_##dstack                                                                                  \
    WORD_##rstack                                                                                  \
    WORD_STACK_NONE()      /* simple words do not jump */                                              \
    WORD_NATIVE_LEN(name)                                                                          \
    WORD_CODE(name, exit)

/* clang-format on */

#define WORD_IMPURE M4FLAG_INLINE
/* result only depends on input, only accesses dstack (not rstack or memory)*/
#define WORD_PURE (M4FLAG_INLINE | M4FLAG_PURE)
/* result only depends on input, only accesses dstack and rstack (not memory)*/
#define WORD_R_PURE (M4FLAG_INLINE_ALWAYS | M4FLAG_PURE | M4FLAG_COMPILE_ONLY)

#define WORD(name, prev, dstack, rstack, flags)                                                    \
    WORD_START(name, prev)                                                                         \
    WORD_BODY_SIMPLE(name, flags, dstack, rstack)                                                  \
    WORD_END(name)

#endif /* M4TH_INCLUDE_WORD_MH */
