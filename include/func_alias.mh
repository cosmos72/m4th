/**
 * Copyright (C) 2020 Massimiliano Ghilardi
 *
 * This file is part of m64th.
 *
 * m64th is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * m64th is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with m64th.  If not, see <https://www.gnu.org/licenses/>.
 */

#ifndef M64TH_INCLUDE_FUNC_ALIAS_MH
#define M64TH_INCLUDE_FUNC_ALIAS_MH

#include "../dispatch/sz.mh" /* SZ */
#include "macro.mh"          /* CAT3() */

#define m6f_1s_comma m6fc_comma
#define m6f_2s_comma m6fshort_comma
#define m6f_4s_comma m6fint_comma
#define m6f_8s_comma m6fcomma
#define m6ftoken_comma CAT3(m6f_, SZt, s_comma)
#define m6fxt_comma CAT3(m6f_, SZ, s_comma)

#define m6f_q_continue_if_ m6f_q_if0_ /* (?continue-if)  conditional jump if dtop <> 0 */
#define m6f_q_continue_if0_ m6f_q_if_ /* (?continue-if0) conditional jump if dtop == 0 */
#define m6f_q_until_ m6f_q_if_        /* (?until)    conditional jump if dtop == 0  */
#define m6f_q_until0_ m6f_q_if0_      /* (?until0)   conditional jump if dtop <> 0  */
#define m6f_q_while_ m6f_q_if_        /* (?while)    conditional jump if dtop == 0  */
#define m6f_q_while0_ m6f_q_if0_      /* (?while0)   conditional jump if dtop <> 0  */
#define m6f_again_ m6f_jump_          /* (again)     unconditional jump             */
#define m6f_ahead_ m6f_jump_          /* (ahead)     unconditional jump             */
#define m6f_asm_then_ m6fnoop         /* (asm/then)  noop, used as compile marker   */
#define m6f_break_ m6f_jump_          /* (break)     unconditional jump             */
#define m6fcase m6fnoop               /* (case)      noop, used as compile marker   */
#define m6f_continue_ m6f_jump_       /* (continue)  unconditional jump             */
#define m6f_continue_if_ m6f_if0_     /* (continue-if)  conditional jump if dtop <> 0 */
#define m6f_continue_if0_ m6f_if_     /* (continue-if0) conditional jump if dtop == 0 */
#define m6f_does_exit_ m6fexit        /* (does-exit) alias of exit                  */
#define m6f_endof_ m6f_jump_          /* (endof)     unconditional jump             */
#define m6f_else_ m6f_jump_           /* (else)      unconditional jump             */
#define m6f_fallthrough_ m6f_jump_    /* (fallthrough) unconditional jump           */
#define m6f_repeat_ m6f_jump_         /* (repeat)    unconditional jump             */
#define m6f_until_ m6f_if_            /* (until)     conditional jump if dtop == 0  */
#define m6f_until0_ m6f_if0_          /* (until0)    conditional jump if dtop <> 0  */
#define m6f_while_ m6f_if_            /* (while)     conditional jump if dtop == 0  */
#define m6f_while0_ m6f_if0_          /* (while0)    conditional jump if dtop <> 0  */
#define m6fbegin m6fnoop              /* begin       noop, used as compile marker   */
#define m6fendcase m6fdrop            /* endcase                                    */
#define m6fthen m6fnoop               /* then        noop, used as compile marker   */

/** these are implemented in forth - thus no corresponding assembly function */
#define m6f_inline_ m6f_missing_
#define m6f_optimize_ m6f_missing_
#define m6fcolon m6f_missing_

/** forth 'core ext' word set aliases */
#define m6ffalse m6fzero     /* false  */
#define m6ftrue m6fminus_one /* true   */
#define m6fr_fetch m6fi      /* r@     */

/** m64th-user aliases */
#define m6fr2nd_fetch m6fi_prime /* r2nd@ */
#define m6fr3rd_fetch m6fj       /* r3rd@ */

#define m6fchar_store m6fc_store
#define m6fchar_fetch m6fc_fetch               /* char@   alias for c@     - no dedicated m6func */
#define m6fcell_fetch m6ffetch                 /* cell@   alias for @      - no dedicated m6func */
#define m6fchar_store m6fc_store               /* char!   alias for c!     - no dedicated m6func */
#define m6fcell_store m6fstore                 /* cell!   alias for !      - no dedicated m6func */
#define m6ftoken_store CAT3(m6f_, SZt, _store) /*      token!        */
#define m6ftoken_store_1 CAT3(m6f_, SZt, _store_1)  /* token[1]!     */
#define m6ftoken_store_2 CAT3(m6f_, SZt, _store_2)  /* token[1]!     */
#define m6ftoken_store_3 CAT3(m6f_, SZt, _store_3)  /* token[1]!     */
#define m6ftoken_store_4 CAT3(m6f_, SZt, _store_4)  /* token[1]!     */
#define m6ftoken_store_5 CAT3(m6f_, SZt, _store_5)  /* token[1]!     */
#define m6ftoken_store_6 CAT3(m6f_, SZt, _store_6)  /* token[1]!     */
#define m6ftoken_store_7 CAT3(m6f_, SZt, _store_7)  /* token[1]!     */
#define m6ftoken_store_8 CAT3(m6f_, SZt, _store_8)  /* token[1]!     */
#define m6ftoken_fetch CAT3(m6f_, SZt, u_fetch)     /* token@        */
#define m6ftoken_fetch_1 CAT3(m6f_, SZt, u_fetch_1) /* token[1]      */
#define m6ftoken_fetch_2 CAT3(m6f_, SZt, u_fetch_2) /* token[2]      */
#define m6ftoken_fetch_3 CAT3(m6f_, SZt, u_fetch_3) /* token[3]      */
#define m6ftoken_fetch_4 CAT3(m6f_, SZt, u_fetch_4) /* token[4]      */
#define m6ftoken_fetch_5 CAT3(m6f_, SZt, u_fetch_5) /* token[5]      */
#define m6ftoken_fetch_6 CAT3(m6f_, SZt, u_fetch_6) /* token[6]      */
#define m6ftoken_fetch_7 CAT3(m6f_, SZt, u_fetch_7) /* token[7]      */
#define m6ftoken_fetch_8 CAT3(m6f_, SZt, u_fetch_8) /* token[8]      */

#define m6fone_byte m6fone           /* 1byte   */
#define m6fone_char m6fone           /* 1char   */
#define m6fone_short m6ftwo          /* 1short  */
#define m6fone_ushort m6ftwo         /* 1ushort */
#define m6fone_int m6ffour           /* 1int    */
#define m6fone_uint m6ffour          /* 1uint   */
#define m6fone_cell CAT2(m6f_, SZ)   /* 1cell   */
#define m6fone_token CAT2(m6f_, SZt) /* 1token  */

#define m6fbyte_plus m6fone_plus             /* byte+   */
#define m6fchar_plus m6fone_plus             /* char+   */
#define m6fshort_plus m6ftwo_plus            /* short+  */
#define m6fushort_plus m6ftwo_plus           /* ushort+ */
#define m6fint_plus m6ffour_plus             /* int+    */
#define m6fuint_plus m6ffour_plus            /* uint+   */
#define m6fcell_plus CAT3(m6f_, SZ, _plus)   /* cell+   */
#define m6ftoken_plus CAT3(m6f_, SZt, _plus) /* token+  */

#define m6fbytes m6fnoop                  /* bytes   */
#define m6fchars m6fnoop                  /* chars   */
#define m6fshorts m6ftwo_times            /* shorts  */
#define m6fushorts m6ftwo_times           /* ushorts */
#define m6fints m6ffour_times             /* ints    */
#define m6fuints m6ffour_times            /* uints   */
#define m6fcells CAT3(m6f_, SZ, _times)   /* cells   */
#define m6ftokens CAT3(m6f_, SZt, _times) /* tokens  */

#define m6ftoken_align CAT3(m6f_, SZt, _align)     /* token-align   */
#define m6ftoken_aligned CAT3(m6f_, SZt, _aligned) /* token-aligned */

#define m6fdiv_byte m6fnoop                /* /byte    =>      */
#define m6fdiv_char m6fnoop                /* /char    =>      */
#define m6fdiv_short m6ftwo_div            /* /short   => 2/   */
#define m6fdiv_ushort m6ftwo_div           /* /ushort  => 2/   */
#define m6fdiv_int m6ffour_div             /* /int     => 4/   */
#define m6fdiv_uint m6ffour_div            /* /uint    => 4/   */
#define m6fdiv_cell CAT3(m6f_, SZ, _div)   /* /cell    => SZ/  */
#define m6fdiv_token CAT3(m6f_, SZt, _div) /* /token   => SZt/ */

#define m6fto_token CAT3(m6f_to_, SZt, u) /* >token => >SZt   */

/* needed by m6fcell_plus, m6fcells, m6fdiv_cell, m6ftoken_plus, m6ftokens, m6fdiv_token above */
#define m6f_0 m6fzero              /* 0        */
#define m6f_1 m6fone               /* 1        */
#define m6f_2 m6ftwo               /* 2        */
#define m6f_3 m6fthree             /* 3        */
#define m6f_4 m6ffour              /* 4        */
#define m6f_8 m6feight             /* 8        */
#define m6f_1_times m6fnoop        /* 1*       */
#define m6f_2_times m6ftwo_times   /* 2*       */
#define m6f_4_times m6ffour_times  /* 4*       */
#define m6f_8_times m6feight_times /* 8*       */
#define m6f_2_plus m6ftwo_plus     /* 2+       */
#define m6f_4_plus m6ffour_plus    /* 4+       */
#define m6f_8_plus m6feight_plus   /* 8+       */
#define m6f_2_minus m6ftwo_minus   /* 2-       */
#define m6f_1_div m6fnoop          /* 1/       */
#define m6f_2_div m6ftwo_div       /* 2/       */
#define m6f_4_div m6ffour_div      /* 4/       */
#define m6f_8_div m6feight_div     /* 8/       */

/* needed by m6fto_token above */
#define m6f_to_1u m6fto_char
#define m6f_to_2u m6fto_ushort
#define m6f_to_4u m6fto_uint
#define m6f_to_8u m6fnoop

/* needed by m6ftoken_store* above */
#define m6f_1_store m6fc_store
#define m6f_2_store m6fshort_store
#define m6f_4_store m6fint_store
#define m6f_8_store m6fcell_store

#define m6f_1_store_1 m6fc_store_1
#define m6f_1_store_2 m6fc_store_2
#define m6f_1_store_3 m6fc_store_3
#define m6f_1_store_4 m6fc_store_4
#define m6f_1_store_5 m6fc_store_5
#define m6f_1_store_6 m6fc_store_6
#define m6f_1_store_7 m6fc_store_7
#define m6f_1_store_8 m6fc_store_8
#define m6f_2_store_1 m6fshort_store_1
#define m6f_2_store_2 m6fshort_store_2
#define m6f_2_store_3 m6fshort_store_3
#define m6f_2_store_4 m6fshort_store_4
#define m6f_2_store_5 m6fshort_store_5
#define m6f_2_store_6 m6fshort_store_6
#define m6f_2_store_7 m6fshort_store_7
#define m6f_2_store_8 m6fshort_store_8
#define m6f_4_store_1 m6fint_store_1
#define m6f_4_store_2 m6fint_store_2
#define m6f_4_store_3 m6fint_store_3
#define m6f_4_store_4 m6fint_store_4
#define m6f_4_store_5 m6fint_store_5
#define m6f_4_store_6 m6fint_store_6
#define m6f_4_store_7 m6fint_store_7
#define m6f_4_store_8 m6fint_store_8

#define m6f_8_store_1 m6fcell_store_1
#define m6f_8_store_2 m6fcell_store_2
#define m6f_8_store_3 m6fcell_store_3
#define m6f_8_store_4 m6fcell_store_4
#define m6f_8_store_5 m6fcell_store_5
#define m6f_8_store_6 m6fcell_store_6
#define m6f_8_store_7 m6fcell_store_7
#define m6f_8_store_8 m6fcell_store_8

/* needed by m6ftoken_fetch* above */
#define m6f_1u_fetch m6fchar_fetch
#define m6f_2u_fetch m6fushort_fetch
#define m6f_4u_fetch m6fuint_fetch
#define m6f_8u_fetch m6ffetch

#define m6f_2u_fetch_1 m6fushort_fetch_1
#define m6f_2u_fetch_2 m6fushort_fetch_2
#define m6f_2u_fetch_3 m6fushort_fetch_3
#define m6f_2u_fetch_4 m6fushort_fetch_4
#define m6f_2u_fetch_5 m6fushort_fetch_5
#define m6f_2u_fetch_6 m6fushort_fetch_6
#define m6f_2u_fetch_7 m6fushort_fetch_7
#define m6f_2u_fetch_8 m6fushort_fetch_8

/* needed by m6ftoken_align */
#define m6f_1_align m6fnoop
#define m6f_2_align m6fshort_align
#define m6f_4_align m6fint_align
#define m6f_8_align m6falign

/* needed by m6ftoken_aligned */
#define m6f_1_aligned m6fnoop
#define m6f_2_aligned m6fshort_aligned
#define m6f_4_aligned m6fint_aligned
#define m6f_8_aligned m6faligned

#define m6f_lit_nt_ CAT3(m6f_lit, SZ, s_)
#define m6f_lit_tok_ CAT3(m6f_lit, SZt, s_)
#define m6f_lit_xt_ CAT3(m6f_lit, SZ, s_)

#define m6fd_to_s m6fdrop
#define m6fu_to_d m6fzero
#define m6fd_to_hi m6fnip

#endif /* M64TH_INCLUDE_FUNC_ALIAS_MH */
