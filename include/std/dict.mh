/**
 * Copyright (C) 2020 Massimiliano Ghilardi
 *
 * This file is part of m64th.
 *
 * m64th is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * m64th is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with m64th.  If not, see <https://www.gnu.org/licenses/>.
 */

#ifndef M64TH_INCLUDE_DICT_FORTH_MH
#define M64TH_INCLUDE_DICT_FORTH_MH

/* ------- forth 2012 minimal search order ------------------------------------------------------ */
#define DICT_TOKENS_FORTH_ROOT(X)

#define DICT_WORDS_FORTH_ROOT(X)                                                                   \
    DICT_TOKENS_FORTH_ROOT(X)                                                                      \
    X(5, "forth", forth) /*             set first wordlist in searchorder to 'forth'      */       \
    X(14, "forth-wordlist", forth_wordlist) /* ( -- wid ) get 'forth' wordlist            */       \
    X(10, "m64th-user", m64th_user) /*  set first wordlist in searchorder to 'm64th-user' */       \
    X(9, "get-order", get_order)                                                                   \
    X(5, "order", order)                                                                           \
    X(9, "set-order", set_order)                                                                   \
    X(5, "words", words) /* show all words in search order */

/* ------- forth 2012: core --------------------------------------------------------------------- */
#define DICT_TOKENS_FORTH_CORE(X)                                                                  \
    X(1, "!", store)                                                                               \
    X(2, "#>", num_end)                                                                            \
    X(1, "*", times)                                                                               \
    X(1, "+", plus)                                                                                \
    X(2, "+!", plus_store)                                                                         \
    X(1, ",", comma)                                                                               \
    X(1, "-", minus)                                                                               \
    X(1, "/", div)                                                                                 \
    X(4, "/mod", div_mod)                                                                          \
    X(2, "0<", zero_less)                                                                          \
    X(2, "0=", zero_equal)                                                                         \
    X(2, "0>", zero_more)                                                                          \
    X(2, "1+", one_plus)                                                                           \
    X(2, "1-", one_minus)                                                                          \
    X(2, "2!", two_store)                                                                          \
    X(2, "2*", two_times)                                                                          \
    X(2, "2/", two_div)                                                                            \
    X(3, "2>r", two_to_r)                                                                          \
    X(2, "2@", two_fetch)                                                                          \
    X(5, "2drop", two_drop)                                                                        \
    X(4, "2dup", two_dup)                                                                          \
    X(5, "2over", two_over)                                                                        \
    X(3, "2r>", two_r_from)                                                                        \
    X(3, "2r@", two_r_fetch)                                                                       \
    X(5, "2swap", two_swap)                                                                        \
    X(1, ":", colon)                                                                               \
    X(1, "<", less)                                                                                \
    X(2, "<#", num_start)                                                                          \
    X(1, "=", equal)                                                                               \
    X(1, ">", more)                                                                                \
    X(2, ">r", to_r)                                                                               \
    X(4, "?dup", question_dup)                                                                     \
    X(1, "@", fetch)                                                                               \
    X(3, "abs", abs)                                                                               \
    X(3, "and", and)                                                                               \
    X(5, "align", align)                                                                           \
    X(7, "aligned", aligned)                                                                       \
    X(5, "allot", allot)                                                                           \
    X(4, "base", base)                                                                             \
    X(5, "begin", begin)                                                                           \
    X(2, "bl", bl)                                                                                 \
    X(2, "c!", c_store)                                                                            \
    X(2, "c,", c_comma)                                                                            \
    X(2, "c@", c_fetch)                                                                            \
    X(5, "cell+", cell_plus)                                                                       \
    X(5, "cells", cells)                                                                           \
    X(5, "char+", char_plus)                                                                       \
    X(5, "chars", chars)                                                                           \
    X(5, "count", count)                                                                           \
    X(5, "depth", depth)                                                                           \
    X(2, "do", do)                                                                                 \
    X(4, "drop", drop)                                                                             \
    X(3, "dup", dup)                                                                               \
    X(4, "emit", emit)                                                                             \
    X(7, "execute", execute)                                                                       \
    X(4, "exit", exit)                                                                             \
    X(4, "fill", fill)                                                                             \
    X(4, "here", here)                                                                             \
    X(4, "hold", hold)                                                                             \
    X(1, "i", i)                                                                                   \
    X(9, "immediate", immediate)                                                                   \
    X(6, "invert", invert)                                                                         \
    X(1, "j", j)                                                                                   \
    X(6, "lshift", lshift)                                                                         \
    X(3, "max", max)                                                                               \
    X(3, "min", min)                                                                               \
    X(3, "mod", mod)                                                                               \
    X(4, "move", move)                                                                             \
    X(6, "negate", negate)                                                                         \
    X(3, "nip", nip)                                                                               \
    X(2, "or", or)                                                                                 \
    X(4, "over", over)                                                                             \
    X(2, "r>", r_from)                                                                             \
    X(2, "r@", r_fetch)                                                                            \
    X(3, "rot", rot)                                                                               \
    X(6, "rshift", rshift)                                                                         \
    X(5, "state", state)                                                                           \
    X(4, "swap", swap)                                                                             \
    X(4, "then", then)                                                                             \
    X(4, "type", type)                                                                             \
    X(2, "u<", u_less)                                                                             \
    X(6, "unloop", unloop)                                                                         \
    X(3, "xor", xor)                                                                               \
    X(1, "[", left_bracket)                                                                        \
    X(1, "]", right_bracket)

#define DICT_WORDS_FORTH_CORE(X)                                                                   \
    DICT_TOKENS_FORTH_CORE(X)                                                                      \
    /* the following words are implemented in forth, thus no dedicated m6token value */            \
    X(1, "#", num)                                                                                 \
    X(2, "#s", num_s)                                                                              \
    X(1, "'", tick)                                                                                \
    X(1, "(", paren)                                                                               \
    X(5, "+loop", plus_loop)                                                                       \
    X(1, ".", dot)                                                                                 \
    X(2, ".\"", dot_quote)                                                                         \
    X(1, ";", semi)                                                                                \
    X(3, ">in", to_in)                                                                             \
    X(7, ">number", to_number)                                                                     \
    X(8, "compile,", compile_comma)                                                                \
    X(8, "constant", constant)                                                                     \
    X(2, "cr", cr)                                                                                 \
    X(6, "create", create)                                                                         \
    X(7, "decimal", decimal)                                                                       \
    X(5, "does>", does)                                                                            \
    X(4, "else", else)                                                                             \
    X(4, "find", find)                                                                             \
    X(2, "if", if)                                                                                 \
    X(5, "leave", leave)                                                                           \
    X(7, "literal", literal)                                                                       \
    X(4, "loop", loop)                                                                             \
    X(8, "postpone", postpone)                                                                     \
    X(7, "recurse", recurse)                                                                       \
    X(6, "repeat", repeat)                                                                         \
    X(2, "s\"", s_quote)                                                                           \
    X(3, "s>d", s_to_d)                                                                            \
    X(4, "sign", sign)                                                                             \
    X(6, "source", source)                                                                         \
    X(5, "space", space)                                                                           \
    X(6, "spaces", spaces)                                                                         \
    X(2, "u.", u_dot)                                                                              \
    X(6, "um/mod", um_div_mod)                                                                     \
    X(5, "until", until)                                                                           \
    X(8, "variable", variable)                                                                     \
    X(5, "while", while)                                                                           \
    X(3, "[']", bracket_tick)

/* ------- forth 2012: core ext ----------------------------------------------------------------- */
#define DICT_TOKENS_FORTH_CORE_EXT(X)                                                              \
    X(3, "0<>", zero_ne)                                                                           \
    X(2, "<>", ne)                                                                                 \
    X(4, "case", case)                                                                             \
    X(7, "endcase", endcase)                                                                       \
    X(5, "false", false)                                                                           \
    X(5, "holds", holds)                                                                           \
    X(4, "pick", pick)                                                                             \
    X(4, "roll", roll)                                                                             \
    X(4, "true", true)                                                                             \
    X(4, "tuck", tuck)                                                                             \
    X(2, "u>", u_more)                                                                             \
    X(6, "within", within) /* used often => implement as m6func instead of forth word */

#define DICT_WORDS_FORTH_CORE_EXT(X)                                                               \
    DICT_TOKENS_FORTH_CORE_EXT(X)                                                                  \
    /* the following words are implemented in forth - no dedicated m6token value */                \
    X(2, ".(", dot_paren)                                                                          \
    X(7, ":noname", colon_noname)                                                                  \
    X(3, "?do", question_do)                                                                       \
    X(9, "action-of", action_of)                                                                   \
    X(5, "again", again)                                                                           \
    X(7, "buffer:", buffer_colon)                                                                  \
    X(5, "defer", defer)                                                                           \
    X(6, "defer!", defer_store)                                                                    \
    X(6, "defer@", defer_fetch)                                                                    \
    X(5, "endof", endof)                                                                           \
    X(5, "erase", erase)                                                                           \
    X(3, "hex", hex)                                                                               \
    X(2, "is", is)                                                                                 \
    X(2, "of", of)                                                                                 \
    X(5, "parse", parse)                                                                           \
    X(10, "parse-name", parse_name)                                                                \
    X(2, "to", to)                                                                                 \
    X(5, "value", value)                                                                           \
    X(1, "\\", backslash)

/* ------- forth 2012: double ------------------------------------------------------------------- */
#define DICT_TOKENS_FORTH_DOUBLE(X) /*                                                      */

#define DICT_WORDS_FORTH_DOUBLE(X) /*                                                       */     \
    DICT_TOKENS_FORTH_DOUBLE(X)    /*                                                       */     \
    X(3, "d>s", d_to_s)            /* ( d -- n ) truncate double width number               */     \
    X(3, "d0<", d_zero_less)       /* ( d -- t|f ) true if d is negative                    */     \
    X(3, "d0=", d_zero_equal)      /* ( d -- t|f ) true if d is zero                        */

/* ------- forth 2012: double ext --------------------------------------------------------------- */
#define DICT_TOKENS_FORTH_DOUBLE_EXT(X) /*                                                      */ \
    X(4, "2rot", two_rot)

#define DICT_WORDS_FORTH_DOUBLE_EXT(X) /*                                                       */ \
    DICT_TOKENS_FORTH_DOUBLE_EXT(X)    /*                                                       */

/* ------- forth 2012: exception ---------------------------------------------------------------- */
#define DICT_TOKENS_FORTH_EXCEPTION(X) /*                                                       */ \
    X(5, "throw", throw)

#define DICT_WORDS_FORTH_EXCEPTION(X)                                                              \
    DICT_TOKENS_FORTH_EXCEPTION(X)                                                                 \
    X(5, "abort", abort)                                                                           \
    X(6, "abort\"", abort_quote)                                                                   \
    X(5, "catch", catch)

/* ------- forth 2012: locals ------------------------------------------------------------------- */
#define DICT_TOKENS_FORTH_LOCALS(X) /*                                                       */

#define DICT_WORDS_FORTH_LOCALS(X)                                                                 \
    DICT_TOKENS_FORTH_LOCALS(X)                                                                    \
    X(7, "(local)", _local_) /* ( c-addr u -- ) create a new local variable with specified name */ \
    X(2, "{:", _brace_colon_) /* parse and create local variables */

/* ------- forth 2012: memory ------------------------------------------------------------------- */
#define DICT_TOKENS_FORTH_MEMORY(X) /*                                                       */

#define DICT_WORDS_FORTH_MEMORY(X)                                                                 \
    DICT_TOKENS_FORTH_MEMORY(X)                                                                    \
    X(8, "allocate", allocate) /* ( u        -- a-addr ior  ) allocate u bytes of memory */        \
    X(4, "free", free)         /* ( a-addr   -- ior         ) free memory */                       \
    X(6, "resize", resize)     /* ( a-addr u -- a-addr' ior ) resize allocated memory to u bytes */

/* ------- forth 2012: tools -------------------------------------------------------------------- */
#define DICT_TOKENS_FORTH_TOOLS(X)

#define DICT_WORDS_FORTH_TOOLS(X)                                                                  \
    DICT_TOKENS_FORTH_TOOLS(X)                                                                     \
    X(2, ".s", dot_s)                                                                              \
    X(3, "see", see)         /* read name then show its definition */                              \
    /*X(5, "words", words)*/ /* already included in forth-root: show all words in search order */

/* ------- forth 2012: tools ext ---------------------------------------------------------------- */
#define DICT_TOKENS_FORTH_TOOLS_EXT(X)                                                             \
    X(3, "bye", bye)                                                                               \
    X(11, "name>string", name_to_string) /* ( nt -- c-addr u  ) convert name to string */

#define DICT_WORDS_FORTH_TOOLS_EXT(X)                                                              \
    DICT_TOKENS_FORTH_TOOLS_EXT(X)                                                                 \
    X(5, "ahead", ahead)                                                                           \
    X(7, "cs-pick", cs_pick)                                                                       \
    X(7, "cs-roll", cs_roll)

/* ------- forth 2012: search order ------------------------------------------------------------- */
#define DICT_TOKENS_FORTH_SEARCHORDER(X)                                                           \
    X(11, "get-current", get_current)                                                              \
    X(11, "set-current", set_current)

#define DICT_WORDS_FORTH_SEARCHORDER(X)                                                            \
    DICT_TOKENS_FORTH_SEARCHORDER(X)                                                               \
    X(4, "also", also)                                                                             \
    X(11, "definitions", definitions)                                                              \
    /* X(5, "forth", forth) */                    /* already defined in forth_root dict */         \
    /* X(14, "forth-wordlist", forth_wordlist) */ /* already defined in forth_root dict */         \
    /* X(9, "get-order", get_order) */            /* already defined in forth_root dict */         \
    X(4, "only", only)                                                                             \
    X(8, "previous", previous)                                                                     \
    X(15, "search-wordlist", search_wordlist)                                                      \
    /* X(9, "set-order", set_order) */ /* already defined in forth_root dict                */     \
    X(8, "wordlist", wordlist)         /* ( -- wid ) create a new, initially empty wordlist */

/* ------- forth 2012: string ------------------------------------------------------------------- */
#define DICT_TOKENS_FORTH_STRING(X)                                                                \
    X(7, "/string", div_string)                                                                    \
    X(5, "cmove", cmove)                                                                           \
    /*X(6, "cmove>", cmove_top)*/

#define DICT_WORDS_FORTH_STRING(X) /*                                                          */  \
    DICT_TOKENS_FORTH_STRING(X)    /*                                                          */  \
    X(5, "blank", blank)

/* ------- forth 2012 --------------------------------------------------------------------------- */
#define DICT_TOKENS_FORTH(X)                                                                       \
    DICT_TOKENS_FORTH_ROOT(X)                                                                      \
    DICT_TOKENS_FORTH_CORE(X)                                                                      \
    DICT_TOKENS_FORTH_CORE_EXT(X)                                                                  \
    DICT_TOKENS_FORTH_DOUBLE(X)                                                                    \
    DICT_TOKENS_FORTH_DOUBLE_EXT(X)                                                                \
    DICT_TOKENS_FORTH_EXCEPTION(X)                                                                 \
    DICT_TOKENS_FORTH_LOCALS(X)                                                                    \
    DICT_TOKENS_FORTH_MEMORY(X)                                                                    \
    DICT_TOKENS_FORTH_TOOLS_EXT(X)                                                                 \
    DICT_TOKENS_FORTH_SEARCHORDER(X)                                                               \
    DICT_TOKENS_FORTH_STRING(X)

#define DICT_WORDS_FORTH(X)                                                                        \
    DICT_WORDS_FORTH_ROOT(X)                                                                       \
    DICT_WORDS_FORTH_CORE(X)                                                                       \
    DICT_WORDS_FORTH_CORE_EXT(X)                                                                   \
    DICT_WORDS_FORTH_DOUBLE(X)                                                                     \
    DICT_WORDS_FORTH_DOUBLE_EXT(X)                                                                 \
    DICT_WORDS_FORTH_EXCEPTION(X)                                                                  \
    DICT_WORDS_FORTH_LOCALS(X)                                                                     \
    DICT_WORDS_FORTH_MEMORY(X)                                                                     \
    DICT_WORDS_FORTH_TOOLS_EXT(X)                                                                  \
    DICT_WORDS_FORTH_SEARCHORDER(X)                                                                \
    DICT_WORDS_FORTH_STRING(X)

#endif /* M64TH_INCLUDE_DICT_FORTH_MH */
