/**
 * This file is part of m4th.
 *
 * m4th is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * m4th is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with m4th.  If not, see <https://www.gnu.org/licenses/>.
 */

#ifndef M4TH_INCLUDE_DICT_M4TH_MH
#define M4TH_INCLUDE_DICT_M4TH_MH

/* ------- m4th-user ---------------------------------------------------------------------------- */
#define DICT_TOKENS_M4TH_USER(X)                                                                   \
    X(2, "<=", less_equal)                                                                         \
    X(2, ">=", more_equal)                                                                         \
    X(3, "0<=", zero_less_equal)                                                                   \
    X(3, "0>=", zero_more_equal)                                                                   \
    X(2, "2+", two_plus)                                                                           \
    X(2, "2-", two_minus)                                                                          \
    X(2, "4*", four_times)                                                                         \
    X(2, "4+", four_plus)                                                                          \
    X(2, "4/", four_div)                                                                           \
    X(2, "8*", eight_times)                                                                        \
    X(2, "8+", eight_plus)                                                                         \
    X(2, "8/", eight_div)                                                                          \
    /*                             */ /*                                                */         \
    X(2, "i*", i_times)                                                                            \
    X(2, "i+", i_plus)                                                                             \
    X(2, "i-", i_minus)                                                                            \
    X(4, "noop", noop)                                                                             \
    X(5, "dup>r", dup_to_r)                                                                        \
    X(6, "r>drop", r_from_drop)                                                                    \
    X(2, "r!", r_store)                                                                            \
    X(2, "r+", r_plus)                                                                             \
    X(4, "-rot", minus_rot)                                                                        \
    /*                             */ /*                                                */         \
    X(5, "byte@", byte_fetch)                                                                      \
    /* X(5, "char@", char_fetch)   */ /* alias of c@                                    */         \
    X(6, "short@", short_fetch)                                                                    \
    X(7, "ushort@", ushort_fetch)                                                                  \
    X(4, "int@", int_fetch)                                                                        \
    X(5, "uint@", uint_fetch)                                                                      \
    /*                             */ /*                                                */         \
    /* X(5, "byte!", byte_store)   */ /* alias of c!                                    */         \
    /* X(5, "char!", char_store)   */ /* alias of c!                                    */         \
    X(6, "short!", short_store)                                                                    \
    /*X(7, "ushort!", ushort_store)*/ /* alias of short!                                */         \
    X(4, "int!", int_store)                                                                        \
    /*X(5, "uint!", uint_store)    */ /* alias of int!                                  */         \
    /*                             */ /*                                                */         \
    X(7, "to-byte", to_byte)                                                                       \
    X(7, "to-char", to_char)                                                                       \
    X(8, "to-short", to_short)                                                                     \
    X(9, "to-ushort", to_ushort)                                                                   \
    X(6, "to-int", to_int)                                                                         \
    X(7, "to-uint", to_uint)

#define DICT_WORDS_M4TH_USER(X)                                                                    \
    DICT_TOKENS_M4TH_USER(X)                                                                       \
    X(5, "/byte", div_byte)           /* alias of noop                                  */         \
    X(5, "/char", div_char)           /* alias of noop                                  */         \
    X(6, "/short", div_short)         /* alias of two_div                               */         \
    X(7, "/ushort", div_ushort)       /* alias of two_div                               */         \
    X(4, "/int", div_int)             /* alias of four_div                              */         \
    X(5, "/uint", div_uint)           /* alias of four_div                              */         \
    X(5, "/cell", div_cell)           /* alias of _SZ_div                               */         \
    /*                             */ /*                                                */         \
    X(5, "char@", char_fetch)         /* alias of c@                                    */         \
    X(5, "byte!", byte_store)         /* alias of c!                                    */         \
    X(5, "char!", char_store)         /* alias of c!                                    */         \
    X(7, "ushort!", ushort_store)     /* alias of short!                                */         \
    X(5, "uint!", uint_store)         /* alias of int!                                  */         \
    /*                             */ /*                                                */         \
    X(5, "byte+", byte_plus)          /* alias of one_plus                              */         \
    /* X(5, "char+", char_plus)    */ /* already in forth 'core' word set               */         \
    X(6, "short+", short_plus)        /* alias of two_plus                              */         \
    X(7, "ushort+", ushort_plus)      /* alias of two_plus                              */         \
    X(4, "int+", int_plus)            /* alias of four_plus                             */         \
    X(4, "ints", ints)                /* alias of four_times                            */         \
    X(5, "uint+", uint_plus)          /* alias of four_plus                             */         \
    /*                             */ /*                                                */         \
    X(5, "bytes", bytes)              /* alias of noop                                  */         \
    /* X(5, "chars", chars) */        /* already in forth 'core' word set               */         \
    X(6, "shorts", shorts)            /* alias of two_times                             */         \
    X(7, "ushorts", ushorts)          /* alias of two_times                             */         \
    X(5, "uints", uints)              /* alias of four_times                            */

/* ------- m4th-core ---------------------------------------------------------------------------- */
#define DICT_TOKENS_M4TH_CORE(X)                                                                   \
    X(7, "xt>code", xt_to_code)            /* ( XT -- taddr n )   get code array    from XT */     \
    X(9, "xt>code>n", xt_to_code_n)        /* ( XT -- n )         get code size     from XT */     \
    X(7, "xt>data", xt_to_data)            /* ( XT -- caddr n )   get data array    from XT */     \
    X(12, "xt>data>addr", xt_to_data_addr) /* ( XT -- caddr )     get data address  from XT */     \
    X(9, "xt>data>n", xt_to_data_n)        /* ( XT -- n )         get data size     from XT */     \
    X(8, "xt>flags", xt_to_flags)          /* ( XT -- m4flags )   get m4flags       from XT */

#define DICT_WORDS_M4TH_CORE(X)                                                                    \
    DICT_TOKENS_M4TH_CORE(X)                                                                       \
    X(8, "to-token", to_token)             /* alias of to_SZtu,     no dedicated m4token */        \
    X(6, "/token", div_token)              /* alias of _SZt_div,    no dedicated m4token */        \
    X(6, "token!", token_store)            /* alias of _SZtu_store, no dedicated m4token */        \
    X(6, "token@", token_fetch)            /* alias of _SZtu_fetch, no dedicated m4token */        \
    X(6, "token+", token_plus)             /* alias of _SZt_plus,   no dedicated m4token */        \
    X(6, "tokens", tokens)                 /* alias of _SZt_times,  no dedicated m4token */        \
    X(10, "xt-inline?", xt_inline_query)   /* ( XT -- flag ) calls to XT should be inlined? */     \
    X(12, "xt>code>addr", xt_to_code_addr) /* ( XT -- taddr )   get code address from XT */

/* ------- m4th-impl ---------------------------------------------------------------------------- */
#define DICT_TOKENS_M4TH_IMPL(X)                                                                   \
    X(5, "(?do)", _question_do_)                                                                   \
    X(6, "(call)", _call_)                                                                         \
    X(4, "(do)", _do_)                                                                             \
    X(6, "(else)", _else_)                                                                         \
    X(13, "(exec-native)", _exec_native_)                                                          \
    X(12, "(exec-token)", _exec_token_)                                                            \
    X(4, "(if)", _if_)                                                                             \
    X(9, "(if-zero)", _if_zero_)                                                                   \
    X(5, "(if<)", _if_less_)                                                                       \
    X(6, "(if<=)", _if_less_equal_)                                                                \
    X(6, "(if<>)", _if_ne_)                                                                        \
    X(5, "(if=)", _if_equal_)                                                                      \
    X(5, "(if>)", _if_more_)                                                                       \
    X(6, "(if>=)", _if_more_equal_)                                                                \
    X(4, "(ip)", _ip_)                                                                             \
    X(7, "(leave)", _leave_)                                                                       \
    X(12, "(literal-2s)", _literal2s_)                                                             \
    X(12, "(literal-4s)", _literal4s_)                                                             \
    X(12, "(literal-8s)", _literal8s_)                                                             \
    X(6, "(loop)", _loop_)                                                                         \
    X(9, "(missing)", _missing_)                                                                   \
    X(6, "(then)", _then_)                                                                         \
    X(11, "[#compiled]", _num_compiled_)                                                           \
    X(13, "[compile-2s,]", _compile2s_)                                                            \
    X(13, "[compile-4s,]", _compile4s_)                                                            \
    X(13, "[compile-8s,]", _compile8s_)                                                            \
    X(16, "[compile-lit-2s]", _compile_lit2s_)                                                     \
    X(25, "[compile-unresolved-jump]", _compile_unresolved_jump_)                                  \
    X(4, "[xt]", _xt_)                                                                             \
    X(2, "-1", minus_one)                                                                          \
    X(1, "0", zero)                                                                                \
    X(1, "1", one)                                                                                 \
    X(1, "2", two)                                                                                 \
    X(1, "3", three)                                                                               \
    X(1, "4", four)                                                                                \
    X(1, "8", eight)                                                                               \
    X(2, "i'", i_prime)

#define DICT_WORDS_M4TH_IMPL(X)                                                                    \
    DICT_TOKENS_M4TH_IMPL(X)                                                                       \
    X(23, "[any-token-gives-cell?]", _any_token_gives_cell_q_)                                     \
    X(8, "[inline]", _inline_)                                                                     \
    X(10, "[optimize]", _optimize_)                                                                \
    X(19, "[resolve-jump-here]", _resolve_jump_here_) /* common back-end of 'else' and 'then' */   \
    X(19, "[token-gives-cell?]", _token_gives_cell_q_)

/* ------- m4th-* ------------------------------------------------------------------------------- */
#define DICT_WORDS_M4TH(X) /* contains all DICT_WORDS_M4TH_* */                                    \
    DICT_WORDS_M4TH_USER(X) DICT_WORDS_M4TH_CORE(X) DICT_WORDS_M4TH_IMPL(X)

#define DICT_TOKENS_M4TH(X) /* contains all DICT_TOKENS_M4TH_* */                                  \
    DICT_TOKENS_M4TH_USER(X) DICT_TOKENS_M4TH_CORE(X) DICT_TOKENS_M4TH_IMPL(X)

#endif /* M4TH_INCLUDE_DICT_M4TH_MH */
