/**
 * Copyright (C) 2020 Massimiliano Ghilardi
 *
 * This file is part of m4th.
 *
 * m4th is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * m4th is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with m4th.  If not, see <https://www.gnu.org/licenses/>.
 */

#ifndef M4TH_INCLUDE_DICT_M4TH_MH
#define M4TH_INCLUDE_DICT_M4TH_MH

/* ------- m4th-user ---------------------------------------------------------------------------- */
#define DICT_TOKENS_M4TH_USER(X)                                                                   \
    X(2, "<=", less_equal)                                                                         \
    X(2, ">=", more_equal)                                                                         \
    X(3, "0<=", zero_less_equal)                                                                   \
    X(3, "0>=", zero_more_equal)                                                                   \
    X(2, "2+", two_plus)                                                                           \
    X(2, "2-", two_minus)                                                                          \
    X(2, "4*", four_times)                                                                         \
    X(2, "4+", four_plus)                                                                          \
    X(2, "4/", four_div)                                                                           \
    X(2, "8*", eight_times)                                                                        \
    X(2, "8+", eight_plus)                                                                         \
    X(2, "8/", eight_div)                                                                          \
    /*                             */ /*                                                */         \
    X(7, "2dup2>r", two_dup_two_to_r)                                                              \
    X(4, "2nip", two_nip)                                                                          \
    X(7, "2r>2drop", two_r_from_two_drop)                                                          \
    X(6, "bounds", bounds)  /* ( c-addr u -- c-addr+u c-addr ) get string bounds */                \
    X(5, "dup>r", dup_to_r) /*                    equivalent to dup >r   */                        \
    X(4, "flip", flip)      /* ( a b c -- c b a ) equivalent to swap rot */                        \
    X(2, "i*", i_times)                                                                            \
    X(2, "i+", i_plus)                                                                             \
    X(2, "i-", i_minus)                                                                            \
    X(2, "i'", i_prime)                                                                            \
    X(4, "noop", noop)                                                                             \
    X(6, "r>drop", r_from_drop)                                                                    \
    X(2, "r!", r_store)                                                                            \
    X(2, "r+", r_plus)                                                                             \
    X(4, "-rot", minus_rot)                                                                        \
    X(7, "squared", squared)                                                                       \
    X(7, "string=", string_equal)        /* ( addr1 addr2 u -- addr1 addr2 u t|f )         */      \
    X(10, "string-ci=", string_ci_equal) /* ( addr1 addr2 u -- addr1 addr2 u t|f )         */      \
    X(3, "sub", sub)                     /* equivalent to: swap -                          */      \
    X(5, "trail", trail)                 /* equivalent to: over swap                       */      \
    /*                             */    /*                                                */      \
    X(5, "byte@", byte_fetch)                                                                      \
    /* X(5, "char@", char_fetch)   */ /* alias of c@                                    */         \
    X(6, "short@", short_fetch)                                                                    \
    X(7, "ushort@", ushort_fetch)                                                                  \
    X(4, "int@", int_fetch)                                                                        \
    X(5, "uint@", uint_fetch)                                                                      \
    /*                             */ /*                                                */         \
    /* X(5, "byte!", byte_store)   */ /* alias of c!                                    */         \
    /* X(5, "char!", char_store)   */ /* alias of c!                                    */         \
    X(6, "short!", short_store)                                                                    \
    /*X(7, "ushort!", ushort_store)*/ /* alias of short!                                */         \
    X(4, "int!", int_store)                                                                        \
    /*X(5, "uint!", uint_store)    */ /* alias of int!                                  */         \
    /*                             */ /*                                                */         \
    X(7, "to-byte", to_byte)                                                                       \
    X(7, "to-char", to_char)                                                                       \
    X(8, "to-short", to_short)                                                                     \
    X(9, "to-ushort", to_ushort)                                                                   \
    X(6, "to-int", to_int)                                                                         \
    X(7, "to-uint", to_uint)                                                                       \
    X(3, "u<=", u_less_equal)                                                                      \
    X(3, "u>=", u_more_equal)

#define DICT_WORDS_M4TH_USER(X)                                                                    \
    DICT_TOKENS_M4TH_USER(X)                                                                       \
    X(5, "/byte", div_byte)           /* alias of noop                                  */         \
    X(5, "/char", div_char)           /* alias of noop                                  */         \
    X(6, "/short", div_short)         /* alias of two_div                               */         \
    X(7, "/ushort", div_ushort)       /* alias of two_div                               */         \
    X(4, "/int", div_int)             /* alias of four_div                              */         \
    X(5, "/uint", div_uint)           /* alias of four_div                              */         \
    X(5, "/cell", div_cell)           /* alias of _SZ_div                               */         \
    /*                             */ /*                                                */         \
    X(5, "char@", char_fetch)         /* alias of c@                                    */         \
    X(5, "byte!", byte_store)         /* alias of c!                                    */         \
    X(5, "char!", char_store)         /* alias of c!                                    */         \
    X(7, "ushort!", ushort_store)     /* alias of short!                                */         \
    X(5, "uint!", uint_store)         /* alias of int!                                  */         \
    /*                             */ /*                                                */         \
    X(5, "byte+", byte_plus)          /* alias of one_plus                              */         \
    /* X(5, "char+", char_plus)    */ /* already in forth 'core' word set               */         \
    X(6, "short+", short_plus)        /* alias of two_plus                              */         \
    X(7, "ushort+", ushort_plus)      /* alias of two_plus                              */         \
    X(4, "int+", int_plus)            /* alias of four_plus                             */         \
    X(4, "ints", ints)                /* alias of four_times                            */         \
    X(5, "uint+", uint_plus)          /* alias of four_plus                             */         \
    /*                             */ /*                                                */         \
    X(5, "bytes", bytes)              /* alias of noop                                  */         \
    /* X(5, "chars", chars) */        /* already in forth 'core' word set               */         \
    X(6, "shorts", shorts)            /* alias of two_times                             */         \
    X(7, "ushorts", ushorts)          /* alias of two_times                             */         \
    X(5, "uints", uints)              /* alias of four_times                            */         \
    /*                             */ /*                                                */         \
    X(3, "?if", q_if)                 /* alias of dup if                                */         \
    X(4, "?if0", q_if_zero)           /* alias of dup 0= if                             */         \
    X(3, "if0", if_zero)              /* alias of 0= if                                 */         \
    X(9, "interpret", interpret)      /* one iteration of forth interpret/compile loop  */         \
    /*                           ( -- c-addr u ) read blank-delimited string from iobuf */         \
    X(20, "iobuf-read-nonblanks", iobuf_read_nonblanks)                                            \
    X(17, "iobuf-skip-blanks", iobuf_skip_blanks) /* skip chars <= space from iobuf     */         \
    X(4, "repl", repl)                 /* call INTERPRET repeatedly until EOF or an error */       \
    X(8, "string<>", string_ne)        /* ( addr1 addr2 u -- addr1 addr2 u t|f )          */       \
    X(11, "string-ci<>", string_ci_ne) /* ( addr1 addr2 u -- addr1 addr2 u t|f )          */       \
    /* ( caddr n -- caddr' n' x t|f ) convert string to number, recognizing base, sign prefix */   \
    X(13, "string>number", string_to_number)                                                       \
    X(11, "valid-base?", valid_base_q) /* ( base -- t|f ) true if 2 <= base <= 36       */

/* ------- m4th-c ------------------------------------------------------------------------------- */
#define DICT_TOKENS_M4TH_C(X)                                                                      \
    X(7, "c-arg-0", c_arg_0)   /* prepare 0 args for C function call    */                         \
    X(7, "c-arg-1", c_arg_1)   /* prepare 1 arg  for C function call    */                         \
    X(7, "c-arg-2", c_arg_2)   /* prepare 2 args for C function call    */                         \
    X(7, "c-arg-3", c_arg_3)   /* prepare 3 args for C function call    */                         \
    X(7, "c-arg-4", c_arg_4)   /* prepare 4 args for C function call    */                         \
    X(7, "c-arg-5", c_arg_5)   /* prepare 5 args for C function call    */                         \
    X(7, "c-arg-6", c_arg_6)   /* prepare 6 args for C function call    */                         \
    X(8, "(c-call)", _c_call_) /* must be followed by C function address. calls it. */             \
    X(7, "c-ret-0", c_ret_0)   /* push 0 values returned by C function call */                     \
    X(7, "c-ret-1", c_ret_1)   /* push 1 value  returned by C function call */                     \
    X(7, "c-ret-2", c_ret_2)   /* push 2 values returned by C function call */

#define DICT_WORDS_M4TH_C(X) DICT_TOKENS_M4TH_C(X)

/* ------- m4th-core ---------------------------------------------------------------------------- */
#define DICT_TOKENS_M4TH_CORE(X)                                                                   \
    X(8, "m4th>err", m4th_err)      /* (    -- addr ) get address of m4th.err            */        \
    X(8, "in>iobuf", in_to_iobuf)   /* (    -- io   ) get current input as iobuf         */        \
    X(10, "iobuf>addr", iobuf_addr) /* ( io -- c-addr   ) get start of iobuf data buffer */        \
    /* ( io -- c-addr u ) get iobuf entire content i.e. from 0 to iobuf>size */                    \
    X(14, "iobuf>all-data", iobuf_all_data)                                                        \
    /* ( io -- c-addr u ) get iobuf content i.e. from iobuf>pos to iobuf>size */                   \
    X(10, "iobuf>data", iobuf_data)                                                                \
    X(10, "iobuf>func", iobuf_func)     /* ( io -- addr ) get address of iobuf I/O function  */    \
    X(12, "iobuf>handle", iobuf_handle) /* ( io -- addr ) get address of iobuf handle        */    \
    X(9, "iobuf>max", iobuf_max)        /* ( io -- u    ) get iobuf max size i.e. capacity   */    \
    X(9, "iobuf>pos", iobuf_pos)        /* ( io -- addr ) get address of iobuf position      */    \
    X(10, "iobuf>size", iobuf_size)     /* ( io -- addr ) get address of iobuf size          */    \
    /*              searchorder-i ( u -- addr ) get address of searchorder i-th element  */        \
    X(13, "searchorder-i", searchorder_i)                                                          \
    X(13, "searchorder-n", searchorder_n) /* (    -- addr    ) get address of searchorder count */ \
    X(8, "user-var", user_var)      /* ( -- addr ) must be followed by index of user variable */   \
    X(9, "word>code", word_to_code) /* ( w  -- taddr n ) get code array from word         */       \
    X(11, "word>code>n", word_to_code_n)  /* ( w  -- n       ) get code size from word          */ \
    X(10, "word>flags", word_to_flags)    /* ( w  -- m4flags ) get m4flags of word              */ \
    X(9, "word>name", word_to_name)       /* ( w  -- addr n  ) get name of word                 */ \
    X(9, "word>prev", word_to_prev)       /* ( w  -- w'|0    ) get previous word in wordlist    */ \
    X(7, "word>xt", word_to_xt)           /* ( w  -- XT      ) get XT == code address from word */ \
    X(13, "wordlist-last", wordlist_last) /* ( wid -- w      ) get last word in wordlist        */ \
    X(7, "xt>word", xt_to_word)           /* ( XT -- w       ) convert XT to word               */

#define DICT_WORDS_M4TH_CORE(X)                                                                    \
    DICT_TOKENS_M4TH_CORE(X)                                                                       \
    /* ( handle c-addr u -- 0 M4ERR_UNEXPECTED_EOF ) always return EOF. usable for iobuf>func */   \
    X(10, "always-eof", always_eof)                                                                \
    X(12, "iobuf-refill", iobuf_refill) /* ( io -- err  ) read some data into iobuf     */         \
    X(11, "string>word",                                                                           \
      string_to_word)           /* ( c-addr u -- w|0 -1|0|1 ) find name in search order */         \
    X(6, "/token", div_token)   /* alias of _SZt_div,    no dedicated m4token */                   \
    X(8, "to-token", to_token)  /* alias of to_SZtu,     no dedicated m4token */                   \
    X(6, "token!", token_store) /* alias of _SZtu_store, no dedicated m4token */                   \
    X(6, "token@", token_fetch) /* alias of _SZtu_fetch, no dedicated m4token */                   \
    X(6, "token+", token_plus)  /* alias of _SZt_plus,   no dedicated m4token */                   \
    X(6, "tokens", tokens)      /* alias of _SZt_times,  no dedicated m4token */                   \
    X(12, "word-inline?", word_inline_query) /* ( w -- flag ) calls to word should be inlined? */  \
    X(13, "wordlist-find", wordlist_find)    /* ( c-addr u wid -- w|0 -1|0|1 ) search in wordlist */

/* ------- m4th-impl ---------------------------------------------------------------------------- */
#define DICT_TOKENS_M4TH_IMPL(X)                                                                   \
    X(5, "(?do)", _q_do_)                                                                          \
    X(5, "(?if)", _q_if_)                                                                          \
    X(6, "(?if0)", _q_if_zero_)                                                                    \
    X(8, "(?while)", _q_while_)                                                                    \
    X(9, "(?while0)", _q_while_zero_)                                                              \
    X(7, "(again)", _again_)                                                                       \
    X(6, "(call)", _call_)                                                                         \
    X(9, "(call-xt)", _call_xt_)                                                                   \
    X(6, "(else)", _else_)                                                                         \
    X(13, "(exec-native)", _exec_native_)                                                          \
    X(12, "(exec-token)", _exec_token_)                                                            \
    X(4, "(if)", _if_)                                                                             \
    X(5, "(if0)", _if_zero_)                                                                       \
    X(4, "(ip)", _ip_)                                                                             \
    X(9, "(ip>data)", _ip_to_data_)                                                                \
    X(14, "(ip>data>addr)", _ip_to_data_addr_)                                                     \
    X(7, "(leave)", _leave_)                                                                       \
    X(8, "(lit-2s)", _lit2s_)                                                                      \
    X(8, "(lit-4s)", _lit4s_)                                                                      \
    X(8, "(lit-8s)", _lit8s_)                                                                      \
    X(6, "(loop)", _loop_)                                                                         \
    X(9, "(missing)", _missing_)                                                                   \
    X(8, "(repeat)", _repeat_)                                                                     \
    X(7, "(until)", _until_)                                                                       \
    X(7, "(while)", _while_)                                                                       \
    X(8, "(while0)", _while_zero_)                                                                 \
    X(11, "[#compiled]", _num_compiled_)                                                           \
    X(14, "[compile-init]", _compile_init_)                                                        \
    X(13, "[compile-2s,]", _compile2s_)                                                            \
    X(13, "[compile-4s,]", _compile4s_)                                                            \
    X(13, "[compile-8s,]", _compile8s_)                                                            \
    X(14, "[compile-lit,]", _compile_lit_)                                                         \
    X(25, "[compile-unresolved-jump]", _compile_unresolved_jump_)                                  \
    X(6, "[word]", _word_)                                                                         \
    X(2, "-1", minus_one)                                                                          \
    X(1, "0", zero)                                                                                \
    X(1, "1", one)                                                                                 \
    X(1, "2", two)                                                                                 \
    X(1, "3", three)                                                                               \
    X(1, "4", four)                                                                                \
    X(1, "8", eight)

#define DICT_WORDS_M4TH_IMPL(X)                                                                    \
    DICT_TOKENS_M4TH_IMPL(X)                                                                       \
    X(14, "(eval-err-eof)", _eval_err_eof_)                                                        \
    X(19, "(eval-err-notfound)", _eval_err_notfound_)                                              \
    X(13, "(eval-number)", _eval_number_)                                                          \
    X(11, "(eval-word)", _eval_word_)                                                              \
    X(23, "[any-token-gives-cell?]", _any_token_gives_cell_q_)                                     \
    X(8, "[inline]", _inline_)      /* ( w -- ) inline a call to w into word being compiled */     \
    X(10, "[optimize]", _optimize_) /* optimize word being compiled  */                            \
    X(22, "[resolve-begin-repeat]", _resolve_begin_repeat_) /* common back-end of 'begin..' */     \
    X(19, "[resolve-jump-here]", _resolve_jump_here_) /* common back-end of 'else' and 'then' */   \
    X(14, "[resolve-loop]", _resolve_loop_)           /* common back-end of 'loop' and '+loop' */  \
    X(19, "[token-gives-cell?]", _token_gives_cell_q_)                                             \
    X(9, "char>base", char_to_base) /* convert '#' to 10, '$' to 16, '%' to 2, else 0 */           \
    X(6, "char>u", char_to_u) /* convert numeric digit from char to unsigned number, else -1 */    \
    /* ( caddr n -- caddr' n' base ) convert prefix # $ % to base, else fetch current base */      \
    X(11, "string>base", string_to_base)                                                           \
    /* ( caddr n -- caddr' n' ch ) convert "'x'" to 'x' for any char x, else -1 */                 \
    X(11, "string>char", string_to_char)                                                           \
    X(11, "string>sign", string_to_sign) /* ( caddr n -- caddr' n' sign ) parse initial '-' */     \
    /* ( caddr n base -- caddr' n' u ) convert string from base to unsigned number */              \
    X(13, "string&base>u", string_base_to_u)

/* ------- m4th-* ------------------------------------------------------------------------------- */
#define DICT_WORDS_M4TH(X) /* contains all DICT_WORDS_M4TH_* */                                    \
    DICT_WORDS_M4TH_USER(X) DICT_WORDS_M4TH_C(X) DICT_WORDS_M4TH_CORE(X) DICT_WORDS_M4TH_IMPL(X)

#define DICT_TOKENS_M4TH(X) /* contains all DICT_TOKENS_M4TH_* */                                  \
    DICT_TOKENS_M4TH_USER(X) DICT_TOKENS_M4TH_C(X) DICT_TOKENS_M4TH_CORE(X) DICT_TOKENS_M4TH_IMPL(X)

#endif /* M4TH_INCLUDE_DICT_M4TH_MH */
