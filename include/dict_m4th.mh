/**
 * Copyright (C) 2020 Massimiliano Ghilardi
 *
 * This file is part of m4th.
 *
 * m4th is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * m4th is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with m4th.  If not, see <https://www.gnu.org/licenses/>.
 */

#ifndef M4TH_INCLUDE_DICT_M4TH_MH
#define M4TH_INCLUDE_DICT_M4TH_MH

/* ------- m4th-user ---------------------------------------------------------------------------- */
#define DICT_TOKENS_M4TH_USER(X)                                                                   \
    X(2, "<=", less_equal)                                                                         \
    X(2, ">=", more_equal)                                                                         \
    X(3, "0<=", zero_less_equal)                                                                   \
    X(3, "0>=", zero_more_equal)                                                                   \
    X(2, "2+", two_plus)                                                                           \
    X(2, "2-", two_minus)                                                                          \
    X(4, "2sm/", two_sm_div) /* symmetric divide by 2 */                                           \
    X(2, "4*", four_times)                                                                         \
    X(2, "4+", four_plus)                                                                          \
    X(2, "4-", four_minus)                                                                         \
    X(2, "4/", four_div)      /* floored divide by 4 */                                            \
    X(4, "4sm/", four_sm_div) /* symmetric divide by 4 */                                          \
    X(2, "8*", eight_times)                                                                        \
    X(2, "8+", eight_plus)                                                                         \
    X(2, "8-", eight_minus)                                                                        \
    X(2, "8/", eight_div)             /* floored divide by 4 */                                    \
    X(4, "8sm/", eight_sm_div)        /* symmetric divide by 8 */                                  \
    /*                             */ /*                                                */         \
    X(8, "2dup_2>r", two_dup_two_to_r)                                                             \
    X(4, "2nip", two_nip)                                                                          \
    X(5, "2pick", two_pick)                                                                        \
    X(8, "2r>2drop", two_r_from_two_drop)                                                          \
    X(5, "2roll", two_roll)                                                                        \
    X(6, "-2roll", minus_two_roll)                                                                 \
    X(5, "-2rot", minus_two_rot) /*             ( a b c d e f -- e f a b c d )                  */ \
    X(8, "atomic+!", atomic_plus_store)      /* ( n addr -- n' ) atomically increment cell by n */ \
    X(9, "atomic1+!", atomic_one_plus_store) /* ( addr   -- n' ) atomically increment cell by 1 */ \
    X(6, "bounds", bounds) /* ( c-addr u -- c-addr+u c-addr ) get string bounds        */          \
    /* ( src dst u -- src+u dst+u ) forward copy u bytes, */                                       \
    /*  and post-increment addresses after copying each byte  */                                   \
    X(11, "cmove/count", cmove_count)                                                              \
    /* ( src dst u -- src-u dst-u ) backward copy u bytes, */                                      \
    /*  and pre-decrement addresses before copying each byte  */                                   \
    X(12, "-cmove/count", minus_cmove_count)                                                       \
    X(8, "crc-cell", crc_cell)          /* ( x -- crc32 ) compute CRC32c of a cell              */ \
    X(10, "crc-string", crc_string)     /* ( c-addr u -- crc32 ) compute CRC32c of a string     */ \
    X(10, "do-i+-loop", do_i_plus_loop) /* do i + loop                                          */ \
    X(3, "dp0", dp0)        /* ( x --- x addr-of-x ) get address of data stack bottom           */ \
    X(5, "dup>r", dup_to_r) /* ( x -- ) (R: -- x )               equivalent to: dup >r          */ \
    X(11, "ex-message!", ex_message_store) /* ( c-addr u --    ) store exception message string */ \
    X(11, "ex-message@", ex_message_fetch) /* (    -- c-addr u ) fetch exception message string */ \
    X(4, "flip", flip)                     /* ( a b c -- c b a ) equivalent to: swap rot        */ \
    X(3, "hop", hop)                       /* ( a b c -- a b c a )  equivalent to: 2 pick */       \
    X(2, "i*", i_times)                    /* equivalent to: i *         */                        \
    X(2, "i+", i_plus)                     /* equivalent to: i +         */                        \
    X(2, "i-", i_minus)                    /* equivalent to: i -         */                        \
    X(2, "i'", i_prime)                                                                            \
    /* ( c-addr u ch -- u' ) get position of given char or CR/LF in string  */                     \
    X(14, "line-find-char", line_find_char)                                                        \
    X(4, "noop", noop)                   /* ( -- ) do nothing                               */     \
    X(6, "n>drop", n_to_drop)            /* ( xn .. x1 n -- ) drop n cells                  */     \
    X(2, "r!", r_store)                  /* ( a -- ) (R: b -- a   )                         */     \
    X(3, "r+!", r_plus_store)            /* ( a -- ) (R: b -- a+b )                         */     \
    X(6, "r>drop", r_from_drop)          /* (R: x -- ) equivalent to: r> drop               */     \
    X(6, "rdepth", rdepth)               /* ( -- n ) get return stack depth                 */     \
    X(5, "-roll", minus_roll)            /* rotate in opposite direction than 'roll'        */     \
    X(4, "-rot", minus_rot)              /* equivalent to: rot rot                          */     \
    X(7, "squared", squared)             /* equivalent to: dup *                            */     \
    X(7, "string=", string_equal)        /* ( addr1 addr2 u -- addr1 addr2 u t|f )          */     \
    X(10, "string-ci=", string_ci_equal) /* ( addr1 addr2 u -- addr1 addr2 u t|f )          */     \
    X(17, "string-find-blank", string_find_blank) /* ( c-addr u -- u' )                     */     \
    X(16, "string-find-char", string_find_char)   /* ( c-addr u -- u' )                     */     \
    X(20, "string-find-nonblank", string_find_nonblank) /* ( c-addr u -- u' )               */     \
    X(12, "string>lower", string_to_lower) /* ( c-addr-src c-addr-dst u -- c-addr-dst u )   */     \
    X(3, "sub", sub)                       /* equivalent to: swap -                         */     \
    X(5, "trail", trail)                   /* equivalent to: over swap                      */     \
    /*                              */     /*                                               */     \
    X(5, ">byte", to_byte)                                                                         \
    X(5, ">char", to_char)                                                                         \
    X(6, ">short", to_short)                                                                       \
    X(7, ">ushort", to_ushort)                                                                     \
    X(4, ">int", to_int)                                                                           \
    X(5, ">uint", to_uint)                                                                         \
    /*                              */ /*                                               */         \
    X(5, "byte@", byte_fetch)                                                                      \
    X(7, "byte[1]", byte_fetch_1)                                                                  \
    X(7, "byte[2]", byte_fetch_2)                                                                  \
    X(7, "byte[3]", byte_fetch_3)                                                                  \
    X(7, "byte[4]", byte_fetch_4)                                                                  \
    X(7, "byte[5]", byte_fetch_5)                                                                  \
    X(7, "byte[6]", byte_fetch_6)                                                                  \
    X(7, "byte[7]", byte_fetch_7)                                                                  \
    X(7, "byte[8]", byte_fetch_8)                                                                  \
    /*                              */ /*                                               */         \
    /* X(5, "char@", char_fetch)    */ /* alias of: c@                                  */         \
    X(7, "char[1]", char_fetch_1)                                                                  \
    X(7, "char[2]", char_fetch_2)                                                                  \
    X(7, "char[3]", char_fetch_3)                                                                  \
    X(7, "char[4]", char_fetch_4)                                                                  \
    X(7, "char[5]", char_fetch_5)                                                                  \
    X(7, "char[6]", char_fetch_6)                                                                  \
    X(7, "char[7]", char_fetch_7)                                                                  \
    X(7, "char[8]", char_fetch_8)                                                                  \
    /*                              */ /*                                               */         \
    X(6, "short@", short_fetch)                                                                    \
    X(8, "short[1]", short_fetch_1)                                                                \
    X(8, "short[2]", short_fetch_2)                                                                \
    X(8, "short[3]", short_fetch_3)                                                                \
    X(8, "short[4]", short_fetch_4)                                                                \
    X(8, "short[5]", short_fetch_5)                                                                \
    X(8, "short[6]", short_fetch_6)                                                                \
    X(8, "short[7]", short_fetch_7)                                                                \
    X(8, "short[8]", short_fetch_8)                                                                \
    /*                              */ /*                                               */         \
    X(7, "ushort@", ushort_fetch)                                                                  \
    X(9, "ushort[1]", ushort_fetch_1)                                                              \
    X(9, "ushort[2]", ushort_fetch_2)                                                              \
    X(9, "ushort[3]", ushort_fetch_3)                                                              \
    X(9, "ushort[4]", ushort_fetch_4)                                                              \
    X(9, "ushort[5]", ushort_fetch_5)                                                              \
    X(9, "ushort[6]", ushort_fetch_6)                                                              \
    X(9, "ushort[7]", ushort_fetch_7)                                                              \
    X(9, "ushort[8]", ushort_fetch_8)                                                              \
    /*                              */ /*                                               */         \
    X(4, "int@", int_fetch)                                                                        \
    X(6, "int[1]", int_fetch_1)                                                                    \
    X(6, "int[2]", int_fetch_2)                                                                    \
    X(6, "int[3]", int_fetch_3)                                                                    \
    X(6, "int[4]", int_fetch_4)                                                                    \
    X(6, "int[5]", int_fetch_5)                                                                    \
    X(6, "int[6]", int_fetch_6)                                                                    \
    X(6, "int[7]", int_fetch_7)                                                                    \
    X(6, "int[8]", int_fetch_8)                                                                    \
    /*                              */ /*                                               */         \
    X(5, "uint@", uint_fetch)                                                                      \
    X(7, "uint[1]", uint_fetch_1)                                                                  \
    X(7, "uint[2]", uint_fetch_2)                                                                  \
    X(7, "uint[3]", uint_fetch_3)                                                                  \
    X(7, "uint[4]", uint_fetch_4)                                                                  \
    X(7, "uint[5]", uint_fetch_5)                                                                  \
    X(7, "uint[6]", uint_fetch_6)                                                                  \
    X(7, "uint[7]", uint_fetch_7)                                                                  \
    X(7, "uint[8]", uint_fetch_8)                                                                  \
    /*                              */ /*                                               */         \
    /* X(5, "cell@", cell_fetch)    */ /* alias of: @                                   */         \
    X(7, "cell[1]", cell_fetch_1)                                                                  \
    X(7, "cell[2]", cell_fetch_2)                                                                  \
    X(7, "cell[3]", cell_fetch_3)                                                                  \
    X(7, "cell[4]", cell_fetch_4)                                                                  \
    X(7, "cell[5]", cell_fetch_5)                                                                  \
    X(7, "cell[6]", cell_fetch_6)                                                                  \
    X(7, "cell[7]", cell_fetch_7)                                                                  \
    X(7, "cell[8]", cell_fetch_8)                                                                  \
    /*                              */ /*                                               */         \
    X(6, "short!", short_store)                                                                    \
    X(4, "int!", int_store)                                                                        \
    X(6, "short,", short_comma)                                                                    \
    X(4, "int,", int_comma)                                                                        \
    X(14, "countedstring,", countedstring_comma) /* ( c-addr u -- )                    */          \
    X(11, "short-align", short_align)                                                              \
    X(9, "int-align", int_align)                                                                   \
    X(13, "short-aligned", short_aligned)                                                          \
    X(11, "int-aligned", int_aligned)                                                              \
    /*                             */ /*                                                */         \
    X(3, "u<=", u_less_equal)                                                                      \
    X(3, "u>=", u_more_equal)

#define DICT_WORDS_M4TH_USER(X)                                                                    \
    DICT_TOKENS_M4TH_USER(X)                                                                       \
    X(5, "/byte", div_byte)           /* alias of noop                                  */         \
    X(5, "/char", div_char)           /* alias of noop                                  */         \
    X(6, "/short", div_short)         /* alias of 2/                                    */         \
    X(7, "/ushort", div_ushort)       /* alias of 2/                                    */         \
    X(4, "/int", div_int)             /* alias of 4/                                    */         \
    X(5, "/uint", div_uint)           /* alias of 4/                                    */         \
    X(5, "/cell", div_cell)           /* alias of SZ/                                   */         \
    /*                             */ /*                                                */         \
    X(5, "char@", char_fetch)         /* alias of c@                                    */         \
    X(5, "cell@", cell_fetch)         /* alias of @                                     */         \
    X(5, "byte!", byte_store)         /* alias of c!                                    */         \
    X(5, "char!", char_store)         /* alias of c!                                    */         \
    X(7, "ushort!", ushort_store)     /* alias of short!                                */         \
    X(5, "uint!", uint_store)         /* alias of int!                                  */         \
    /*X(5, "cell!", cell_store)    */ /* alias of !                                     */         \
    /*                             */ /*                                                */         \
    X(5, "1byte", one_byte)           /* alias of 1 i.e. sizeof(byte)                   */         \
    X(5, "1char", one_char)           /* alias of 1 i.e. sizeof(char)                   */         \
    X(6, "1short", one_short)         /* alias of 2 i.e. sizeof(short)                  */         \
    X(7, "1ushort", one_ushort)       /* alias of 2 i.e. sizeof(ushort)                 */         \
    X(4, "1int", one_int)             /* alias of 4 i.e. sizeof(int)                    */         \
    X(5, "1uint", one_uint)           /* alias of 4 i.e. sizeof(uint)                   */         \
    X(5, "1cell", one_cell)           /* alias of SZ i.e. sizeof(cell)                  */         \
    /*                             */ /*                                                */         \
    X(5, "byte+", byte_plus)          /* alias of 1+                                    */         \
    /* X(5, "char+", char_plus)    */ /* already in forth 'core' word set               */         \
    X(6, "short+", short_plus)        /* alias of 2+                                    */         \
    X(7, "ushort+", ushort_plus)      /* alias of 2+                                    */         \
    X(4, "int+", int_plus)            /* alias of 4+                                    */         \
    X(5, "uint+", uint_plus)          /* alias of 4+                                    */         \
    /*X(5, "cell+", cell_plus)     */ /* already in forth 'core' word set               */         \
    /*                             */ /*                                                */         \
    X(5, "bytes", bytes)              /*                                                */         \
    /* X(5, "chars", chars) */        /* already in forth 'core' word set               */         \
    X(6, "shorts", shorts)            /* alias of 2*                                    */         \
    X(7, "ushorts", ushorts)          /* alias of 2*                                    */         \
    X(4, "ints", ints)                /* alias of 4*                                    */         \
    X(5, "uints", uints)              /* alias of 4*                                    */         \
    /*X(5, "cells", cells)         */ /* already in forth 'core' word set               */         \
    /*                             */ /*                                                */         \
    X(5, "break", break)              /* TODO jump after 'loop', 'repeat'...            */         \
    X(8, "continue", continue)        /* TODO jump to 'loop', 'repeat'...               */         \
    X(10, "clearstack", clearstack)   /* ( ... -- ) clear data stack                    */         \
    X(7, "cs-drop", cs_drop)          /* ( sys -- )                                     */         \
    X(6, "cs-dup", cs_dup)            /* ( sys -- sys sys )                             */         \
    X(8, "-cs-roll", minus_cs_roll)   /* ( ... cs-depth -- ... )                        */         \
    X(7, "cs-swap", cs_swap)          /* ( a_sys b_sys -- b_sys a_sys )                 */         \
    X(11, "disassemble", disassemble) /* read name, find nt then show its disassembly   */         \
    X(16, "disassemble-name", disassemble_name) /* ( nt -- ) show disassembly of word   */         \
    /* ( ntu ... nt2 nt1 u -- ) show disassembly of N words */                                     \
    X(17, "disassemble-names", disassemble_names)                                                  \
    /*                          read name, find nt, show disassembly of all nt up to it */         \
    X(16, "disassemble-upto", disassemble_upto)                                                    \
    X(9, "ex>string", ex_to_string) /* ( ex -- c-addr u ) get exception name            */         \
    X(10, "forth-root", forth_root) /* set first wordlist in searchorder to forth-root  */         \
    X(17, "hashmap-find/cell", hashmap_find_cell) /* ( map key -- key' &val|0 ) find key in map */ \
    X(16, "hashmap-find/int", hashmap_find_int)   /* ( map key -- key' &val|0 ) find key in map */ \
    X(9, "interpret", interpret)      /* one iteration of forth interpret/compile loop  */         \
    X(6, "m4th-c", m4th_c)            /* set first wordlist in searchorder to m4th-c    */         \
    X(9, "m4th-core", m4th_core)      /* set first wordlist in searchorder to m4th-core */         \
    X(9, "m4th-impl", m4th_impl)      /* set first wordlist in searchorder to m4th-impl */         \
    X(11, "parse-quote", parse_quote) /* ( -- c-addr u ) read a string ended by quote   */         \
    X(4, "repl", repl)                /* call INTERPRET repeatedly until EOF or input error     */ \
    X(5, "r2nd@", r2nd_fetch)   /* alias of '2r@ drop' i.e. fetch second item from return stack */ \
    X(8, "see-name", see_name)  /* ( nt -- ) show definition of nt                       */        \
    X(8, "string<>", string_ne) /* ( addr1 addr2 u -- addr1 addr2 u t|f )                */        \
    X(11, "string-ci<>", string_ci_ne) /* ( addr1 addr2 u -- addr1 addr2 u t|f )         */        \
    /* ( caddr n -- caddr' n' x t|f ) convert string to number, recognizing base & sign  */        \
    X(13, "string>number", string_to_number)                                                       \
    /*         ( ex|0 -- ) write cr exception and ex-message@ to current output          */        \
    X(14, "type-exception", type_exception)                                                        \
    X(11, "valid-base?", valid_base_q) /* ( base -- t|f ) true if 2 <= base <= 36        */        \
    /* get all words in wordlist up to nt1. newer words are placed toward stack top */             \
    X(18, "wordlist-upto-name", wordlist_upto_name) /* ( wid nt1 -- 0 | ntu ... nt2 nt1 u ) */

/* ------- m4th-c ------------------------------------------------------------------------------- */
#define DICT_TOKENS_M4TH_C(X)                                                                      \
    X(9, "(c-arg-0)", _c_arg_0_) /* prepare 0 args for C function call    */                       \
    X(9, "(c-arg-1)", _c_arg_1_) /* prepare 1 arg  for C function call    */                       \
    X(9, "(c-arg-2)", _c_arg_2_) /* prepare 2 args for C function call    */                       \
    X(9, "(c-arg-3)", _c_arg_3_) /* prepare 3 args for C function call    */                       \
    X(9, "(c-arg-4)", _c_arg_4_) /* prepare 4 args for C function call    */                       \
    X(9, "(c-arg-5)", _c_arg_5_) /* prepare 5 args for C function call    */                       \
    X(9, "(c-arg-6)", _c_arg_6_) /* prepare 6 args for C function call    */                       \
    X(8, "(c-call)", _c_call_)   /* must be followed by C function address. calls it. */           \
    X(9, "(c-ret-0)", _c_ret_0_) /* push 0 values returned by C function call */                   \
    X(9, "(c-ret-1)", _c_ret_1_) /* push 1 value  returned by C function call */                   \
    X(9, "(c-ret-2)", _c_ret_2_) /* push 2 values returned by C function call */

#define DICT_WORDS_M4TH_C(X)                                                                       \
    DICT_TOKENS_M4TH_C(X)                                                                          \
    X(7, "c-fread", c_fread) /* ( FILE* c-addr u -- u' err ) call C function fread()  */           \
    X(15, "c-fwrite+fflush", c_fwrite_fflush) /* ( FILE* c-addr u -- u' err ) fwrite()+fflush() */ \
    X(11, "c-linenoise", c_linenoise)         /* ( prompt c-addr u -- u' err ) call C linenoise() */

/* ------- m4th-core ---------------------------------------------------------------------------- */
#define DICT_TOKENS_M4TH_CORE(X)                                                                   \
    X(12, "count-tokens", count_tokens) /* ( counted-tokens -- tok-addr u ) */                     \
    X(21, "flags>consumed-tokens", flags_to_consumed_tokens) /* ( flags -- u ) # consumed tokens*/ \
    X(7, "in>ibuf", in_to_ibuf)     /* (    -- io       ) get current input as iobuf     */        \
    X(10, "iobuf>addr", iobuf_addr) /* ( io -- c-addr   ) get start of iobuf data buffer */        \
    /* ( io -- c-addr u ) get iobuf entire content i.e. from 0 to iobuf>end */                     \
    X(14, "iobuf>all-data", iobuf_all_data)                                                        \
    /* ( io -- c-addr u ) get iobuf content i.e. from iobuf>pos to iobuf>end */                    \
    X(10, "iobuf>data", iobuf_data)                                                                \
    /* ( io -- u ) get iobuf content length i.e. the distance iobuf>end - iobuf>pos */             \
    X(12, "iobuf>data>n", iobuf_data_n)                                                            \
    /* ( io -- c-addr u ) get iobuf free space i.e. from iobuf>end to iobuf>max */                 \
    X(15, "iobuf>free-data", iobuf_free_data)                                                      \
    X(12, "iobuf-empty?", iobuf_empty_query) /* ( io -- t|f ) true if iobuf is currently empty */  \
    X(9, "iobuf>err", iobuf_err)         /* ( io -- addr ) get address of iobuf err          */    \
    X(10, "iobuf>func", iobuf_func)      /* ( io -- addr ) get address of iobuf I/O function */    \
    X(12, "iobuf>handle", iobuf_handle)  /* ( io -- addr ) get address of iobuf handle       */    \
    X(9, "iobuf>max", iobuf_max)         /* ( io -- u    ) get iobuf max size i.e. capacity  */    \
    X(9, "iobuf>pos", iobuf_pos)         /* ( io -- addr ) get address of iobuf position     */    \
    X(9, "iobuf>end", iobuf_end)         /* ( io -- addr ) get address of iobuf end position */    \
    X(6, "latest", latest)               /* (    -- nt   ) get last defined word             */    \
    X(9, "to-latest", to_latest)         /* ( nt --      ) set last defined word            */     \
    X(5, "name,", name_comma)            /* ( c-addr u -- nt ) create a new name             */    \
    X(9, "name>code", name_to_code)      /* ( nt  -- taddr n ) get code array from name      */    \
    X(11, "name>code>n", name_to_code_n) /* ( nt -- u        ) get code size from name       */    \
    X(9, "name>data", name_to_data)      /* ( nt -- addr u   ) get data of name              */    \
    X(10, "name>flags", name_to_flags)   /* ( nt -- m4flags  ) get m4flags of name           */    \
    X(11, "name>flags!", name_to_flags_store) /* ( m4flags nt -- ) set m4flags of name       */    \
    X(10, "name>ident", name_to_ident) /* ( nt -- addr n  ) convert name to asm/C identifier */    \
    /* name>string is already defined by forth 'tools ext' wordset */                              \
    X(9, "name>prev", name_to_prev) /* ( nt -- nt'|0   ) get previous word in wordlist       */    \
    X(7, "name>xt", name_to_xt)     /* ( nt -- XT      ) get XT == code address from name    */    \
    X(15, "obuf-write-char", obuf_write_char) /* ( io c -- err  ) write one char to iobuf    */    \
    /* ( io c-addr u -- err  ) write string to iobuf */                                            \
    X(17, "obuf-write-string", obuf_write_string)                                                  \
    X(8, "out>obuf", out_to_obuf) /*  (   -- io   ) get current output as iobuf                */  \
    X(17, "searchorder-clear", searchorder_clear) /* (S: wid_u-1 .. wid_0 -- )                 */  \
    X(17, "searchorder-depth", searchorder_depth) /* (S: wid_u-1 .. wid_0 -- same ) ( -- u )   */  \
    X(16, "searchorder-drop", searchorder_drop)   /* (S: wid -- )                              */  \
    X(15, "searchorder-dup", searchorder_dup)     /* (S: wid -- wid wid )                      */  \
    X(16, "searchorder-pick", searchorder_pick)   /* (S: wid_u .. wid_0 -- same ) ( -- wid_u ) */  \
    X(15, "searchorder[0]!", searchorder_store_0) /* ( wid -- ) overwrite searchorder 0-th elem */ \
    X(10, "token>name", token_to_name)            /* ( token -- nt|0 ) convert token to name */    \
    X(8, "user-var", user_var) /*        ( -- addr ) must be followed by index of user variable */ \
    X(17, "wordlist-add-name", wordlist_add_name) /*   ( nt wid -- ) add name to wordlist       */ \
    X(18, "wordlist-last-name", wordlist_last_name) /* ( wid -- nt ) get last name in wordlist  */ \
    X(14, "wordlist-reset", wordlist_reset) /* ( wid -- ) remove all user-defined names from wid*/ \
    X(15, "wordlist>string", wordlist_to_string) /* ( wid -- c-addr u ) convert wid to string   */ \
    X(7, "xt>name", xt_to_name) /*                  ( XT  -- nt ) convert XT to name            */

#define DICT_WORDS_M4TH_CORE(X)                                                                    \
    DICT_TOKENS_M4TH_CORE(X)                                                                       \
    /* ( handle c-addr u -- 0 M4ERR_UNEXPECTED_EOF ) always return EOF. usable for iobuf>func */   \
    X(10, "always-eof", always_eof)                                                                \
    /* compile-string, ( c-addr u -- ) runtime effect: ( -- c-addr' u ) */                         \
    X(15, "compile-string,", compile_string_comma)                                                 \
    X(14, "countedtokens,", countedtokens_comma) /* ( counted-tokens -- ) */                       \
    /*   ( io ch -- c-addr u ) get string before ch in iobuf (no refilling) */                     \
    X(14, "ibuf-find-char", ibuf_find_char)                                                        \
    /*   ( io -- c-addr u ) find non-blank string in iobuf (no refilling) */                       \
    X(19, "ibuf-find-nonblanks", ibuf_find_nonblanks)                                              \
    X(11, "ibuf-refill", ibuf_refill) /*   ( io -- err  ) read some data into iobuf   */           \
    X(20, "ibuf-refill-if-empty", ibuf_refill_if_empty) /* ( io -- err ) */                        \
    X(16, "ibuf-skip-1blank", ibuf_skip_1blank)         /* ( io --     ) */                        \
    X(16, "ibuf-skip-blanks", ibuf_skip_blanks)         /* ( io -- ) skip consecutive blanks */    \
    X(12, "name-inline?", name_inline_query) /* ( nt -- flag ) calls to name should be inlined? */ \
    X(10, "obuf-flush", obuf_flush)          /* ( io -- err  ) flush iobuf data                 */ \
    /* ( io c -- err  ) flush iobuf, then write one char to it */                                  \
    X(23, "(obuf-flush-write-char)", _obuf_flush_write_char_)                                      \
    /* ( io c-addr u -- err  ) flush iobuf, then write string to it */                             \
    X(25, "(obuf-flush-write-string)", _obuf_flush_write_string_)                                  \
    /* ( io c-addr u -- c-addr' u' err  ) send string to iobuf I/O func, ignoring current data. */ \
    /* return string still to write - non-empty only on I/O error                               */ \
    X(15, "(obuf-overflow)", _obuf_overflow_)                                                      \
    /* parse-nt ( nt wid -1|1 ) throws if name not found. 1 if name is immediate, else -1 */       \
    X(8, "parse-nt", parse_nt)                                                                     \
    /* parse-xt ( xt -1|1 ) throws if name not found. 1 if name is immediate, else -1 */           \
    X(8, "parse-xt", parse_xt)                                                                     \
    /* find name in search order. 1 if name is immediate, else -1      */                          \
    X(11, "string>name", string_to_name)  /* ( c-addr u -- nt|0 wid|0 -1|0|1 )            */       \
    X(6, "/token", div_token)             /* alias of _SZt_div,      no dedicated m4token */       \
    X(6, ">token", to_token)              /* alias of to_SZtu,       no dedicated m4token */       \
    X(6, "token!", token_store)           /* alias of _SZtu_store,   no dedicated m4token */       \
    X(6, "token@", token_fetch)           /* alias of _SZtu_fetch,   no dedicated m4token */       \
    X(8, "token[1]", token_fetch_1)       /* alias of _SZtu_fetch_1, no dedicated m4token */       \
    X(8, "token[2]", token_fetch_2)       /* alias of _SZtu_fetch_2, no dedicated m4token */       \
    X(8, "token[3]", token_fetch_3)       /* alias of _SZtu_fetch_3, no dedicated m4token */       \
    X(8, "token[4]", token_fetch_4)       /* alias of _SZtu_fetch_4, no dedicated m4token */       \
    X(8, "token[5]", token_fetch_5)       /* alias of _SZtu_fetch_5, no dedicated m4token */       \
    X(8, "token[6]", token_fetch_6)       /* alias of _SZtu_fetch_6, no dedicated m4token */       \
    X(8, "token[7]", token_fetch_7)       /* alias of _SZtu_fetch_7, no dedicated m4token */       \
    X(8, "token[8]", token_fetch_8)       /* alias of _SZtu_fetch_8, no dedicated m4token */       \
    X(6, "1token", one_token)             /* alias of _SZt,          no dedicated m4token */       \
    X(6, "token+", token_plus)            /* alias of _SZt_plus,     no dedicated m4token */       \
    X(6, "tokens", tokens)                /* alias of _SZt_times,    no dedicated m4token */       \
    X(6, "token,", token_comma)           /* ( token      -- )       compile one token    */       \
    X(7, "tokens,", tokens_comma)         /* ( tok-addr u -- )       compile u tokens     */       \
    X(11, "token-align", token_align)     /* alias of _SZt_align,    no dedicated m4token */       \
    X(13, "token-aligned", token_aligned) /* alias of _SZt_aligned,  no dedicated m4token */       \
    X(13, "wordlist-find", wordlist_find) /* ( c-addr u wid -- nt|0 -1|0|1 ) search in wordlist */

/* ------- m4th-impl ---------------------------------------------------------------------------- */
#define DICT_TOKENS_M4TH_IMPL(X)                                                                   \
    X(7, "(+loop)", _plus_loop_)                                                                   \
    X(5, "(?do)", _q_do_)                                                                          \
    X(5, "(?if)", _q_if_)                                                                          \
    X(6, "(?if0)", _q_if0_)                                                                        \
    X(8, "(?until)", _q_until_)                                                                    \
    X(9, "(?until0)", _q_until0_)                                                                  \
    X(8, "(?while)", _q_while_)                                                                    \
    X(9, "(?while0)", _q_while0_)                                                                  \
    X(7, "(again)", _again_)                                                                       \
    X(7, "(break)", _break_)                                                                       \
    X(13, "(call-native)", _call_native_)                                                          \
    X(9, "(call-xt)", _call_xt_)                                                                   \
    X(11, "(catch-beg)", _catch_beg_)                                                              \
    X(11, "(catch-end)", _catch_end_)                                                              \
    X(15, "(check-lit-tok)", _check_lit_tok_) /* ( x -- x ) followed by expected x: a token */     \
    X(10, "(continue)", _continue_)                                                                \
    X(4, "(do)", _do_)                                                                             \
    X(11, "(does-exit)", _does_exit_) /* alias of exit. used immediately after (does) */           \
    X(6, "(else)", _else_)                                                                         \
    X(12, "(exec-token)", _exec_token_)                                                            \
    X(21, "(exec-xt-from-native)", _exec_xt_from_native_)                                          \
    X(4, "(if)", _if_)                                                                             \
    X(5, "(if0)", _if0_)                                                                           \
    X(4, "(ip)", _ip_)                                                                             \
    X(9, "(ip>data)", _ip_to_data_)                                                                \
    X(14, "(ip>data>addr)", _ip_to_data_addr_)                                                     \
    X(7, "(leave)", _leave_)                                                                       \
    X(6, "(lit,)", _lit_comma_)                                                                    \
    X(8, "(lit-2s)", _lit2s_)                                                                      \
    X(8, "(lit-4s)", _lit4s_)                                                                      \
    X(8, "(lit-8s)", _lit8s_)                                                                      \
    X(12, "(lit-string)", _lit_string_)                                                            \
    X(9, "(lit-tok)", _lit_tok_)                                                                   \
    X(8, "(lit-xt)", _lit_xt_)                                                                     \
    X(9, "(local-0)", _local_0_) /* get 0-th local variable */                                     \
    X(9, "(local-1)", _local_1_) /* get 1-st local variable */                                     \
    X(9, "(local-2)", _local_2_) /* get 2-nd local variable */                                     \
    X(9, "(local-3)", _local_3_) /* get 3-rd local variable */                                     \
    X(9, "(local-4)", _local_4_) /* get 4-th local variable */                                     \
    X(9, "(local-5)", _local_5_) /* get 5-th local variable */                                     \
    X(9, "(local-6)", _local_6_) /* get 6-th local variable */                                     \
    X(9, "(local-7)", _local_7_) /* get 7-th local variable */                                     \
    X(9, "(local-8)", _local_8_) /* get 8-th local variable */                                     \
    X(9, "(local-9)", _local_9_) /* get 9-th local variable */                                     \
    X(9, "(local-a)", _local_a_) /* get 10-th local variable */                                    \
    X(9, "(local-b)", _local_b_) /* get 11-th local variable */                                    \
    X(9, "(local-c)", _local_c_) /* get 12-th local variable */                                    \
    X(9, "(local-d)", _local_d_) /* get 13-th local variable */                                    \
    X(9, "(local-e)", _local_e_) /* get 14-th local variable */                                    \
    X(9, "(local-f)", _local_f_) /* get 15-th local variable */                                    \
    X(9, "(local-n)", _local_n_) /* followed by N. get N-th local variable */                      \
    /* followed by T(n), reserve space for n local variables */                                    \
    X(13, "(local-alloc)", _local_alloc_)                                                          \
    X(12, "(local-free)", _local_free_) /* release space for last reserved local variables */      \
    X(6, "(loop)", _loop_)                                                                         \
    X(9, "(missing)", _missing_)                                                                   \
    X(8, "(repeat)", _repeat_)                                                                     \
    X(18, "(return-to-native)", _return_to_native_)                                                \
    X(12, "(to-local-0)", _to_local_0_) /* set 0-th local variable */                              \
    X(12, "(to-local-1)", _to_local_1_) /* set 1-st local variable */                              \
    X(12, "(to-local-2)", _to_local_2_) /* set 2-nd local variable */                              \
    X(12, "(to-local-3)", _to_local_3_) /* set 3-rd local variable */                              \
    X(12, "(to-local-4)", _to_local_4_) /* set 4-th local variable */                              \
    X(12, "(to-local-5)", _to_local_5_) /* set 5-th local variable */                              \
    X(12, "(to-local-6)", _to_local_6_) /* set 6-th local variable */                              \
    X(12, "(to-local-7)", _to_local_7_) /* set 7-th local variable */                              \
    X(12, "(to-local-8)", _to_local_8_) /* set 8-th local variable */                              \
    X(12, "(to-local-9)", _to_local_9_) /* set 9-th local variable */                              \
    X(12, "(to-local-a)", _to_local_a_) /* set 10-th local variable */                             \
    X(12, "(to-local-b)", _to_local_b_) /* set 11-th local variable */                             \
    X(12, "(to-local-c)", _to_local_c_) /* set 12-th local variable */                             \
    X(12, "(to-local-d)", _to_local_d_) /* set 13-th local variable */                             \
    X(12, "(to-local-e)", _to_local_e_) /* set 14-th local variable */                             \
    X(12, "(to-local-f)", _to_local_f_) /* set 15-th local variable */                             \
    X(12, "(to-local-n)", _to_local_n_) /* followed by N. set N-th local variable */               \
    X(7, "(until)", _until_)                                                                       \
    X(8, "(until0)", _until0_)                                                                     \
    X(7, "(while)", _while_)                                                                       \
    X(8, "(while0)", _while0_)                                                                     \
    X(11, "[#compiled]", _num_compiled_)                                                           \
    /* ( token category -- sys ) compile an unresolved jump. */                                    \
    X(14, "[compile-jump]", _compile_jump_)                                                        \
    /* ( -- sys ) compile an unresolved jump. must be followed by jump token and its category */   \
    X(18, "[compile-jump-lit]", _compile_jump_lit_)                                                \
    X(13, "[cs-find-lit]", _cs_find_lit_) /* ( sys+ -- sys+ cs-depth ) followed by category */     \
    X(2, "-2", minus_two)                                                                          \
    X(2, "-1", minus_one)                                                                          \
    X(1, "0", zero)                                                                                \
    X(1, "1", one)                                                                                 \
    X(1, "2", two)                                                                                 \
    X(1, "3", three)                                                                               \
    X(1, "4", four)                                                                                \
    X(1, "5", five)                                                                                \
    X(1, "6", six)                                                                                 \
    X(1, "7", seven)                                                                               \
    X(1, "8", eight)

#define DICT_WORDS_M4TH_IMPL(X)                                                                    \
    DICT_TOKENS_M4TH_IMPL(X)                                                                       \
    X(13, "(abort-quote)", _abort_quote_)   /* ( x c-addr u ) runtime part of abort" */            \
    X(14, "(check-stacks)", _check_stacks_) /* throw on stack underflow              */            \
    /* ( m4flags -- sys ) read non-blanks string, create new word for it. set LATEST */            \
    X(8, "(create)", _create_)                                                                     \
    X(21, "(defer-uninitialized)", _defer_uninitialized_) /* throw M4ERR_DEFER_UNINITIALIZED */    \
    /* ( nt -1|1 -- ) interpret or compile name. dtop == -1 if name is immediate */                \
    X(6, "(does)", _does_) /* ( -- ) replace execution semantics of latest word */                 \
    X(11, "(eval-name)", _eval_name_)                                                              \
    X(13, "(eval-number)", _eval_number_) /* ( x -- ) interpret or compile number */               \
    /* ( vec pos -- key &val next ) fetch entry from hashmap/cell bucket index */                  \
    X(21, "(hashmap-entry@/cell)", _hashmap_entry_fetch_cell_)                                     \
    /* ( vec pos -- key &val next ) fetch entry from hashmap/int bucket index */                   \
    X(20, "(hashmap-entry@/int)", _hashmap_entry_fetch_int_)                                       \
    /* ( map key -- pos ) get bucket index for key in hashmap/cell */                              \
    X(22, "(hashmap-indexof/cell)", _hashmap_indexof_cell_)                                        \
    /* ( map key -- pos ) get bucket index for key in hashmap/int */                               \
    X(21, "(hashmap-indexof/int)", _hashmap_indexof_int_)                                          \
    /*  find an optimized sequence to replace an 'if' or 'else' being compiled. */                 \
    /* ( tok0|tok1<<16|tok2<<32 -- counted-tokens|0 ) */                                           \
    X(18, "(optimize-if-else)", _optimize_if_else_)                                                \
    /*  find an optimized sequence to replace a single token being compiled. */                    \
    X(17, "(optimize-1token)", _optimize_1token_) /* ( tok-addr -- counted-tokens|0 ) */           \
    /*  find an optimized sequence to replace 2 tokens being compiled. */                          \
    X(17, "(optimize-2token)", _optimize_2token_) /* ( tok-addr -- counted-tokens|0 ) */           \
    /*  find an optimized sequence to replace 3 tokens being compiled. */                          \
    X(17, "(optimize-3token)", _optimize_3token_) /* ( tok-addr -- counted-tokens|0 ) */           \
    /*  find an optimized sequence to replace 4 tokens being compiled. */                          \
    X(17, "(optimize-4token)", _optimize_4token_) /* ( tok-addr -- counted-tokens|0 ) */           \
    /*  find an optimized sequence to replace N tokens being compiled. */                          \
    X(17, "(optimize-tokens)", _optimize_tokens_) /* ( tok-addr u -- counted-tokens u' | 0 0 ) */  \
    /* copy and optimize at least one token from src to HERE. updates HERE src and u */            \
    X(18, "(optimize-tokens,)", _optimize_tokens_comma_) /* ( src u -- src' u' ) */                \
    /* copy and optimize exactly u tokens from XT+offset to HERE. updates HERE. */                 \
    X(14, "(optimize-xt,)", _optimize_xt_comma_) /* ( offset u -- ) */                             \
    /* find an optimized sequence to replace '[ x ] literal' */                                    \
    X(18, "(optimize-literal)", _optimize_literal_) /* ( x -- token t | x f ) */                   \
    X(15, "(repl-type-ack)", _repl_type_ack_)                                                      \
    X(8, "[finish]", _finish_)      /* ( sys -- ) finish compiling a word, make it findable   */   \
    X(8, "[inline]", _inline_)      /* ( nt -- ) inline a call to word into XT being compiled */   \
    X(10, "[optimize]", _optimize_) /* optimize current XT being compiled  */                      \
    /* optimize exactly HERE-XT tokens starting from XT. optimized tokens are initially written */ \
    /* to HERE and up, then copied back to XT and up. updates HERE. */                             \
    /* return t if something was optimized, else false */                                          \
    X(15, "[optimize-once]", _optimize_once_)     /* ( -- t|f ) */                                 \
    X(11, "[recompile]", _recompile_)             /* rebuild XT jump offsets after optimization */ \
    X(17, "[recompile-token]", _recompile_token_) /* recompile one token after optimization */     \
    X(22, "[resolve-begin-repeat]", _resolve_begin_repeat_) /* common back-end of 'begin..' */     \
    X(19, "[resolve-jump-here]", _resolve_jump_here_)       /* resolve a jump to here       */     \
    X(20, "[resolve-jump-there]", _resolve_jump_there_)     /* resolve a jump from here     */     \
    X(14, "[resolve-loop]", _resolve_loop_) /* common back-end of 'loop' and '+loop'        */     \
    X(23, "[throw-compile-only-xt]", _throw_compile_only_xt_)                                      \
    X(24, "[throw-if-not-compiling]", _throw_if_not_compiling_)                                    \
    X(8, "[until,]", _until_comma_) /* compile one of 'until' '(until)' '(until0)'    */           \
    X(9, "char>base", char_to_base) /* convert '#' to 10, '$' to 16, '%' to 2, else 0 */           \
    X(6, "char>u", char_to_u) /* convert numeric digit from char to unsigned number, else -1 */    \
    /* ( caddr n -- caddr' n' base ) convert prefix # $ % to base, else fetch current base */      \
    X(11, "string>base", string_to_base)                                                           \
    /* ( caddr n -- caddr' n' ch ) convert "'x'" to 'x' for any char x, else -1 */                 \
    X(11, "string>char", string_to_char)                                                           \
    X(11, "string>sign", string_to_sign) /* ( caddr n -- caddr' n' sign ) parse initial '-' */     \
    /* ( caddr n base -- caddr' n' u ) convert string from base to unsigned number */              \
    X(13, "string&base>u", string_base_to_u)

/* ------- m4th-* ------------------------------------------------------------------------------- */
#define DICT_WORDS_M4TH(X) /* contains all DICT_WORDS_M4TH_* */                                    \
    DICT_WORDS_M4TH_USER(X) DICT_WORDS_M4TH_C(X) DICT_WORDS_M4TH_CORE(X) DICT_WORDS_M4TH_IMPL(X)

#define DICT_TOKENS_M4TH(X) /* contains all DICT_TOKENS_M4TH_* */                                  \
    DICT_TOKENS_M4TH_USER(X) DICT_TOKENS_M4TH_C(X) DICT_TOKENS_M4TH_CORE(X) DICT_TOKENS_M4TH_IMPL(X)

#endif /* M4TH_INCLUDE_DICT_M4TH_MH */
