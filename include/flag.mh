/**
 * Copyright (C) 2020 Massimiliano Ghilardi
 *
 * This file is part of m4th.
 *
 * m4th is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * m4th is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with m4th.  If not, see <https://www.gnu.org/licenses/>.
 */

#ifndef M4TH_M4TH_MH
#define M4TH_M4TH_MH

/* macros that are part of m4th public API */

/* m4th searchorder */
#define M4TH_SEARCHORDER_MAX 15 /**< maximum # of wordlists in search order */

/* m4th state */
#define M4STATE_INTERPRET 0 /**< m4th is interpreting. By forth 2012, must be = 0  */

/* m4word flags */
#define M4FLAG_COMPILE_ONLY (1 << 0)  /**< word cannot interpreted - only compiled     */
#define M4FLAG_IMMEDIATE (1 << 1)     /**< word is executed immediately                */
#define M4FLAG_INLINE (1 << 2)        /**< forth code of word can be inlined           */
#define M4FLAG_INLINE_ALWAYS (1 << 3) /**< forth code of word *must* always be inlined */

#define M4FLAG_JUMP_MASK (3 << 4)
/**
 * word always jumps to some other instruction than the following one.
 * incompatible with M4FLAG_PURE
 */
#define M4FLAG_JUMP (1 << 4)
/**
 * word may jump to some other instruction than the following one.
 * incompatible with M4FLAG_PURE
 */
#define M4FLAG_MAY_JUMP (2 << 4)

#define M4FLAG_PURE_MASK (3 << 4)
/**
 * results are a fixed arithmetic algorithm depending only
 * on numeric value of arguments:
 * the word does not dereference any pointer (not even local, global or user variables)
 * and does not use the instruction pointer or any other external state or data.
 *
 * incompatible with M4FLAG_CONSUMES_IP_* and M4FLAG_*JUMP
 */
#define M4FLAG_PURE (3 << 4)

#define M4FLAG_CONSUMES_IP_MASK ((3 << 6) | M4FLAG_INLINE_ALWAYS)
/**
 * word must be followed by 1, 2, 4 or 8 bytes, which are used (not modified) and jumped over.
 *
 * implies M4FLAG_INLINE_ALWAYS, incompatible with M4FLAG_PURE.
 */
#define M4FLAG_CONSUMES_IP_2 ((1 << 6) | M4FLAG_INLINE_ALWAYS)
#define M4FLAG_CONSUMES_IP_4 ((2 << 6) | M4FLAG_INLINE_ALWAYS)
#define M4FLAG_CONSUMES_IP_8 ((3 << 6) | M4FLAG_INLINE_ALWAYS)

#define M4FLAG_MEM_FETCH (1 << 8)    /** word dereferences pointer argument(s) and reads from it */
#define M4FLAG_MEM_STORE (1 << 9)    /** word dereferences pointer arguments(s) and writes to it */
#define M4FLAG_DATA_TOKENS (1 << 10) /** word data contains m4tokens */

#define M4FLAG_NOOPT_MASK (3 << 11) /** word must not be optimized */
/**< word defined with CREATE - do not optimize away CALL(noop) */
#define M4FLAG_CREATE (1 << 11)
/**< word defined with DEFER - do not optimize/inline CALL((defer-uninitialized)) */
#define M4FLAG_DEFER (2 << 11)
/**< instruct the compiler not to optimize word */
#define M4FLAG_NOOPT (3 << 11)

/**
 * < instruct the compiler to re-execute (immediate) word after optimization.
 * needed to recompute jump offsets
 */
#define M4FLAG_REEXEC_AFTER_OPTIMIZE (1 << 13)

#endif /* M4TH_M4TH_MH */
