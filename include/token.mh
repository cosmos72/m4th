/**
 * Copyright (C) 2020 Massimiliano Ghilardi
 *
 * This file is part of m64th.
 *
 * m64th is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * m64th is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with m64th.  If not, see <https://www.gnu.org/licenses/>.
 */

#ifndef M64TH_INCLUDE_TOKEN_MH
#define M64TH_INCLUDE_TOKEN_MH

#include "m64th/token.mh"
#include "std/token.mh"
#include "token_alias.mh"
#include "word.mh" /* WORD_SYM() */

#define M6TOKEN_SYM(name) m6##name
#define M6TOKEN_SYM_COMMA(name) M6TOKEN_SYM(name),
#define M6TOKEN_VAL(name) M6##name
#define M6TOKEN_VAL_COMMA(name) M6TOKEN_VAL(name),

/* assembler macro: insert an int as wide as m6token in a sequence of m6token */
#define m6T(x) ((x)&0xFFFF)
#define M6T(x) ((x)&0xFFFF)

/* assembler macro: insert an int16 in a sequence of m6token */
#define M6SHORT(x) ((x)&0xFFFF)

/* assembler macro: insert an int32 in a sequence of m6token */
#define M6INT(x) ((x)&0xFFFFFFFF)

/* assembler macro: insert an m6cell in a sequence of m6token */
#define M6CELL(x) (x)

/* assembler macro: insert string in a sequence of m6token */
#define M6STRING_LIT(len, str)

/* assembler macro: insert NT address in a sequence of m6token */
#define M6NT(wordname) WORD_SYM(wordname)

/*
 * assembler macro: insert XT address in a sequence of m6token.
 * only works if word.data_n == 0
 */
#define M6XT(wordname) (WORD_SYM(wordname) + WORD_OFF_XT)

/* not here: defined by file macro.mh */
/* #define M6LIT_STRING(len, str) */

#endif /* M64TH_INCLUDE_TOKEN_MH */
