/**
 * Copyright (C) 2020 Massimiliano Ghilardi
 *
 * This file is part of m4th.
 *
 * m4th is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * m4th is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with m4th.  If not, see <https://www.gnu.org/licenses/>.
 */

#ifndef M4TH_INCLUDE_TOKEN_M4TH_MH
#define M4TH_INCLUDE_TOKEN_M4TH_MH

/*
 *
 *
 * skip some lines to align #define numbers with line number
 *
 *
 */

/* 'm4th-user' wordlist */
#define M4less_equal 512             /* <=                    */
#define M4more_equal 513             /* >=                    */
#define M4zero_less_equal 514        /* 0<=                   */
#define M4zero_more_equal 515        /* 0>=                   */
#define M4two_plus 516               /* 2+                    */
#define M4two_minus 517              /* 2-                    */
#define M4four_times 518             /* 4*                    */
#define M4four_plus 519              /* 4+                    */
#define M4four_div 520               /* 4/                    */
#define M4eight_times 521            /* 8*                    */
#define M4eight_plus 522             /* 8+                    */
#define M4eight_div 523              /* 8/                    */
#undef M4____gap                     /*                       */
#define M4two_dup_two_to_r 525       /* 2dup2>r   equivalent to: 2dup 2>r     */
#define M4two_nip 526                /* 2nip      equivalent to: 2swap 2drop  */
#define M4two_r_from_two_drop 527    /* 2r>2drop  equivalent to: 2r>  2drop   */
#undef M4____gap                     /*                       */
#undef M4____gap                     /*                       */
#define M4bounds 530                 /* ( c-addr u -- c-addr+u c-addr ) get string bounds */
#undef M4____gap                     /*                       */
#undef M4____gap                     /*                       */
#define M4dup_to_r 533               /* dup>r                   equivalent to: dup  >r  */
#undef M4____gap                     /*                       */
#define M4flip 535                   /* flip ( a b c -- c b a ) equivalent to: swap rot */
#undef M4____gap                     /*                       */
#undef M4____gap                     /*                       */
#define M4i_times 538                /* i*                    */
#define M4i_plus 539                 /* i+                    */
#define M4i_minus 540                /* i-                    */
#define M4i_prime 541                /* i'                    */
#undef M4____gap                     /*                       */
#define M4noop 543                   /* noop                  */
#undef M4____gap                     /*                       */
#undef M4____gap                     /*                       */
#undef M4____gap                     /*                       */
#define M4r_store 547                /* r!        equivalent to: r>   drop >r   */
#define M4r_plus 548                 /* r+        equivalent to: r>   +    >r   */
#define M4r_from_drop 549            /* r>drop    equivalent to: r>   drop      */
#define M4rdepth 550                 /* rdepth    get return stack depth        */
#define M4minus_rot 551              /* -rot      equivalent to: rot  rot       */
#undef M4____gap                     /*                       */
#define M4squared 553                /* squared   equivalent to: dup  *         */
#define M4string_equal 554           /* string=    ( c-addr1 c-addr2 u -- t|f ) */
#define M4string_ci_equal 555        /* string-ci= ( c-addr1 c-addr2 u -- t|f ) */
#define M4string_first_blank 556     /* string-first-blank ( c-addr u -- u' )   */
#define M4sub 557                    /* sub       equivalent to: swap -         */
#undef M4____gap                     /*                       */
#define M4trail 559                  /* trail     equivalent to: over swap    */
#undef M4____gap                     /*                       */
#define M4u_less_equal 561           /* u<=                   */
#define M4u_more_equal 562           /* u>=                   */
#undef M4____gap                     /*                       */
#undef M4____gap                     /*                       */
#define M4byte_fetch 565             /* byte@     read   int8_t at address dtop, sign-extend */
#define M4char_fetch M4c_fetch       /* char@     read  uint8_t at address dtop, sign-extend */
#define M4short_fetch 567            /* short@    read  int16_t at address dtop, sign-extend */
#define M4ushort_fetch 568           /* ushort@   read uint16_t at address dtop, sign-extend */
#define M4int_fetch 569              /* int@      read  int32_t at address dtop, sign-extend */
#define M4uint_fetch 570             /* uint@     read uint32_t at address dtop, sign-extend */
#define M4byte_store M4c_store       /* byte!     write   (int8_t)dtop at address d2         */
#define M4char_store M4c_store       /* char!     write  (uint8_t)dtop at address d2         */
#define M4short_store 573            /* short!    write  (int16_t)dtop at address d2         */
#define M4ushort_store M4short_store /* ushort!   write (uint16_t)dtop at address d2         */
#define M4int_store 575              /* int!      write  (int32_t)dtop at address d2         */
#define M4uint_store M4int_store     /* uint!     write (uint32_t)dtop at address d2         */
#define M4to_byte 577   /* to-byte   truncate dtop to   int8_t, sign-extend high bits  */
#define M4to_char 578   /* to-char   truncate dtop to  uint8_t, zero-extend high bits  */
#define M4to_short 579  /* to-short  truncate dtop to  int16_t, sign-extend high bits  */
#define M4to_ushort 580 /* to-ushort truncate dtop to uint16_t, zero-extend high bits  */
#define M4to_int 581    /* to-int    truncate dtop to  int32_t, sign-extend high bits  */
#define M4to_uint 582   /* to-uint   truncate dtop to uint32_t, zero-extend high bits  */
#undef M4____gap        /*                       */
#undef M4____gap        /*                       */
#undef M4____gap        /*                       */
#undef M4____gap        /*                       */
#undef M4____gap        /*                       */

/* 'm4th-c' wordlist */
#define M4_c_arg_0_ 590        /* prepare 0 args for C function call    */
#define M4_c_arg_1_ 591        /* prepare 1 arg  for C function call    */
#define M4_c_arg_2_ 592        /* prepare 2 args for C function call    */
#define M4_c_arg_3_ 593        /* prepare 3 args for C function call    */
#define M4_c_arg_4_ 594        /* prepare 4 args for C function call    */
#define M4_c_arg_5_ 595        /* prepare 5 args for C function call    */
#define M4_c_arg_6_ 596        /* prepare 6 args for C function call    */
#undef M4_c_arg_7_             /*                       */
#undef M4_c_arg_8_             /*                       */
#undef M4____gap               /*                       */
#define M4_c_call_ 600         /* must be followed by C function pointer. calls it. */
#undef M4_c_call_sync_ /*601*/ /* save regs to m4th, call C function, reload regs   */
#undef M4c_exec /*602*/        /* pop C function pointer, call it */
#undef M4c_exec_sync /*603*/   /* save regs to m4th, pop C function pointer, call it, reload regs */
#undef M4_c_farg_1_            /* pop 1 floating point arg  for C function call */
#undef M4_c_farg_2_            /* pop 2 floating point args for C function call */
#undef M4_c_farg_3_            /* pop 3 floating point args for C function call */
#undef M4_c_fret_1_            /*                       */
#undef M4_c_fret_2_            /*                       */
#undef M4____gap               /*                       */
#define M4_c_ret_0_ 610        /* push 0 values returned by C function call */
#define M4_c_ret_1_ 611        /* push 1 value  returned by C function call */
#define M4_c_ret_2_ 612        /* push 2 values returned by C function call */
#undef M4____gap               /*                       */
#undef M4____gap               /*                       */

/* 'm4th-core' wordlist */
#define M4ex_string_store 617   /* ( c-addr u -- ) save string addr&len as exception description  */
#define M4ex_string_fetch 618   /* ( -- c-addr u ) fetch exception description string             */
#define M4in_to_ibuf 619        /* in>ibuf      (    -- io     ) get current input as iobuf       */
#define M4iobuf_addr 620        /* iobuf>addr   ( io -- c-addr ) get start of iobuf data buffer   */
#define M4iobuf_all_data 621    /* iobuf>all-data ( io -- c-addr u ) get all data, from 0 to size */
#define M4iobuf_data 622        /* iobuf>data   ( io -- c-addr u ) get data, from position to size*/
#define M4iobuf_free_data 623   /*              ( io -- c-addr u ) get free data, from size to max*/
#define M4iobuf_err 624         /* iobuf>err    ( io -- addr ) get address of iobuf.err           */
#define M4iobuf_func 625        /* iobuf>func   ( io -- addr ) get address of iobuf I/O function  */
#define M4iobuf_handle 626      /* iobuf>handle ( io -- addr ) get address of iobuf handle        */
#define M4iobuf_max 627         /* iobuf>max    ( io -- u    ) get iobuf max size i.e. capacity   */
#define M4iobuf_pos 628         /* iobuf>pos    ( io -- addr ) get address of iobuf position      */
#define M4iobuf_size 629        /* iobuf>size   ( io -- addr ) get address of iobuf size          */
#undef M4____gap                /*                       */
#undef M4____gap                /*                       */
#undef M4____gap                /*                       */
#define M4obuf_write_char 633   /* obuf-write-char   ( io c -- err ) write one char to iobuf */
#define M4obuf_write_string 634 /* obuf-write-string ( io c -- err ) write string to iobuf   */
#define M4out_to_obuf 635       /* out>obuf          (      -- io  ) get current output as iobuf */
#undef M4____gap                /*                       */
#define M4searchorder_i 637     /* ( u -- addr ) get address of searchorder i-th element  */
#define M4searchorder_n 638     /* (   -- addr ) get address of searchorder count         */
#undef M4____gap                /*                       */
#define M4user_var 640          /* user-var ( -- addr ) must be followed by index of user var */
#undef M4____gap                /*                       */
#undef M4____gap                /*                       */
#define M4name_to_code 643      /* name>code   ( nt -- addr u  ) get code array from name */
#define M4name_to_code_n 644    /* name>code>n ( nt -- u       ) get code size from name  */
#define M4name_to_flags 645     /* name>flags  ( nt -- m4flags ) get m4flags from name    */
#undef M4____gap                /* name>string already defined in forth 'tools ext' word set */
#define M4name_to_prev 647      /* name>prev   ( nt -- nt'|0   ) get previous name        */
#define M4name_to_xt 648        /* name>xt     ( nt -- XT      ) get XT == code address from name */
#undef M4____gap                /*                       */
#define M4wordlist_last 650     /* wordlist-last ( wid -- nt ) get last name in a wordlist */
#undef M4____gap                /*                       */
#define M4xt_to_name 652        /* xt>name       ( XT -- nt ) get name from XT */
#undef M4____gap                /*                       */
#undef M4____gap                /*                       */
#undef M4____gap                /*                       */

/* 'm4th-impl' wordlist */
#undef M4____gap             /*                       */
#define M4minus_one 659      /* -1       */
#define M4zero 660           /* 0        */
#define M4one 661            /* 1        */
#define M4two 662            /* 2        */
#define M4three 663          /* 3        */
#define M4four 664           /* 4        */
#define M4eight 665          /* 8        */
#define M4_q_do_ 666         /* (?do)     must be followed by IP offset to jump   */
#define M4_q_if_ 667         /* (?if)     must be followed by IP offset to jump if dtop == 0 */
#define M4_q_if_zero_ 668    /* (?if0)    must be followed by IP offset to jump if dtop <> 0 */
#define M4_q_until_ 669      /* (?until)  must be followed by IP offset to jump if dtop == 0 */
#define M4_q_until_zero_ 670 /* (?until0) must be followed by IP offset to jump if dtop <> 0 */
#define M4_q_while_ 671      /* (?while)  must be followed by IP offset to jump if dtop == 0 */
#define M4_q_while_zero_ 672 /* (?while0) must be followed by IP offset to jump if dtop <> 0 */
#define M4_again_ 673        /* (again)   must be followed by IP offset to jump   */
#define M4_break_ 674        /* (break)   must be followed by IP offset to jump   */
#define M4_call_ 675         /* (call)    must be followed by word. calls it.     */
#define M4_call_xt_ 676      /* (call-xt) must be followed by XT. calls it.       */
#define M4_catch_beg_ 677    /* (catch-beg) first  half of 'catch'                */
#define M4_catch_end_ 678    /* (catch-end) second half of 'catch'                */
#define M4_continue_ 679     /* (continue) must be followed by IP offset to jump  */
#define M4_else_ 680         /* (else)     must be followed by IP offset to jump  */
#define M4_exec_native_ 681  /* (exec-native) pop native code address, execute it */
#define M4_exec_token_ 682   /* pop token, exec it. It must be 'inline' with consume_IP = 0  */
#define M4_exec_xt_from_native_ 683 /* pop XT and execute it from native code  */
#undef M4____gap                    /*                                         */
#define M4_if_ 685                  /* (if)  must be followed by IP offset     */
#define M4_if_zero_ 686             /* (if0) must be followed by IP offset     */
#undef M4____gap                    /*                                         */
#define M4_ip_ 688                  /* (ip)      get vm's current instruction pointer */
#define M4_ip_to_data_ 689          /* (ip>data) must be 1st instr in word. return word's data */
#define M4_ip_to_data_addr_ 690     /* must be 1st instr in word. return word's data>addr      */
#define M4_leave_ 691               /* (leave)  must be followed by IP offset to jump          */
#define M4_lit2s_ 692               /* (lit-2s) must be followed by int16, push it to dstack   */
#define M4_lit4s_ 693               /* (lit-4s) must be followed by int32, push it to dstack   */
#define M4_lit8s_ 694               /* (lit-8s) must be followed by int64, push it to dstack   */
#define M4_loop_ 695                /* (loop)   must be followed by IP offset to jump          */
#undef M4____gap                    /*                                         */
#undef M4____gap                    /*                                         */
#undef M4____gap                    /*                                         */
#define M4_missing_ 0            /* (missing) called instead of invalid/unimplemented function  */
#define M4_repeat_ 700           /* (repeat) must be followed by IP offset to jump              */
#define M4_return_to_native_ 701 /* (return-to-native) return to native code                    */
#undef M4____gap                 /*                                         */
#undef M4____gap                 /*                                         */
#define M4_until_ 704            /* (until)  must be followed by IP offset to jump if dtop == 0 */
#define M4_until_zero_ 705       /* (until0) must be followed by IP offset to jump if dtop <> 0 */
#define M4_while_ 706            /* (while)  must be followed by IP offset to jump if dtop == 0 */
#define M4_while_zero_ 707       /* (while0) must be followed by IP offset to jump if dtop <> 0 */
#undef M4____gap                 /*                                         */
#undef M4____gap                 /*                                         */
#undef M4____gap                 /*                                         */
#define M4_num_compiled_ 711 /* [#compiled]  code size i.e. # of tokens in word being compiled  */
#define M4_compile_init_ 712 /* [compile-init] must be called once x word before any [compile*] */
#define M4_compile2s_ 713    /* [compile2s,] pop int16 from dstack, append it to compiled code  */
#define M4_compile4s_ 714    /* [compile4s,] pop int32 from dstack, append it to compiled code  */
#define M4_compile8s_ 715    /* [compile8s,] pop int64 from dstack, append it to compiled code  */
#define M4_compile_lit_ 716  /* must be followed by m4token, append it to compiled code  */
#define M4_compile_resolved_jump_ 717   /* must be followed by m4token and label to jump to */
#define M4_compile_unresolved_jump_ 718 /* must be followed by m4token and its category */
#define M4_word_ 719                    /* [word] push to dstack word being compiled */
#define M4____end 720

#endif /* M4TH_INCLUDE_TOKEN_M4TH_MH */
