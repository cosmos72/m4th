/**
 * Copyright (C) 2020 Massimiliano Ghilardi
 *
 * This file is part of m4th.
 *
 * m4th is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * m4th is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with m4th.  If not, see <https://www.gnu.org/licenses/>.
 */

#ifndef M4TH_INCLUDE_TOKEN_M4TH_MH
#define M4TH_INCLUDE_TOKEN_M4TH_MH

/* 'm4th-user' wordlist */
#define M4_u(x) ((x) + 510)
#undef M4____gap                         /*                                         */
#undef M4____gap                         /*                                         */
#undef M4____gap                         /*                                         */
#undef M4____gap                         /*                                         */
#undef M4____gap                         /*                                         */
#define M4less_equal M4_u(0)             /* <=                                      */
#define M4more_equal M4_u(1)             /* >=                                      */
#undef M4____gap                         /*                                         */
#define M4zero_less_equal M4_u(3)        /* 0<=                                     */
#define M4zero_more_equal M4_u(4)        /* 0>=                                     */
#undef M4____gap                         /*                                         */
#define M4two_plus M4_u(6)               /* 2+                                      */
#define M4two_minus M4_u(7)              /* 2-                                      */
#define M4two_sm_div M4_u(8)             /* 2sm/ symmetric divide by 2              */
#undef M4____gap                         /*                                         */
#define M4four_times M4_u(10)            /* 4*                                      */
#define M4four_plus M4_u(11)             /* 4+                                      */
#define M4four_div M4_u(12)              /* 4/   floored divide by 4                */
#define M4four_sm_div M4_u(13)           /* 4sm/ symmetric divide by 4              */
#undef M4____gap                         /*                                         */
#define M4eight_times M4_u(15)           /* 8*                                      */
#define M4eight_plus M4_u(16)            /* 8+                                      */
#define M4eight_div M4_u(17)             /* 8/   floored divide by 8                */
#define M4eight_sm_div M4_u(18)          /* 8/sm symmetric divide by 8              */
#undef M4____gap                         /*                                         */
#undef M4____gap                         /*                                         */
#define M4two_dup_two_to_r M4_u(21)      /* 2dup_2>r  equivalent to: 2dup 2>r       */
#define M4two_nip M4_u(22)               /* 2nip      equivalent to: 2swap 2drop    */
#define M4two_pick M4_u(23)              /* 2pick                                   */
#define M4two_roll M4_u(24)              /* 2roll     roll double-width cells       */
#define M4minus_two_roll M4_u(25)        /* -2roll    2roll in opposite direction   */
#define M4minus_cs_roll M4minus_two_roll /* -cs-roll  equivalent to: -2roll         */
#define M4minus_two_rot M4_u(27)         /* -2rot     equivalent to: 2rot 2rot      */
#define M4two_r_from_two_drop M4_u(28)   /* 2r>2drop  equivalent to: 2r>  2drop     */
#undef M4____gap                         /*                                         */
#undef M4____gap                         /*                                         */
#define M4bounds M4_u(31)                /* ( c-addr u -- c-addr+u c-addr ) get string bounds */
#define M4cmove_star M4_u(32)            /* ( src-addr dst-addr u -- src-addr+u dst-addr+u )  */
#undef M4____gap                         /*                                         */
#undef M4____gap                         /*                                         */
#undef M4____gap                         /*                                         */
#undef M4____gap                         /*                                         */
#undef M4____gap                         /*                                         */
#define M4crc_cell M4_u(38)              /* ( x -- crc32 ) compute CRC32c of a cell           */
#define M4crc_string M4_u(39)            /* ( c-addr u -- crc32 ) compute CRC32c of a string  */
#undef M4____gap                         /*                                         */
#define M4dup_to_r M4_u(41)              /* dup>r                   equivalent to: dup  >r    */
#define M4ex_message_store M4_u(42)      /* ( c-addr u -- ) save string as exception message  */
#define M4ex_message_fetch M4_u(43)      /* ( -- c-addr u ) fetch exception message string    */
#define M4flip M4_u(44)                  /* flip ( a b c -- c b a ) equivalent to: swap rot   */
#undef M4____gap                         /*                                         */
#define M4hop M4_u(46)                   /* hop       equivalent to: 2   pick       */
#define M4i_times M4_u(47)               /* i*                                      */
#define M4i_plus M4_u(48)                /* i+                                      */
#define M4i_minus M4_u(59)               /* i-                                      */
#define M4i_prime M4_u(60)               /* i'                                      */
#undef M4____gap                         /*                                         */
#define M4line_find_char M4_u(62)        /* ( c-addr u ch -- u' ) get index of char or CR */
#define M4noop M4_u(63)                  /* noop                                    */
#undef M4____gap                         /*                                         */
#define M4r_store M4_u(65)               /* r!        equivalent to: r>  drop >r    */
#define M4r_plus M4_u(66)                /* r+        equivalent to: r>  +    >r    */
#define M4r_from_drop M4_u(67)           /* r>drop    equivalent to: r>  drop       */
#define M4rdepth M4_u(68)                /* rdepth    get return stack depth        */
#define M4minus_roll M4_u(69)            /* -roll     rotate in opposite direction than "roll" */
#define M4minus_rot M4_u(70)             /* -rot      equivalent to: rot rot        */
#undef M4____gap                         /*                                         */
#define M4squared M4_u(72)               /* squared   equivalent to: dup *          */
#undef M4____gap                         /*                                         */
#define M4string_equal M4_u(74)          /* string=    ( c-addr1 c-addr2 u -- t|f ) */
#define M4string_ci_equal M4_u(75)       /* string-ci= ( c-addr1 c-addr2 u -- t|f ) */
#define M4string_find_blank M4_u(76)     /* ( c-addr u -- u' ) get index of first char <= ' ' */
#define M4string_find_char M4_u(77)      /* ( c-addr u ch -- u' ) get index of first ch       */
#define M4string_find_nonblank M4_u(78)  /* ( c-addr u -- u' ) get index of first char > ' '  */
#undef M4____gap                         /*                                         */
#undef M4____gap                         /*                                         */
#define M4sub M4_u(81)                   /* sub       equivalent to: swap -         */
#define M4trail M4_u(82)                 /* trail     equivalent to: over swap      */
#undef M4____gap                         /*                                         */
#undef M4____gap                         /*                                         */
#define M4u_less_equal M4_u(85)          /* u<=                                     */
#define M4u_more_equal M4_u(86)          /* u>=                                     */
#undef M4____gap                         /*                                         */
#undef M4____gap                         /*                                         */
#define M4to_byte M4_u(89)      /* to-byte   truncate dtop to   int8_t, sign-extend high bits  */
#define M4to_char M4_u(90)      /* to-char   truncate dtop to  uint8_t, zero-extend high bits  */
#define M4to_short M4_u(91)     /* to-short  truncate dtop to  int16_t, sign-extend high bits  */
#define M4to_ushort M4_u(92)    /* to-ushort truncate dtop to uint16_t, zero-extend high bits  */
#define M4to_int M4_u(93)       /* to-int    truncate dtop to  int32_t, sign-extend high bits  */
#define M4to_uint M4_u(94)      /* to-uint   truncate dtop to uint32_t, zero-extend high bits  */
#define M4byte_fetch M4_u(95)   /* byte@     read   int8_t at address dtop, sign-extend */
#define M4char_fetch M4c_fetch  /* char@     read  uint8_t at address dtop, sign-extend */
#define M4short_fetch M4_u(96)  /* short@    read  int16_t at address dtop, sign-extend */
#define M4ushort_fetch M4_u(97) /* ushort@   read uint16_t at address dtop, sign-extend */
#define M4int_fetch M4_u(98)    /* int@      read  int32_t at address dtop, sign-extend */
#define M4uint_fetch M4_u(99)   /* uint@     read uint32_t at address dtop, sign-extend */
#define M4byte_store M4c_store  /* byte!     write   (int8_t)dtop at address d2         */
#define M4char_store M4c_store  /* char!     write  (uint8_t)dtop at address d2         */
#define M4short_store M4_u(100) /* short!    write  (int16_t)dtop at address d2         */
#define M4ushort_store M4short_store     /* ushort!   write (uint16_t)dtop at address d2 */
#define M4int_store M4_u(101)            /* int!      write  (int32_t)dtop at address d2 */
#define M4uint_store M4int_store         /* uint!     write (uint32_t)dtop at address d2 */
#define M4byte_comma M4c_comma           /* byte,   append    (int8_t)dtop to HERE   */
#define M4char_comma M4c_comma           /* char,   append   (uint8_t)dtop to HERE   */
#define M4short_comma M4_u(102)          /* short,  append   (int16_t)dtop to HERE   */
#define M4ushort_comma M4short_comma     /* ushort, append  (uint16_t)dtop to HERE   */
#define M4int_comma M4_u(103)            /* int,    append   (int32_t)dtop to HERE   */
#define M4uint_comma M4int_comma         /* uint,   append  (uint32_t)dtop to HERE   */
#define M4countedstring_comma M4_u(104)  /* ( c-addr u -- ) append countedstring to HERE */
#undef M4____gap                         /*                                         */
#undef M4____gap                         /*                                         */
#undef M4____gap                         /*                                         */
#define M4short_align M4_u(107)          /*  short-align  align HERE to sizeof(short)       */
#define M4ushort_align M4short_align     /* ushort-align  align HERE to sizeof(ushort)      */
#define M4int_align M4_u(108)            /*    int-align  align HERE to sizeof(int)         */
#define M4uint_align M4int_align         /*   uint-align  align HERE to sizeof(uint)        */
#define M4short_aligned M4_u(109)        /*      short-aligned  align dtop to sizeof(short) */
#define M4ushort_aligned M4short_aligned /* ushort-aligned  align dtop to sizeof(ushort)    */
#define M4int_aligned M4_u(110)          /*    int-aligned  align dtop to sizeof(int)       */
#define M4uint_aligned M4int_aligned     /*   uint-aligned  align dtop to sizeof(uint)      */
#undef M4____gap                         /*                                         */
#define M4do_i_plus_loop M4_u(116)       /* do i + loop           */

/* 'm4th-c' wordlist */
#define M4_c(x) ((x) + 630)
#define M4_c_arg_0_ M4_c(0)  /* prepare 0 args for C function call    */
#define M4_c_arg_1_ M4_c(1)  /* prepare 1 arg  for C function call    */
#define M4_c_arg_2_ M4_c(2)  /* prepare 2 args for C function call    */
#define M4_c_arg_3_ M4_c(3)  /* prepare 3 args for C function call    */
#define M4_c_arg_4_ M4_c(4)  /* prepare 4 args for C function call    */
#define M4_c_arg_5_ M4_c(5)  /* prepare 5 args for C function call    */
#define M4_c_arg_6_ M4_c(7)  /* prepare 6 args for C function call    */
#undef M4_c_arg_7_           /*                                         */
#undef M4_c_arg_8_           /*                                         */
#undef M4____gap             /*                                         */
#define M4_c_call_ M4_c(10)  /* must be followed by C function pointer. calls it. */
#undef M4_c_call_sync_       /* save regs to m4th, call C function, reload regs   */
#undef M4c_exec              /* pop C function pointer, call it */
#undef M4c_exec_sync         /* save regs to m4th, pop C function pointer, call it, reload regs */
#undef M4____gap             /*                                         */
#undef M4_c_farg_1_          /* pop 1 floating point arg  for C function call */
#undef M4_c_farg_2_          /* pop 2 floating point args for C function call */
#undef M4_c_farg_3_          /* pop 3 floating point args for C function call */
#undef M4_c_farg_4_          /* pop 4 floating point args for C function call */
#undef M4____gap             /*                                         */
#define M4_c_ret_0_ M4_c(20) /* push 0 values returned by C function call */
#define M4_c_ret_1_ M4_c(21) /* push 1 value  returned by C function call */
#define M4_c_ret_2_ M4_c(22) /* push 2 values returned by C function call */

/* 'm4th-core' wordlist */
#define M4_(x) ((x) + 650)
#undef M4____gap                          /*                                         */
#define M4flags_to_consumed_tokens M4_(7) /* ( flags -- u ) get # consumed tokens from flags */
#undef M4____gap                          /*                                         */
#undef M4____gap                          /*                                         */
#undef M4____gap                          /*                                         */
#define M4in_to_ibuf M4_(11) /* in>ibuf      (    -- io     ) get current input as iobuf       */
#undef M4____gap             /*                                         */
#define M4iobuf_addr M4_(13) /* iobuf>addr   ( io -- c-addr ) get start of iobuf data buffer */
#define M4iobuf_all_data M4_(14) /* ( io -- c-addr u ) get all data, from 0 to size */
#define M4iobuf_data M4_(15)   /* iobuf>data   ( io -- c-addr u ) get data, from position to size*/
#define M4iobuf_data_n M4_(16) /* iobuf>data>n ( io -- u    ) get data length = size - position */
#define M4iobuf_free_data M4_(17)   /* ( io -- c-addr u ) get free data, from size to max */
#define M4iobuf_empty_query M4_(18) /* iobuf-empty? ( io -- t|f  ) true if iobuf data is empty */
#define M4iobuf_err M4_(19)    /* iobuf>err    ( io -- addr ) get address of iobuf.err           */
#define M4iobuf_func M4_(20)   /* iobuf>func   ( io -- addr ) get address of iobuf I/O function  */
#define M4iobuf_handle M4_(21) /* iobuf>handle ( io -- addr ) get address of iobuf handle  */
#define M4iobuf_max M4_(22)    /* iobuf>max    ( io -- u    ) get iobuf max size i.e. capacity   */
#define M4iobuf_pos M4_(23)    /* iobuf>pos    ( io -- addr ) get address of iobuf position      */
#define M4iobuf_end M4_(24)    /* iobuf>end    ( io -- addr ) get address of iobuf end position  */
#undef M4____gap               /*                                         */
#define M4latest M4_(26)       /* latest       (    -- nt   ) get last defined word              */
#undef M4____gap               /*                                         */
#define M4name_comma M4_(28)   /* name,       ( c-addr u --   ) create a new name        */
#undef M4____gap               /*                                         */
#define M4name_to_code M4_(30) /* ( nt -- addr u  ) get code array from name */
#define M4name_to_code_n M4_(31)      /* ( nt -- u       ) get code size from name */
#define M4name_to_data M4_(32)        /* ( nt -- addr u  ) get data array from name */
#define M4name_to_flags M4_(33)       /* ( nt -- m4flags ) get m4flags from name   */
#define M4name_to_flags_store M4_(34) /* ( m4flags nt -- ) set m4flags of name     */
#define M4name_to_ident M4_(35)       /* ( nt -- c-addr u ) convert name to asm/C identifier */
#define M4name_to_prev M4_(36)        /* ( nt -- nt'|0    ) get previous name                */
#define M4name_to_xt M4_(37)          /* ( nt -- XT       ) get XT == code address from name */
#undef M4____gap                      /*                                         */
#define M4obuf_write_char M4_(39)   /* obuf-write-char   ( io c -- err ) write one char to iobuf */
#define M4obuf_write_string M4_(40) /* obuf-write-string ( io c -- err ) write string to iobuf */
#define M4out_to_obuf M4_(41)   /* out>obuf          (      -- io  ) get current output as iobuf  */
#define M4set_latest M4_(42)    /* set-latest        ( nt --       ) set last defined word        */
#define M4searchorder_i M4_(43) /* ( u -- addr ) get address of searchorder i-th element  */
#define M4searchorder_n M4_(44) /* (   -- addr ) get address of searchorder count         */
#undef M4____gap                /*                                         */
#define M4token_to_name M4_(46) /* token>name ( token -- nt|0 ) convert token to name */
#define M4user_var M4_(47)      /* user-var ( -- addr ) must be followed by index of user var */
#undef M4____gap                /*                                         */
#define M4wordlist_add M4_(49)  /* ( wid nt -- ) add name to wordlist                     */
#define M4wordlist_last M4_(50) /* ( wid -- nt ) get last name in a wordlist              */
#define M4wordlist_reset M4_(51) /* ( wid --    ) remove all user-defined names from wid   */
#undef M4____gap                 /*                                         */
#define M4xt_to_name M4_(53)     /* xt>name       ( XT -- nt ) get name from XT */

/* 'm4th-impl' wordlist */
#define M4_i(x) ((x) + 700)
#define M4minus_one M4_i(7)         /* -1                    */
#define M4zero M4_i(8)              /* 0                     */
#define M4one M4_i(9)               /* 1                     */
#define M4two M4_i(10)              /* 2                     */
#define M4three M4_i(11)            /* 3                     */
#define M4four M4_i(12)             /* 4                     */
#define M4eight M4_i(13)            /* 8                     */
#undef M4____gap                    /*                                         */
#undef M4____gap                    /*                                         */
#define M4_plus_loop_ M4_i(16)      /* (+loop)  followed by IP offset to jump          */
#define M4_q_break_if_ M4_i(17)     /* (?break-if)     followed by IP offset to jump if dtop <> 0 */
#define M4_q_break_if0_ M4_i(18)    /* (?break-if0)    followed by IP offset to jump if dtop == 0 */
#define M4_q_continue_if_ M4_i(19)  /* (?continue-if) followed by IP offset to jump if dtop <> 0  */
#define M4_q_continue_if0_ M4_i(20) /*(?continue-if0) followed by IP offset to jump if dtop == 0*/
#define M4_q_do_ M4_i(21)           /* (?do)           followed by IP offset to jump              */
#define M4_q_if_ M4_i(22)           /* (?if)           followed by IP offset to jump if dtop == 0 */
#define M4_q_if0_ M4_i(23)          /* (?if0)          followed by IP offset to jump if dtop <> 0 */
#define M4_q_until_ M4_i(24)        /* (?until)        followed by IP offset to jump if dtop == 0 */
#define M4_q_until0_ M4_i(25)       /* (?until0)       followed by IP offset to jump if dtop <> 0 */
#define M4_q_while_ M4_i(26)        /* (?while)        followed by IP offset to jump if dtop == 0 */
#define M4_q_while0_ M4_i(27)       /* (?while0)       followed by IP offset to jump if dtop <> 0 */
#undef M4____gap                    /*                                                            */
#undef M4____gap                    /*                                                            */
#define M4_again_ M4_i(30)          /* (again)         followed by IP offset to jump              */
#define M4_break_ M4_i(31)          /* (break)         followed by IP offset to jump              */
#define M4_break_if_ M4_i(32)       /* (break-if)      followed by IP offset to jump if dtop <> 0 */
#define M4_break_if0_ M4_i(33)      /* (break-if0)     followed by IP offset to jump if dtop == 0 */
#undef M4____gap                    /*                                                            */
#define M4_call_xt_ M4_i(35)        /* (call-xt)       followed by XT. calls it.                  */
#define M4_catch_beg_ M4_i(36)      /* (catch-beg)     first  half of 'catch'                     */
#define M4_catch_end_ M4_i(37)      /* (catch-end)     second half of 'catch'                     */
#define M4_check_lit_ M4_i(38)      /* (check-lit)     ( x -- x ) followed by e. throws if e <> x */
#define M4_continue_ M4_i(39)       /* (continue)      followed by IP offset to jump              */
#define M4_continue_if_ M4_i(40)    /* (continue-if)   followed by IP offset to jump if dtop <> 0 */
#define M4_continue_if0_ M4_i(41)   /* (continue-if0)  followed by IP offset to jump if dtop == 0 */
#undef M4____gap                    /*                                                            */
#undef M4____gap                    /*                                                            */
#define M4_do_ M4_i(44)             /* (do)            followed by IP offset (ignored)            */
#define M4_else_ M4_i(45)           /* (else)          followed by IP offset to jump              */
#undef M4____gap                    /*                                                            */
#undef M4____gap                    /*                                                            */
#undef M4____gap                    /*                                                            */
#define M4_exec_native_ M4_i(49)    /* (exec-native) pop native code address, execute it          */
#define M4_exec_token_ M4_i(50)     /* pop token, exec it. It must be 'inline' and not consume IP */
#define M4_exec_xt_from_native_ M4_i(51) /* pop XT and execute it from native code  */
#undef M4____gap                /*                                                            */
#undef M4____gap                /*                                                            */
#undef M4____gap                /*                                         */
#define M4_if_ M4_i(55)         /* (if)  followed by IP offset to jump */
#define M4_if0_ M4_i(56)        /* (if0) followed by IP offset to jump */
#undef M4____gap                /*                                         */
#undef M4____gap                /*                                         */
#define M4_ip_ M4_i(59)         /* (ip)      get vm's current instruction pointer */
#define M4_ip_to_data_ M4_i(60) /* (ip>data) must be 1st instr in word. return word's data */
#define M4_ip_to_data_addr_ M4_i(61) /* must be 1st instr in word. return word's data>addr      */
#undef M4____gap                     /*                                         */
#undef M4____gap                     /*                                         */
#define M4_leave_ M4_i(64)           /* (leave)  followed by IP offset to jump          */
#define M4_lit_comma_ M4_i(65)  /* followed by m4token, append it to current word's code/data */
#define M4_lit2s_ M4_i(66)      /* (lit-2s) followed by int16, push it to dstack   */
#define M4_lit4s_ M4_i(67)      /* (lit-4s) followed by int32, push it to dstack   */
#define M4_lit8s_ M4_i(68)      /* (lit-8s) followed by int64, push it to dstack   */
#define M4_lit_string_ M4_i(69) /* followed by T(len) and ascii, push them to dstack */
#define M4_loop_ M4_i(70)       /* (loop)   followed by IP offset to jump          */
#undef M4____gap                /*                                         */
#define M4_missing_ 0           /* (missing) called instead of invalid/unimplemented function */
#undef M4____gap                /*                                         */
#undef M4____gap                /*                                         */
#define M4_repeat_ M4_i(75)     /* (repeat) followed by IP offset to jump              */
#define M4_return_to_native_ M4_i(76) /* (return-to-native) return to native code */
#undef M4____gap                      /*                                         */
#undef M4____gap                      /*                                         */
#define M4_until_ M4_i(79)            /* (until)  followed by IP offset to jump if dtop == 0 */
#define M4_until0_ M4_i(80)           /* (until0) followed by IP offset to jump if dtop <> 0 */
#define M4_while_ M4_i(81)            /* (while)  followed by IP offset to jump if dtop == 0 */
#define M4_while0_ M4_i(82)           /* (while0) followed by IP offset to jump if dtop <> 0 */
#undef M4____gap                      /*                                         */
#undef M4____gap                      /*                                         */
#undef M4____gap                      /*                                         */
#define M4_num_compiled_ M4_i(86)     /* get code size i.e. # of tokens in word being compiled */
#undef M4____gap                      /*                                         */
#undef M4____gap                      /*                                         */
#define M4_compile_jump_ M4_i(89)     /* ( token category -- sys ) compile unresolved jump    */
#define M4_compile_jump_lit_ M4_i(90) /* ( -- sys ) be followed by m4token and its category   */
#define M4_cs_find_lit_ M4_i(91)      /* followed by category. get its depth in control stack */
#define M4____end M4_i(92)

#endif /* M4TH_INCLUDE_TOKEN_M4TH_MH */
