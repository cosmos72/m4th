/**
 * Copyright (C) 2020 Massimiliano Ghilardi
 *
 * This file is part of m64th.
 *
 * m64th is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * m64th is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with m64th.  If not, see <https://www.gnu.org/licenses/>.
 */

#ifndef M64TH_INCLUDE_OPT_MH
#define M64TH_INCLUDE_OPT_MH

#include "macro.mh"

/* optimize a single token. right hand side must be at most two tokens */
#define OPT1_RULES(x)                                                                              \
    x(two_drop, /*=>*/ drop, drop)    /* 2drop    => drop drop (allows further optimizations) */   \
        x(two_dup, /*=>*/ over, over) /* 2dup     => over over (allows further optimizations) */   \
        x(cell_plus, /*=>*/ _SZ_plus) /* cell+    => SZ+           */                              \
        x(cells, /*=>*/ _SZ_times)    /* cells    => SZ*           */                              \
        x(char_plus, /*=>*/ one_plus) /* char+    => 1+            */                              \
        x(chars /*=>*/)               /* chars    =>               */                              \
        x(false, /*=>*/ zero)         /* false    => 0             */                              \
        x(noop /*=>*/)                /* noop     =>               */                              \
        x(r_fetch, /*=>*/ i)          /* r@       => i             */                              \
        x(true, /*=>*/ minus_one)     /* true     => -1            */

/*
 * optimize two consecutive tokens. right hand side must be at most three tokens.
 * Do NOT match 2drop in these rules: it is always found as 'drop drop'
 * Also, do NOT produce 2drop: it must be emitted as 'drop drop' to allow further optimizations.
 * For the same reasons, always use 'zero' instead of 'false', and 'minus_one' instead of 'true'
 */
#define OPT2_RULES(x)                                        /*                                 */ \
    x(minus_two, times, /*=>*/ two_times, negate)            /* -2 *          => 2* negate      */ \
        x(minus_two, plus, /*=>*/ two_minus)                 /* -2 +          => 2-             */ \
        x(minus_two, minus, /*=>*/ two_plus)                 /* -2 -          => 2+             */ \
        /* x(minus_two, div, => two_div, negate) */          /* -2 /    => 2/ negate  OVERFLOW! */ \
        x(minus_two, ne, /*=>*/ two_plus, zero_ne)           /* -2 <>         => 2+ 0<>         */ \
        x(minus_two, equal, /*=>*/ two_plus, zero_equal)     /* -2 =          => 2+ 0=          */ \
        x(minus_one, times, /*=>*/ negate)                   /* -1 *          => negate         */ \
        x(minus_one, plus, /*=>*/ one_minus)                 /* -1 +          => 1-             */ \
        x(minus_one, minus, /*=>*/ one_plus)                 /* -1 -          => 1+             */ \
        x(minus_one, div, /*=>*/ negate)                     /* -1 /          => negate         */ \
        x(minus_one, div_mod, /*=>*/ negate, zero)           /* -1 /mod       => negate 0       */ \
        x(minus_one, ne, /*=>*/ invert, zero_ne)             /* -1 <>         => invert 0<>     */ \
        x(minus_one, equal, /*=>*/ invert, zero_equal)       /* -1 =          => invert 0=      */ \
        x(minus_one, and/*=>*/)                              /* -1 and        =>                */ \
        x(minus_one, mod, /*=>*/ drop, zero)                 /* -1 mod        => drop 0         */ \
        x(minus_one, or, /*=>*/ drop, minus_one)             /* -1 or         => drop -1        */ \
        x(minus_one, _continue_if_, /*=>*/ _continue_)       /* -1 (cont..if) => (continue)     */ \
        x(minus_one, _until0_, /*=>*/ _again_)               /* -1 (until0)   => (again)        */ \
        x(minus_one, xor, /*=>*/ invert)                     /* -1 xor        => invert         */ \
        x(zero, times, /*=>*/ drop, zero)                    /* 0  *          => drop 0         */ \
        x(zero, minus /*=>*/)                                /* 0  -          =>                */ \
        x(zero, plus /*=>*/)                                 /* 0  +          =>                */ \
        x(zero, less, /*=>*/ zero_less)                      /* 0  <          => 0<             */ \
        x(zero, less_equal, /*=>*/ zero_less_equal)          /* 0  <=         => 0<=            */ \
        x(zero, ne, /*=>*/ zero_ne)                          /* 0  <>         => 0<>            */ \
        x(zero, equal, /*=>*/ zero_equal)                    /* 0  =          => 0=             */ \
        x(zero, more, /*=>*/ zero_more)                      /* 0  >          => 0>             */ \
        x(zero, more_equal, /*=>*/ zero_more_equal)          /* 0  >=         => 0>=            */ \
        x(zero, and, /*=>*/ drop, zero)                      /* 0  and        => drop 0         */ \
        x(zero, two_roll /*=>*/)                             /* 0  2roll      =>                */ \
        x(zero, minus_two_roll /*=>*/)                       /* 0  -2roll     =>                */ \
        x(zero, lshift /*=>*/)                               /* 0  lshift     =>                */ \
        x(zero, or /*=>*/)                                   /* 0  or         =>                */ \
        x(zero, pick, /*=>*/ dup)                            /* 0  pick       => dup            */ \
        x(zero, roll /*=>*/)                                 /* 0  roll       =>                */ \
        x(zero, minus_roll /*=>*/)                           /* 0  -roll      =>                */ \
        x(zero, rshift /*=>*/)                               /* 0  rshift     =>                */ \
        x(zero, u_less, /*=>*/ drop, zero)                   /* 0  u<         => drop zero      */ \
        x(zero, u_less_equal, /*=>*/ zero_equal)             /* 0  u<=        => 0=             */ \
        x(zero, u_more, /*=>*/ zero_ne)                      /* 0  u>         => 0<>            */ \
        x(zero, u_more_equal, /*=>*/ drop, minus_one)        /* 0  u>=        => drop -1        */ \
        x(zero, _continue_if0_, /*=>*/ _continue_)           /* 0 (cont..if0) => (continue)     */ \
        x(zero, _until_, /*=>*/ _again_)                     /* 0  (until)    => (again)        */ \
        x(zero, xor/*=>*/)                                   /* 0  xor        =>                */ \
        x(one, times /*=>*/)                                 /* 1  *          =>                */ \
        x(one, plus, /*=>*/ one_plus)                        /* 1  +          => 1+             */ \
        x(one, minus, /*=>*/ one_minus)                      /* 1  -          => 1-             */ \
        x(one, div /*=>*/)                                   /* 1  /          =>                */ \
        x(one, div_mod, /*=>*/ drop, zero)                   /* 1  /mod       => drop 0         */ \
        x(one, ne, /*=>*/ one_minus, zero_ne)                /* 1  <>         => 1- 0<>         */ \
        x(one, equal, /*=>*/ one_minus, zero_equal)          /* 1  =          => 1- 0=          */ \
        x(one, two_roll, /*=>*/ two_swap)                    /* 1  2roll      => 2swap          */ \
        x(one, minus_two_roll, /*=>*/ two_swap)              /* 1  -2roll     => 2swap          */ \
        x(one, lshift, /*=>*/ two_times)                     /* 1  lshift     => 2*             */ \
        x(one, mod /*=>*/)                                   /* 1  mod        => drop 0         */ \
        x(one, pick, /*=>*/ over)                            /* 1  pick       => over           */ \
        x(one, roll, /*=>*/ swap)                            /* 1  roll       => swap           */ \
        x(one, minus_roll, /*=>*/ swap)                      /* 1  -roll      => swap           */ \
        x(one, rshift, /*=>*/ two_div)                       /* 1  rshift     => 2/             */ \
        x(one, _continue_if_, /*=>*/ _continue_)             /* 1  (cont..if) => (continue)  */    \
        x(one, _until0_, /*=>*/ _again_)                     /* 1  (until0)   => (again)        */ \
        x(one_plus, two_minus, /*=>*/ one_minus)             /* 1+ 2-         => 1-             */ \
        x(one_plus, one_minus /*=>*/)                        /* 1+ 1-         =>                */ \
        x(one_plus, one_plus, /*=>*/ two_plus)               /* 1+ 1+         => 2+             */ \
        /*x(one_plus, zero_less_equal, => zero_less)*/       /* 1+ 0<=        => 0<   OVERFLOW! */ \
        /*x(one_plus, zero_more, => zero_more_equal)*/       /* 1+ 0>         => 0>=  OVERFLOW! */ \
        x(one_plus, negate, /*=>*/ invert)                   /* 1+ negate     => invert         */ \
        x(one_minus, one_minus, /*=>*/ two_minus)            /* 1- 1-         => 2-             */ \
        x(one_minus, one_plus /*=>*/)                        /* 1- 1+         =>                */ \
        x(one_minus, two_plus, /*=>*/ one_plus)              /* 1- 2+         => 1+             */ \
        /*x(one_plus, zero_less, => zero_less_equal)*/       /* 1- 0<         => 0<=  OVERFLOW! */ \
        /*x(one_plus, zero_more_equal, => zero_more)*/       /* 1- 0>=        => 0>   OVERFLOW! */ \
        x(one_minus, invert, /*=>*/ negate)                  /* 1- invert     => negate         */ \
        x(two, times, /*=>*/ two_times)                      /* 2  *          => 2*             */ \
        x(two, plus, /*=>*/ two_plus)                        /* 2  +          => 2+             */ \
        x(two, minus, /*=>*/ two_minus)                      /* 2  -          => 2-             */ \
        x(two, div, /*=>*/ two_sm_div)                       /* 2  /          => 2sm/           */ \
        x(two, ne, /*=>*/ two_minus, zero_ne)                /* 2  <>         => 2- 0<>         */ \
        x(two, equal, /*=>*/ two_minus, zero_equal)          /* 2  =          => 2- 0=          */ \
        x(two, two_roll, /*=>*/ two_rot)                     /* 2  2roll      => 2rot           */ \
        x(two, minus_two_roll, /*=>*/ minus_two_rot)         /* 2  -2roll     => -2rot          */ \
        x(two, lshift, /*=>*/ four_times)                    /* 2  lshift     => 4*             */ \
        x(two, pick, /*=>*/ hop)                             /* 2  pick       => hop            */ \
        x(two, roll, /*=>*/ rot)                             /* 2  roll       => rot            */ \
        x(two, minus_roll, /*=>*/ minus_rot)                 /* 2  -roll      => -rot           */ \
        x(two, rshift, /*=>*/ four_div)                      /* 2  rshift     => 4/             */ \
        /*x(two_times, eight_sm_div, => four_sm_div)*/       /* 2* 8sm/       => 4sm/ OVERFLOW! */ \
        /*x(two_times, four_sm_div, => two_sm_div)*/         /* 2* 4sm/       => 2sm/ OVERFLOW! */ \
        /*x(two_times, two_sm_div => )*/                     /* 2* 2sm/       =>      OVERFLOW! */ \
        x(two_times, two_times, /*=>*/ four_times)           /* 2* 2*         => 4*             */ \
        x(two_times, four_times, /*=>*/ eight_times)         /* 2* 4*         => 8*             */ \
        x(two_plus, four_minus, /*=>*/ two_minus)            /* 2+ 4-         => 2-             */ \
        x(two_plus, two_minus /*=>*/)                        /* 2+ 2-         =>                */ \
        x(two_plus, one_minus, /*=>*/ one_plus)              /* 2+ 1-         => 1+             */ \
        x(two_plus, two_plus, /*=>*/ four_plus)              /* 2+ 2+         => 4+             */ \
        x(two_minus, two_minus, /*=>*/ four_minus)           /* 2- 2-         => 4-             */ \
        x(two_minus, one_plus, /*=>*/ one_minus)             /* 2- 1+         => 1-             */ \
        x(two_minus, two_plus /*=>*/)                        /* 2- 2+         =>                */ \
        x(two_minus, four_plus, /*=>*/ two_plus)             /* 2- 4+         => 2+             */ \
        x(two_div, four_div, /*=>*/ eight_div)               /* 2/ 4/         => 8/             */ \
        x(two_div, two_div, /*=>*/ four_div)                 /* 2/ 2/         => 4/             */ \
        x(two_sm_div, four_sm_div, /*=>*/ eight_sm_div)      /* 2sm/ 4sm/     => 8sm/           */ \
        x(two_sm_div, two_sm_div, /*=>*/ four_sm_div)        /* 2sm/ 2sm/     => 4sm/           */ \
        x(three, drop /*=>*/)                                /* 3  drop => OPTIMIZES 2over drop */ \
        x(three, lshift, /*=>*/ eight_times)                 /* 3  lshift     => 8*             */ \
        x(three, rshift, /*=>*/ eight_div)                   /* 3  lshift     => 8/             */ \
        x(four, times, /*=>*/ four_times)                    /* 4  *          => 4*             */ \
        x(four, plus, /*=>*/ four_plus)                      /* 4  +          => 4+             */ \
        x(four, minus, /*=>*/ four_minus)                    /* 4  -          => 4-             */ \
        x(four, div, /*=>*/ four_sm_div)                     /* 4  /          => 4sm/           */ \
        x(four, ne, /*=>*/ four_minus, zero_ne)              /* 4  <>         => 4- 0<>         */ \
        x(four, equal, /*=>*/ four_minus, zero_equal)        /* 4  =          => 4- 0=          */ \
        /*x(four_times, eight_sm_div, => two_sm_div)*/       /* 4* 8sm/       => 2sm/ OVERFLOW! */ \
        /*x(four_times, four_sm_div => )*/                   /* 4* 4sm/       =>      OVERFLOW! */ \
        /*x(four_times, two_sm_div, => eight_times)*/        /* 4* 2sm/       => 2*   OVERFLOW! */ \
        x(four_times, two_times, /*=>*/ eight_times)         /* 4* 2*         => 8*             */ \
        x(four_plus, eight_minus, /*=>*/ four_minus)         /* 4+ 8-         => 4-             */ \
        x(four_plus, four_minus /*=>*/)                      /* 4+ 4-         =>                */ \
        x(four_plus, two_minus, /*=>*/ two_plus)             /* 4+ 2-         => 2+             */ \
        x(four_plus, four_plus, /*=>*/ eight_plus)           /* 4+ 4+         => 8+             */ \
        x(four_minus, four_minus, /*=>*/ eight_minus)        /* 4- 4-         => 8-             */ \
        x(four_minus, two_plus, /*=>*/ two_minus)            /* 4- 2+         => 2-             */ \
        x(four_minus, four_plus /*=>*/)                      /* 4- 4+         =>                */ \
        x(four_minus, eight_plus, /*=>*/ four_plus)          /* 4- 8+         => 4+             */ \
        x(four_div, two_div, /*=>*/ four_div)                /* 4/ 2/         => 8/             */ \
        x(four_sm_div, two_sm_div, /*=>*/ four_sm_div)       /* 4sm/ 2sm/     => 8sm/           */ \
        x(eight, times, /*=>*/ eight_times)                  /* 8  *          => 8*             */ \
        x(eight, plus, /*=>*/ eight_plus)                    /* 8  +          => 8+             */ \
        x(eight, minus, /*=>*/ eight_minus)                  /* 8  -          => 8-             */ \
        x(eight, div, /*=>*/ eight_sm_div)                   /* 8  /          => 8sm/           */ \
        x(eight, ne, /*=>*/ eight_minus, zero_ne)            /* 8  <>         => 8- 0<>         */ \
        x(eight, equal, /*=>*/ eight_minus, zero_equal)      /* 8  =          => 8- 0=          */ \
        /*x(eight_times, eight_sm_div => )*/                 /* 8* 8sm/       =>      OVERFLOW! */ \
        /*x(eight_times, four_sm_div, => two_times)*/        /* 8* 4sm/       => 2*   OVERFLOW! */ \
        /*x(eight_times, two_sm_div, => four_times)*/        /* 8* 2sm/       => 4*   OVERFLOW! */ \
        x(eight_plus, eight_minus /*=>*/)                    /* 8+ 8-         =>                */ \
        x(eight_plus, four_minus, /*=>*/ four_plus)          /* 8+ 4-         => 4+             */ \
        x(eight_minus, four_plus, /*=>*/ four_minus)         /* 8- 4+         => 4-             */ \
        x(eight_minus, eight_plus /*=>*/)                    /* 8- 8+         =>                */ \
        /*____ 0<=>  0<  _____ redundant 0< ______________*/ /*                                 */ \
        x(zero_less, zero_less, /*=>*/ zero_less)            /* 0<    0<      => 0<             */ \
        x(zero_less_equal, zero_less, /*=>*/ zero_less)      /* 0<=   0<      => 0<=            */ \
        x(zero_ne, zero_less, /*=>*/ zero_less)              /* 0<>   0<      => 0<>            */ \
        x(zero_equal, zero_less, /*=>*/ zero_less)           /* 0=    0<      => 0=             */ \
        x(zero_more, zero_less, /*=>*/ zero_less)            /* 0>    0<      => 0>             */ \
        x(zero_more_equal, zero_less, /*=>*/ zero_less)      /* 0>=   0<      => 0>=            */ \
        /*____ 0<=>  0<= _____ always -1 _________________*/ /*                                 */ \
        x(zero_less, zero_less_equal, /*=>*/ drop, minus_one) /*       0<  0<= => drop -1       */ \
        x(zero_less_equal, zero_less_equal, /*=>*/ drop, minus_one) /* 0<= 0<= => drop -1       */ \
        x(zero_ne, zero_less_equal, /*=>*/ drop, minus_one)         /* 0<> 0<= => drop -1       */ \
        x(zero_equal, zero_less_equal, /*=>*/ drop, minus_one) /*      0=  0<= => drop -1       */ \
        x(zero_more, zero_less_equal, /*=>*/ drop, minus_one)  /*      0>  0<= => drop -1       */ \
        x(zero_more_equal, zero_less_equal, /*=>*/ drop, minus_one) /* 0>= 0<= => drop -1       */ \
        /*____ 0<=>  0<> _____ redundant 0<> _____________*/ /*                                 */ \
        x(zero_less, zero_ne, /*=>*/ zero_less)              /* 0<    0<>     => 0<             */ \
        x(zero_less_equal, zero_ne, /*=>*/ zero_less)        /* 0<=   0<>     => 0<=            */ \
        x(zero_ne, zero_ne, /*=>*/ zero_ne)                  /* 0<>   0<>     => 0<>            */ \
        x(zero_equal, zero_ne, /*=>*/ zero_equal)            /* 0=    0<>     => 0=             */ \
        x(zero_more, zero_ne, /*=>*/ zero_more)              /* 0>    0<>     => 0>             */ \
        x(zero_more_equal, zero_ne, /*=>*/ zero_more_equal)  /* 0>=   0<>     => 0>=            */ \
        /*____ 0<=>  0=  _____ inverts first word ________*/ /*                                 */ \
        x(zero_less, zero_equal, /*=>*/ zero_more_equal)     /* 0<    0=      => 0>=            */ \
        x(zero_less_equal, zero_equal, /*=>*/ zero_more)     /* 0<=   0=      => 0>             */ \
        x(zero_ne, zero_equal, /*=>*/ zero_equal)            /* 0<>   0=      => 0=             */ \
        x(zero_equal, zero_equal, /*=>*/ zero_ne)            /* 0=    0=      => 0<>            */ \
        x(zero_more, zero_equal, /*=>*/ zero_less_equal)     /* 0>    0=      => 0<=            */ \
        x(zero_more_equal, zero_equal, /*=>*/ zero_less)     /* 0>=   0=      => 0<             */ \
        /*____ 0<=>  0>  _____ always zero ______________*/  /*                                 */ \
        x(zero_less, zero_more, /*=>*/ drop, zero)           /* 0<    0>      => drop 0         */ \
        x(zero_less_equal, zero_more, /*=>*/ drop, zero)     /* 0<=   0>      => drop 0         */ \
        x(zero_ne, zero_more, /*=>*/ drop, zero)             /* 0<>   0>      => drop 0         */ \
        x(zero_equal, zero_more, /*=>*/ drop, zero)          /* 0=    0>      => drop 0         */ \
        x(zero_more, zero_more, /*=>*/ drop, zero)           /* 0>    0>      => drop 0         */ \
        x(zero_more_equal, zero_more, /*=>*/ drop, zero)     /* 0>=   0>      => drop 0         */ \
        /*____ 0<=>  0>= _____ inverts first word ________*/ /*                                 */ \
        x(zero_less, zero_more_equal, /*=>*/ zero_more_equal) /* 0<   0>=     => 0>=            */ \
        x(zero_less_equal, zero_more_equal, /*=>*/ zero_more) /* 0<=  0>=     => 0>             */ \
        x(zero_ne, zero_more_equal, /*=>*/ zero_equal)        /* 0<>  0>=     => 0=             */ \
        x(zero_equal, zero_more_equal, /*=>*/ zero_ne)        /* 0=   0>=     => 0<>            */ \
        x(zero_more, zero_more_equal, /*=>*/ zero_less_equal) /* 0>   0>=     => 0<=            */ \
        x(zero_more_equal, zero_more_equal, /*=>*/ zero_less) /* 0>=  0>=     => 0<             */ \
        /*____ 0<=>  (if...),(while...) __________________*/ /*                                 */ \
        x(zero_ne, _if_, /*=>*/ _if_)                        /* 0<>  (if)     => (if)           */ \
        x(zero_equal, _if_, /*=>*/ _if0_)                    /* 0=   (if)     => (if0)          */ \
        x(zero_ne, _if0_, /*=>*/ _if0_)                      /* 0<>  (if0)    => (if0)          */ \
        x(zero_equal, _if0_, /*=>*/ _if_)                    /* 0=   (if0)    => (if)           */ \
        x(zero_equal, _continue_if_, /*=>*/ _continue_if0_)  /* 0= (cont..if) => (cont..if0)    */ \
        x(zero_equal, _continue_if0_, /*=>*/ _continue_if_)  /* 0= (cont..if0)=> (cont..if)     */ \
        x(zero_ne, _until_, /*=>*/ _until_)                  /* 0<>  (until)  => (until)        */ \
        x(zero_equal, _until_, /*=>*/ _until0_)              /* 0=   (until)  => (until0)       */ \
        x(zero_ne, _until0_, /*=>*/ _until0_)                /* 0<>  (until0) => (until0)       */ \
        x(zero_equal, _until0_, /*=>*/ _until_)              /* 0=   (until0) => (until)        */ \
        x(zero_ne, _while_, /*=>*/ _while_)                  /* 0<>  (while)  => (while)        */ \
        x(zero_equal, _while_, /*=>*/ _while0_)              /* 0=   (while)  => (while0)       */ \
        x(zero_ne, _while0_, /*=>*/ _while0_)                /* 0<>  (while0) => (while0)       */ \
        x(zero_equal, _while0_, /*=>*/ _while_)              /* 0=   (while0) => (while)        */ \
        /*____ 0<=>  invert ______________________________*/ /*                                 */ \
        x(zero_less, invert, /*=>*/ zero_more_equal)         /* 0<    invert  => 0>=            */ \
        x(zero_less_equal, invert, /*=>*/ zero_more)         /* 0<=   invert  => 0>             */ \
        x(zero_ne, invert, /*=>*/ zero_equal)                /* 0<>   invert  => 0=             */ \
        x(zero_equal, invert, /*=>*/ zero_ne)                /* 0=    invert  => 0<>            */ \
        x(zero_more, invert, /*=>*/ zero_less_equal)         /* 0>    invert  => 0<=            */ \
        x(zero_more_equal, invert, /*=>*/ zero_less)         /* 0>=   invert  => 0<             */ \
        /*________________________________________________*/ /*                                 */ \
        x(times, negate, /*=>*/ negate, times)               /* *     negate  => negate *       */ \
        x(div, negate, /*=>*/ negate, div)                   /* /     negate  => negate /       */ \
        x(div_mod, drop, /*=>*/ div)                         /* /mod  drop    => /              */ \
        x(div_mod, nip, /*=>*/ mod)                          /* /mod  nip     => mod            */ \
        /*____ <=>  invert _______________________________*/ /*                                 */ \
        x(less, invert, /*=>*/ more_equal)                   /* <     invert  => >=             */ \
        x(less_equal, invert, /*=>*/ more)                   /* <=    invert  => >              */ \
        x(ne, invert, /*=>*/ equal)                          /* <>    invert  => =              */ \
        x(equal, invert, /*=>*/ ne)                          /* =     invert  => <>             */ \
        x(more, invert, /*=>*/ less_equal)                   /* >     invert  => <=             */ \
        x(more_equal, invert, /*=>*/ less)                   /* >=    invert  => <              */ \
        /*____ <=>  0< ___________________________________*/ /*                                 */ \
        x(less, zero_less, /*=>*/ less)                      /* <     0<      => <              */ \
        x(less_equal, zero_less, /*=>*/ less_equal)          /* <=    0<      => <=             */ \
        x(ne, zero_less, /*=>*/ ne)                          /* <>    0<      => <>             */ \
        x(equal, zero_less, /*=>*/ equal)                    /* =     0<      => =              */ \
        x(more, zero_less, /*=>*/ more)                      /* >     0<      => >              */ \
        x(more_equal, zero_less, /*=>*/ more_equal)          /* >=    0<      => >=             */ \
        /*____ <=>  0<= __________________________________*/ /*                                 */ \
        x(less, zero_less_equal, /*=>*/ drop, drop, minus_one) /*       <  0<=  => 2drop -1     */ \
        x(less_equal, zero_less_equal, /*=>*/ drop, drop, minus_one) /* <= 0<=  => 2drop -1     */ \
        x(ne, zero_less_equal, /*=>*/ drop, drop, minus_one)         /* <> 0<=  => 2drop -1     */ \
        x(equal, zero_less_equal, /*=>*/ drop, drop, minus_one) /*      =  0<=  => 2drop -1     */ \
        x(more, zero_less_equal, /*=>*/ drop, drop, minus_one)  /*      >  0<=  => 2drop -1     */ \
        x(more_equal, zero_less_equal, /*=>*/ drop, drop, minus_one) /* >= 0<=  => 2drop -1     */ \
        /*____ <=>  0<> __________________________________*/ /*                                 */ \
        x(less, zero_ne, /*=>*/ less)                        /* <    0<>      => <              */ \
        x(less_equal, zero_ne, /*=>*/ less_equal)            /* <=   0<>      => <=             */ \
        x(ne, zero_ne, /*=>*/ ne)                            /* <>   0<>      => <>             */ \
        x(equal, zero_ne, /*=>*/ equal)                      /* =    0<>      => =              */ \
        x(more, zero_ne, /*=>*/ more)                        /* >    0<>      => >              */ \
        x(more_equal, zero_ne, /*=>*/ more_equal)            /* >=   0<>      => >=             */ \
        /*____ <=>  0= ___________________________________*/ /*                                 */ \
        x(less, zero_equal, /*=>*/ more_equal)               /* <    0=       => >=             */ \
        x(less_equal, zero_equal, /*=>*/ more)               /* <=   0=       => >              */ \
        x(ne, zero_equal, /*=>*/ equal)                      /* <>   0=       => =              */ \
        x(equal, zero_equal, /*=>*/ ne)                      /* =    0=       => <>             */ \
        x(more, zero_equal, /*=>*/ less_equal)               /* >    0=       => <=             */ \
        x(more_equal, zero_equal, /*=>*/ less)               /* >=   0=       => <              */ \
        /*____ <=>  0> ___________________________________*/ /*                                 */ \
        x(less, zero_more, /*=>*/ drop, drop, zero)          /* <    0>       => 2drop 0       */  \
        x(less_equal, zero_more, /*=>*/ drop, drop, zero)    /* <=   0>       => 2drop 0       */  \
        x(ne, zero_more, /*=>*/ drop, drop, zero)            /* <>   0>       => 2drop 0       */  \
        x(equal, zero_more, /*=>*/ drop, drop, zero)         /* =    0>       => 2drop 0       */  \
        x(more, zero_more, /*=>*/ drop, drop, zero)          /* >    0>       => 2drop 0       */  \
        x(more_equal, zero_more, /*=>*/ drop, drop, zero)    /* >=   0>       => 2drop 0       */  \
        /*____ <=>  0>= __________________________________*/ /*                                 */ \
        x(ne, zero_more_equal, /*=>*/ equal)                 /* <>   0>=      => =              */ \
        x(less, zero_more_equal, /*=>*/ more_equal)          /* <    0>=      => >=             */ \
        x(less_equal, zero_more_equal, /*=>*/ more)          /* <=   0>=      => >              */ \
        x(equal, zero_more_equal, /*=>*/ ne)                 /* =    0>=      => <>             */ \
        x(more, zero_more_equal, /*=>*/ less_equal)          /* >    0>=      => <=             */ \
        x(more_equal, zero_more_equal, /*=>*/ less)          /* >=   0>=      => <              */ \
        /*____ u<=>  invert ______________________________*/ /*                                 */ \
        x(u_less, invert, /*=>*/ u_more_equal)               /* u<   invert   => u>=            */ \
        x(u_less_equal, invert, /*=>*/ u_more)               /* u<=  invert   => u>             */ \
        x(u_more, invert, /*=>*/ u_less_equal)               /* u>   invert   => u<=            */ \
        x(u_more_equal, invert, /*=>*/ u_less)               /* u>=  invert   => u<             */ \
        /*_____2... ______________________________________*/ /*                                 */ \
        x(two_to_r, two_r_from /*=>*/)                       /* 2>r   2r>     =>                */ \
        x(two_over, nip, /*=>*/ hop)                         /* 2over nip     => hop            */ \
        x(two_over, drop, /*=>*/ three, pick)                /* 2over drop    => 3 pick         */ \
        x(two_over, two_nip, /*=>*/ drop, drop, two_dup)     /* 2over 2nip    => 2drop 2dup     */ \
        x(two_r_from, two_to_r /*=>*/)                       /* 2r>   2>r     =>                */ \
        x(two_r_from, drop, /*=>*/ r_from_drop, r_from)      /* 2r>   drop    => r>drop r>      */ \
        x(two_r_fetch, drop, /*=>*/ r2nd_fetch)              /* 2r@   drop    => r2nd@          */ \
        x(two_r_fetch, nip, /*=>*/ r_fetch)                  /* 2r@   nip     => r@             */ \
        x(two_rot, two_nip, /*=>*/ two_drop, two_swap)       /* 2rot  2nip    => 2drop 2swap    */ \
        x(two_rot, two_rot, /*=>*/ minus_two_rot)            /* 2rot  2rot    => -2rot          */ \
        x(two_rot, minus_two_rot /*=>*/)                     /* 2rot  -2rot   =>                */ \
        x(minus_two_rot, two_rot /*=>*/)                     /* -2rot 2rot    =>                */ \
        x(minus_two_rot, minus_two_rot, /*=>*/ two_rot)      /* -2rot -2rot   => 2rot           */ \
        x(two_swap, two_nip, /*=>*/ drop, drop)              /* 2swap 2nip    => 2drop          */ \
        x(two_swap, two_swap /*=>*/)                         /* 2swap 2swap   =>                */ \
        /*________________________________________________*/ /*                                 */ \
        x(to_r, r_fetch, /*=>*/ dup_to_r)                    /* >r   r@       => dup>r          */ \
        x(to_r, r_from /*=>*/)                               /* >r   r>       =>                */ \
        x(plus, negate, /*=>*/ negate, sub)                  /* +    negate   => negate sub     */ \
        x(minus, negate, /*=>*/ sub)                         /* -    negate   => sub            */ \
        x(fetch, drop, /*=>*/ drop)                          /* @    drop     => drop           */ \
        /*________________________________________________*/ /*                                 */ \
        x(align, align, /*=>*/ align)               /* align             align =>       align  */  \
        x(align, int_align, /*=>*/ align)           /* align         int-align =>       align  */  \
        x(align, short_align, /*=>*/ align)         /* align       short-align =>       align  */  \
        x(int_align, align, /*=>*/ align)           /* int-align         align =>       align  */  \
        x(int_align, int_align, /*=>*/ int_align)   /* int-align     int-align =>   int-align  */  \
        x(int_align, short_align, /*=>*/ int_align) /* int-align   short-align =>   int-align  */  \
        x(short_align, align, /*=>*/ align)         /* short-align       align =>       align  */  \
        x(short_align, int_align, /*=>*/ int_align) /* short-align   int-align =>   int-align  */  \
        x(short_align, short_align, /*=>*/ short_align) /* short-a.. short-a.. =>   short-a..  */  \
        /*________________________________________________*/ /*                                 */ \
        x(aligned, aligned, /*=>*/ aligned)                  /*   aligned   aligned =>  aligned */ \
        x(aligned, int_aligned, /*=>*/ aligned)              /*   aligned   int-a.. =>  aligned */ \
        x(aligned, short_aligned, /*=>*/ aligned)            /*   aligned short-a.. =>  aligned */ \
        x(int_aligned, aligned, /*=>*/ aligned)              /*   int-a..   aligned =>  aligned */ \
        x(int_aligned, int_aligned, /*=>*/ int_aligned)      /*   int-a..   int-a.. =>  int-a.. */ \
        x(int_aligned, short_aligned, /*=>*/ int_aligned)    /*   int-a.. short-a.. =>  int-a.. */ \
        x(short_aligned, aligned, /*=>*/ aligned)            /* short-a..   aligned =>  aligned */ \
        x(short_aligned, int_aligned, /*=>*/ int_aligned)    /* short-a..   int-a.. =>  int-a.. */ \
        x(short_aligned, short_aligned, /*=>*/ short_aligned) /*short-a.. short-a.. => short-a..*/ \
        /*________________________________________________*/ /*                                 */ \
        x(abs, zero_ne, /*=>*/ zero_ne)                      /* abs  0<>      => 0<>            */ \
        x(abs, zero_equal, /*=>*/ zero_equal)                /* abs  0=       => 0=             */ \
        x(abs, abs, /*=>*/ abs)                              /* abs  abs      => abs            */ \
        x(abs, squared, /*=>*/ squared)                      /* abs  squared  => squared        */ \
        x(c_fetch, drop, /*=>*/ drop)                        /* c@   drop     => drop           */ \
        x(case, endcase, /*=>*/ drop)                        /* case endcase  => drop           */ \
        x(drop, _lx_, /*=>*/ _drop_lx_)                      /* drop (lx)     => (drop&lx)      */ \
        x(dup, _if_, /*=>*/ _q_if_)                          /* dup  (if)     => (?if)          */ \
        x(dup, _if0_, /*=>*/ _q_if0_)                        /* dup  (if0)    => (?if0)         */ \
        x(dup, _continue_if_, /*=>*/ _q_continue_if_)        /* dup (cont..if)=> (?cont..if)    */ \
        x(dup, _continue_if0_, /*=>*/ _q_continue_if0_)      /* dup (cont..if0)=>(?cont..if0)   */ \
        x(dup, _to_lx_, /*=>*/ _dup_to_lx_)                  /* dup  (>lx)    => (dup>lx)       */ \
        x(dup, _until_, /*=>*/ _q_until_)                    /* dup  (until)  => (?until)       */ \
        x(dup, _until0_, /*=>*/ _q_until0_)                  /* dup  (until0) => (?until0)      */ \
        x(dup, _while_, /*=>*/ _q_while_)                    /* dup  (while)  => (?while)       */ \
        x(dup, _while0_, /*=>*/ _q_while0_)                  /* dup  (while0) => (?while0)      */ \
        x(dup, times, /*=>*/ squared)                        /* dup  *        => squared        */ \
        x(dup, plus, /*=>*/ two_times)                       /* dup  +        => 2*             */ \
        x(dup, minus, /*=>*/ drop, zero)                     /* dup  -        => drop 0         */ \
        x(dup, div, /*=>*/ drop, one)                        /* dup  /        => drop 1   0/0!  */ \
        x(dup, less, /*=>*/ drop, zero)                      /* dup  <        => drop 0         */ \
        x(dup, less_equal, /*=>*/ drop, minus_one)           /* dup  <=       => drop -1        */ \
        x(dup, ne, /*=>*/ drop, zero)                        /* dup  <>       => drop 0         */ \
        x(dup, equal, /*=>*/ drop, minus_one)                /* dup  =        => drop -1        */ \
        x(dup, more, /*=>*/ drop, zero)                      /* dup  >        => drop 0         */ \
        x(dup, more_equal, /*=>*/ drop, minus_one)           /* dup  >=       => drop -1        */ \
        x(dup, to_r, /*=>*/ dup_to_r)                        /* dup  >r       => dup>r          */ \
        x(dup, and/*=>*/)                                    /* dup  and      =>                */ \
        x(dup, drop /*=>*/)                                  /* dup  drop     =>                */ \
        x(dup, max /*=>*/)                                   /* dup  max      =>                */ \
        x(dup, min /*=>*/)                                   /* dup  min      =>                */ \
        x(dup, mod, /*=>*/ drop, zero)                       /* dup  mod      => drop 0         */ \
        x(dup, nip /*=>*/)                                   /* dup  nip      =>                */ \
        x(dup, or /*=>*/)                                    /* dup  or       =>                */ \
        x(dup, over, /*=>*/ dup, dup)                        /* dup  over     => dup  dup       */ \
        x(dup, u_less, /*=>*/ drop, zero)                    /* dup  u<       => drop 0         */ \
        x(dup, u_less_equal, /*=>*/ drop, minus_one)         /* dup  u<=      => drop -1        */ \
        x(dup, u_more, /*=>*/ drop, zero)                    /* dup  u>       => drop 0         */ \
        x(dup, u_more_equal, /*=>*/ drop, minus_one)         /* dup  u>=      => drop -1        */ \
        x(dup, minus_rot, /*=>*/ tuck)                       /* dup  -rot     => tuck           */ \
        x(dup, rot, /*=>*/ dup, flip)                        /* dup  rot      => dup  flip      */ \
        x(dup, sub, /*=>*/ drop, zero)                       /* dup  sub      => drop 0         */ \
        x(dup, swap, /*=>*/ dup)                             /* dup  swap     => dup            */ \
        x(dup, trail, /*=>*/ dup, dup)                       /* dup  trail    => dup  dup       */ \
        x(dup, tuck, /*=>*/ dup, dup)                        /* dup  tuck     => dup  dup       */ \
        x(dup, xor, /*=>*/ drop, zero)                       /* dup  xor      => drop 0         */ \
        x(flip, flip /*=>*/)                                 /* flip flip     =>                */ \
        x(flip, nip, /*=>*/ nip, swap)                       /* flip nip      => nip swap       */ \
        x(flip, minus_rot, /*=>*/ swap)                      /* flip -rot     => swap           */ \
        x(flip, rot, /*=>*/ rot, swap)                       /* flip rot      => rot swap       */ \
        x(flip, swap, /*=>*/ minus_rot)                      /* flip swap     => -rot           */ \
        x(hop, drop /*=>*/)                                  /* hop  drop     =>                */ \
        x(hop, nip, /*=>*/ drop, over)                       /* hop  nip      => drop over      */ \
        x(i, drop /*=>*/)                                    /* i    drop     =>                */ \
        x(i, times, /*=>*/ i_times)                          /* i    *        => i*             */ \
        x(i, plus, /*=>*/ i_plus)                            /* i    +        => i+             */ \
        x(i, minus, /*=>*/ i_minus)                          /* i    -        => i-             */ \
        x(i_plus, r_store, /*=>*/ r_plus_store)              /* i+   r!       => r+!            */ \
        x(i, c_fetch, /*=>*/ i_char_fetch)                   /* i    c@       => i-char@        */ \
        x(i, byte_fetch, /*=>*/ i_byte_fetch)                /* i    byte@    => i-byte@        */ \
        x(i, short_fetch, /*=>*/ i_short_fetch)              /* i    short@   => i-short@       */ \
        x(i, ushort_fetch, /*=>*/ i_ushort_fetch)            /* i    ushort@  => i-ushort@      */ \
        x(i, int_fetch, /*=>*/ i_int_fetch)                  /* i    int@     => i-int@         */ \
        x(i, uint_fetch, /*=>*/ i_uint_fetch)                /* i    uint@    => i-uint@        */ \
        x(i, fetch, /*=>*/ i_fetch)                          /* i    @        => i@             */ \
        x(invert, zero_less, /*=>*/ zero_more_equal)         /* invert 0<     => 0>=            */ \
        x(invert, zero_more_equal, /*=>*/ zero_less)         /* invert 0>=    => 0<             */ \
        x(invert, one_plus, /*=>*/ negate)                   /* invert 1+     => negate         */ \
        x(invert, invert /*=>*/)                             /* invert invert =>                */ \
        x(invert, negate, /*=>*/ one_plus)                   /* invert negate => 1+             */ \
        x(_ip_, drop /*=>*/)                                 /* (ip)      drop =>               */ \
        x(_ip_to_data_, drop, /*=>*/ _ip_to_data_addr_)      /* (ip>data) drop => (ip>data>addr)*/ \
        x(_ip_to_data_addr_, drop /*=>*/)                    /* (ip>data>addr) drop  =>         */ \
        x(name_to_data, drop, /*=>*/ name_to_data_addr)      /*(name>data) drop=> (name>..>addr)*/ \
        x(name_to_data_addr, drop /*=>*/)                    /* (name>data>addr) drop  =>       */ \
        x(negate, _if_, /*=>*/ _if_)                         /* negate (if)     => (if)         */ \
        x(negate, _if0_, /*=>*/ _if0_)                       /* negate (if0)    => (if0)        */ \
        x(negate, _continue_if_, /*=>*/ _continue_if_)       /*negate (cont..if)  => (cont..if) */ \
        x(negate, _continue_if0_, /*=>*/ _continue_if0_)     /*negate (cont..if0) => (cont..if0)*/ \
        x(negate, _until_, /*=>*/ _until_)                   /* negate (until)  => (until)      */ \
        x(negate, _until0_, /*=>*/ _until0_)                 /* negate (until0) => (until0)     */ \
        x(negate, _while_, /*=>*/ _while_)                   /* negate (while)  => (while)      */ \
        x(negate, _while0_, /*=>*/ _while0_)                 /* negate (while0) => (while0)     */ \
        x(negate, plus, /*=>*/ minus)                        /* negate +      => -              */ \
        x(negate, minus, /*=>*/ plus)                        /* negate -      => +              */ \
        x(negate, one_minus, /*=>*/ invert)                  /* negate 1-     => invert         */ \
        /*x(negate, zero_less, => zero_more)*/               /* negate 0<     => 0>  OVERFLOW!  */ \
        /*x(negate, zero_less_equal, => zero_more_equal)*/   /* negate 0<=    => 0>= OVERFLOW!  */ \
        x(negate, zero_ne, /*=>*/ zero_ne)                   /* negate 0<>    => 0<>            */ \
        x(negate, zero_equal, /*=>*/ zero_equal)             /* negate 0=     => 0=             */ \
        /*x(negate, zero_more, => zero_less)*/               /* negate 0>     => 0<  OVERFLOW!  */ \
        /*x(negate, zero_more_equal, => zero_less_equal)*/   /* negate 0>=    => 0<= OVERFLOW!  */ \
        x(negate, abs, /*=>*/ abs)                           /* negate abs    => abs            */ \
        x(negate, negate /*=>*/)                             /* negate negate =>                */ \
        x(negate, invert, /*=>*/ one_minus)                  /* negate invert => 1-             */ \
        x(negate, squared, /*=>*/ squared)                   /* negate squared => squared       */ \
        x(over, plus, /*=>*/ bounds, swap)                   /* over   +      => bounds swap    */ \
        x(over, minus, /*=>*/ trail, sub)                    /* over   -      => trail sub      */ \
        x(over, drop /*=>*/)                                 /* over   drop   =>                */ \
        x(over, flip, /*=>*/ over)                           /* over   flip   => over           */ \
        x(over, hop, /*=>*/ over, dup)                       /* over   hop    => over dup       */ \
        x(over, nip, /*=>*/ drop, dup)                       /* over   nip    => drop dup       */ \
        x(over, minus_rot, /*=>*/ trail)                     /* over   -rot   => trail          */ \
        x(over, rot, /*=>*/ swap, dup)                       /* over   rot    => swap dup       */ \
        x(over, swap, /*=>*/ trail)                          /* over   swap   => trail          */ \
        x(pick, drop, /*=>*/ drop)                           /* pick   drop   => drop           */ \
        x(r_from, to_r /*=>*/)                               /* r>     >r     =>                */ \
        x(r_from, drop, /*=>*/ r_from_drop)                  /* r>     drop   => r>drop         */ \
        x(r_from_drop, to_r, /*=>*/ r_store)                 /* r>drop >r     => r!             */ \
        x(r_from_drop, r_from_drop, /*=>*/ two_r_from_two_drop) /* r>drop r>drop => 2r>2drop    */ \
        x(rot, flip, /*=>*/ swap)                          /* rot    flip   => swap           */   \
        x(rot, nip, /*=>*/ drop, swap)                     /* rot    nip    => drop swap      */   \
        x(rot, rot, /*=>*/ minus_rot)                      /* rot    rot    => -rot           */   \
        x(rot, minus_rot /*=>*/)                           /* rot    -rot   =>                */   \
        x(minus_rot, drop, /*=>*/ nip, swap)               /* -rot   drop   => nip swap       */   \
        x(minus_rot, nip, /*=>*/ flip, drop)               /* -rot   nip    => flip drop      */   \
        x(minus_rot, over, /*=>*/ flip, tuck)              /* -rot   over   => flip tuck      */   \
        x(minus_rot, rot /*=>*/)                           /* -rot   rot    =>                */   \
        x(minus_rot, minus_rot, /*=>*/ rot)                /* -rot   -rot   => rot            */   \
        x(minus_rot, flip, /*=>*/ swap, minus_rot)         /* -rot   flip   => swap -rot      */   \
        x(sub, negate, /*=>*/ minus)                       /* sub  negate   => -              */   \
        x(state, fetch, /*=>*/ state_fetch)                /* state  @      => state@         */   \
        x(swap, times, /*=>*/ times)                       /* swap   *      => *              */   \
        x(swap, plus, /*=>*/ plus)                         /* swap   +      => +              */   \
        x(swap, minus, /*=>*/ sub)                         /* swap   -      => sub            */   \
        x(swap, less, /*=>*/ more)                         /* swap   <      => >              */   \
        x(swap, less_equal, /*=>*/ more_equal)             /* swap   <=     => >=             */   \
        x(swap, ne, /*=>*/ ne)                             /* swap   <>     => <>             */   \
        x(swap, equal, /*=>*/ equal)                       /* swap   =      => =              */   \
        x(swap, flip, /*=>*/ rot)                          /* swap   flip   => rot            */   \
        x(swap, more, /*=>*/ less_equal)                   /* swap   >      => <              */   \
        x(swap, more_equal, /*=>*/ less_equal)             /* swap   >=     => <=             */   \
        x(swap, and, /*=>*/ and)                           /* swap   and    => and            */   \
        x(swap, drop, /*=>*/ nip)                          /* swap   drop   => nip            */   \
        x(swap, max, /*=>*/ max)                           /* swap   max    => max            */   \
        x(swap, min, /*=>*/ min)                           /* swap   min    => min            */   \
        x(swap, nip, /*=>*/ drop)                          /* swap   nip    => drop           */   \
        x(swap, or, /*=>*/ or)                             /* swap   or     => or             */   \
        x(swap, over, /*=>*/ tuck)                         /* swap   over   => tuck           */   \
        x(swap, rot, /*=>*/ flip)                          /* swap   rot    => flip           */   \
        x(swap, sub, /*=>*/ minus)                         /* swap   sub    => -              */   \
        x(swap, swap /*=>*/)                               /* swap   swap   =>                */   \
        x(swap, tuck, /*=>*/ over)                         /* swap   tuck   => over           */   \
        x(swap, u_less, /*=>*/ u_more)                     /* swap   u<     => u>             */   \
        x(swap, u_less_equal, /*=>*/ u_more_equal)         /* swap   u<=    => u>=            */   \
        x(swap, u_more, /*=>*/ u_less)                     /* swap   u>     => u<             */   \
        x(swap, u_more_equal, /*=>*/ u_less_equal)         /* swap   u>=    => u<=            */   \
        x(swap, xor, /*=>*/ xor)                           /* swap   xor    => xor            */   \
        x(trail, plus, /*=>*/ bounds, swap)                /* trail  +      => bounds swap    */   \
        x(trail, drop, /*=>*/ drop, dup)                   /* trail  drop   => drop dup       */   \
        x(trail, nip /*=>*/)                               /* trail  nip    =>                */   \
        x(trail, rot, /*=>*/ over)                         /* trail  rot    => over           */   \
        x(trail, swap, /*=>*/ over)                        /* trail  swap   => over           */   \
        x(trail, tuck, /*=>*/ over, over)                  /* trail  tuck   => over over      */   \
        x(tuck, drop, /*=>*/ swap)                         /* tuck   drop   => swap           */   \
        x(tuck, hop, /*=>*/ tuck, dup)                     /* tuck   hop    => tuck dup       */   \
        x(tuck, nip, /*=>*/ nip, dup)                      /* tuck   nip    => nip dup        */   \
        x(tuck, rot, /*=>*/ dup)                           /* tuck   rot    => dup            */   \
        x(tuck, minus_rot, /*=>*/ dup)                     /* tuck   -rot   => dup            */   \
        x(xor, invert, /*=>*/ invert, xor)                 /* xor    invert => invert xor     */   \
        /* ______________  */                              /*                                 */   \
        x(one_plus, byte_fetch, /*=>*/ byte_fetch_1)       /* 1+    byte@   => byte[1]        */   \
        x(two_plus, byte_fetch, /*=>*/ byte_fetch_2)       /* 2+    byte@   => byte[2]        */   \
        x(four_plus, byte_fetch, /*=>*/ byte_fetch_4)      /* 4+    byte@   => byte[4]        */   \
        x(eight_plus, byte_fetch, /*=>*/ byte_fetch_8)     /* 8+    byte@   => byte[8]        */   \
        x(one_plus, c_fetch, /*=>*/ char_fetch_1)          /* 1+    c@      => char[1]        */   \
        x(two_plus, c_fetch, /*=>*/ char_fetch_2)          /* 2+    c@      => char[2]        */   \
        x(four_plus, c_fetch, /*=>*/ char_fetch_4)         /* 4+    c@      => char[4]        */   \
        x(eight_plus, c_fetch, /*=>*/ char_fetch_8)        /* 8+    c@      => char[8]        */   \
        x(two_plus, short_fetch, /*=>*/ short_fetch_1)     /* 2+    short@  => short[1]       */   \
        x(four_plus, short_fetch, /*=>*/ short_fetch_2)    /* 4+    short@  => short[2]       */   \
        x(eight_plus, short_fetch, /*=>*/ short_fetch_4)   /* 8+    short@  => short[4]       */   \
        x(two_plus, ushort_fetch, /*=>*/ ushort_fetch_1)   /* 2+    ushort@ => ushort[1]      */   \
        x(four_plus, ushort_fetch, /*=>*/ ushort_fetch_2)  /* 4+    ushort@ => ushort[2]      */   \
        x(eight_plus, ushort_fetch, /*=>*/ ushort_fetch_4) /* 8+    ushort@ => ushort[4]      */   \
        x(four_plus, int_fetch, /*=>*/ int_fetch_1)        /* 4+    int@    => int[1]         */   \
        x(eight_plus, int_fetch, /*=>*/ int_fetch_2)       /* 8+    int@    => int[2]         */   \
        x(four_plus, uint_fetch, /*=>*/ uint_fetch_1)      /* 4+    uint@   => uint[1]        */   \
        x(eight_plus, uint_fetch, /*=>*/ uint_fetch_2)     /* 8+    uint@   => uint[2]        */   \
        x(_SZ_plus, fetch, /*=>*/ cell_fetch_1)            /* SZ+   @       => cell[1]        */

#define OPT3_RULES(x)                              /*                                   */         \
    x(r_from, plus, to_r, /*=>*/ r_plus_store)     /* r>     +   >r      => r+!         */         \
        x(_lit_, T(0xff), and, /*=>*/ to_char)     /* 0xff   and         => to-char     */         \
        x(_lit_, T(0xffff), and, /*=>*/ to_ushort) /* 0xffff and         => to-ushort   */         \
        x(two_swap, drop, drop, /*=>*/ two_nip)    /* 2swap  drop drop   => 2nip        */         \
        x(to_r, dup, r_from, /*=>*/ trail)         /* >r     dup  r>     => trail       */         \
        x(to_r, over, r_from, /*=>*/ hop, swap)    /* >r     over r>     => hop  swap   */         \
        x(minus_two_rot, drop, drop, /*=>*/ two_nip, two_swap) /* -2rot 2drop   => 2nip 2swap  */  \
        /* ______________  */                             /*                                   */  \
        x(three, plus, byte_fetch, /*=>*/ byte_fetch_3)   /* 3   +  byte@        => byte[3]    */  \
        x(five, plus, byte_fetch, /*=>*/ byte_fetch_5)    /* 5   +  byte@        => byte[5]    */  \
        x(six, plus, byte_fetch, /*=>*/ byte_fetch_6)     /* 6   +  byte@        => byte[6]    */  \
        x(seven, plus, byte_fetch, /*=>*/ byte_fetch_7)   /* 7   +  byte@        => byte[7]    */  \
        x(three, plus, c_fetch, /*=>*/ char_fetch_3)      /* 3   +  c@           => char[3]    */  \
        x(five, plus, c_fetch, /*=>*/ char_fetch_5)       /* 5   +  c@           => char[5]    */  \
        x(six, plus, c_fetch, /*=>*/ char_fetch_6)        /* 6   +  c@           => char[6]    */  \
        x(seven, plus, c_fetch, /*=>*/ char_fetch_7)      /* 7   +  c@           => char[7]    */  \
        x(six, plus, short_fetch, /*=>*/ short_fetch_3)   /* 6   +  short@       => short[3]   */  \
        x(six, plus, ushort_fetch, /*=>*/ ushort_fetch_3) /* 6   +  ushort@      => ushort[3]  */  \
        /* ______________  */                             /*                                   */  \
        x(over, trail, two_nip, /*=>*/ swap)              /* over   trail 2nip  => swap        */  \
        x(over, trail, two_swap, /*=>*/ tuck, trail)      /* over   trail 2swap => tuck trail  */  \
        x(over, trail, swap, /*=>*/ two_dup)              /* over   trail swap  => 2dup        */  \
        x(over, over, two_to_r, /*=>*/ two_dup_two_to_r)  /* over   over  2>r   => 2dup_2>r    */  \
        x(over, over, two_nip /*=>*/)                     /* over   over  2nip  =>             */  \
        x(over, over, two_over, /*=>*/ two_dup, two_dup)  /* over   over  2over => 2dup 2dup   */  \
        x(over, over, two_swap, /*=>*/ over, over)        /* over   over  2swap => over over   */

/* medium-priority optimizations: they may prevent some of the optimizations above */
#define OPT2_RULES_MIDPRIO(x)                      /*                                 */           \
    /*        local variables       */             /*                                 */           \
    x(_lx_, T(0x0), /*=>*/ _l0_)                   /* (lx) T(0)       => (l0)         */           \
        x(_lx_, T(0x1), /*=>*/ _l1_)               /* (lx) T(1)       => (l1)         */           \
        x(_lx_, T(0x2), /*=>*/ _l2_)               /* (lx) T(2)       => (l2)         */           \
        x(_lx_, T(0x3), /*=>*/ _l3_)               /* (lx) T(3)       => (l3)         */           \
        x(_lx_, T(0x4), /*=>*/ _l4_)               /* (lx) T(4)       => (l4)         */           \
        x(_lx_, T(0x5), /*=>*/ _l5_)               /* (lx) T(5)       => (l5)         */           \
        x(_lx_, T(0x6), /*=>*/ _l6_)               /* (lx) T(6)       => (l6)         */           \
        x(_lx_, T(0x7), /*=>*/ _l7_)               /* (lx) T(7)       => (l7)         */           \
        x(_lx_, T(0x8), /*=>*/ _l8_)               /* (lx) T(8)       => (l8)         */           \
        x(_lx_, T(0x9), /*=>*/ _l9_)               /* (lx) T(9)       => (l9)         */           \
        x(_lx_, T(0xa), /*=>*/ _la_)               /* (lx) T(a)       => (la)         */           \
        x(_lx_, T(0xb), /*=>*/ _lb_)               /* (lx) T(b)       => (lb)         */           \
        x(_lx_, T(0xc), /*=>*/ _lc_)               /* (lx) T(c)       => (lc)         */           \
        x(_lx_, T(0xd), /*=>*/ _ld_)               /* (lx) T(d)       => (ld)         */           \
        x(_lx_, T(0xe), /*=>*/ _le_)               /* (lx) T(e)       => (le)         */           \
        x(_lx_, T(0xf), /*=>*/ _lf_)               /* (lx) T(f)       => (lf)         */           \
        x(_drop_lx_, T(0x0), /*=>*/ _drop_l0_)     /* (drop&lx) T(0)  => (drop&l0)    */           \
        x(_drop_lx_, T(0x1), /*=>*/ _drop_l1_)     /* (drop&lx) T(1)  => (drop&l1)    */           \
        x(_drop_lx_, T(0x2), /*=>*/ _drop_l2_)     /* (drop&lx) T(2)  => (drop&l2)    */           \
        x(_drop_lx_, T(0x3), /*=>*/ _drop_l3_)     /* (drop&lx) T(3)  => (drop&l3)    */           \
        x(_drop_lx_, T(0x4), /*=>*/ _drop_l4_)     /* (drop&lx) T(4)  => (drop&l4)    */           \
        x(_drop_lx_, T(0x5), /*=>*/ _drop_l5_)     /* (drop&lx) T(5)  => (drop&l5)    */           \
        x(_drop_lx_, T(0x6), /*=>*/ _drop_l6_)     /* (drop&lx) T(6)  => (drop&l6)    */           \
        x(_drop_lx_, T(0x7), /*=>*/ _drop_l7_)     /* (drop&lx) T(7)  => (drop&l7)    */           \
        x(_drop_lx_, T(0x8), /*=>*/ _drop_l8_)     /* (drop&lx) T(8)  => (drop&l8)    */           \
        x(_drop_lx_, T(0x9), /*=>*/ _drop_l9_)     /* (drop&lx) T(9)  => (drop&l9)    */           \
        x(_drop_lx_, T(0xa), /*=>*/ _drop_la_)     /* (drop&lx) T(a)  => (drop&la)    */           \
        x(_drop_lx_, T(0xb), /*=>*/ _drop_lb_)     /* (drop&lx) T(b)  => (drop&lb)    */           \
        x(_drop_lx_, T(0xc), /*=>*/ _drop_lc_)     /* (drop&lx) T(c)  => (drop&lc)    */           \
        x(_drop_lx_, T(0xd), /*=>*/ _drop_ld_)     /* (drop&lx) T(d)  => (drop&ld)    */           \
        x(_drop_lx_, T(0xe), /*=>*/ _drop_le_)     /* (drop&lx) T(e)  => (drop&le)    */           \
        x(_drop_lx_, T(0xf), /*=>*/ _drop_lf_)     /* (drop&lx) T(f)  => (drop&lf)    */           \
        x(_to_lx_, T(0x0), /*=>*/ _to_l0_)         /* (>lx) T(0)      => (>l0)        */           \
        x(_to_lx_, T(0x1), /*=>*/ _to_l1_)         /* (>lx) T(1)      => (>l1)        */           \
        x(_to_lx_, T(0x2), /*=>*/ _to_l2_)         /* (>lx) T(2)      => (>l2)        */           \
        x(_to_lx_, T(0x3), /*=>*/ _to_l3_)         /* (>lx) T(3)      => (>l3)        */           \
        x(_to_lx_, T(0x4), /*=>*/ _to_l4_)         /* (>lx) T(4)      => (>l4)        */           \
        x(_to_lx_, T(0x5), /*=>*/ _to_l5_)         /* (>lx) T(5)      => (>l5)        */           \
        x(_to_lx_, T(0x6), /*=>*/ _to_l6_)         /* (>lx) T(6)      => (>l6)        */           \
        x(_to_lx_, T(0x7), /*=>*/ _to_l7_)         /* (>lx) T(7)      => (>l7)        */           \
        x(_to_lx_, T(0x8), /*=>*/ _to_l8_)         /* (>lx) T(8)      => (>l8)        */           \
        x(_to_lx_, T(0x9), /*=>*/ _to_l9_)         /* (>lx) T(9)      => (>l9)        */           \
        x(_to_lx_, T(0xa), /*=>*/ _to_la_)         /* (>lx) T(a)      => (>la)        */           \
        x(_to_lx_, T(0xb), /*=>*/ _to_lb_)         /* (>lx) T(b)      => (>lb)        */           \
        x(_to_lx_, T(0xc), /*=>*/ _to_lc_)         /* (>lx) T(c)      => (>lc)        */           \
        x(_to_lx_, T(0xd), /*=>*/ _to_ld_)         /* (>lx) T(d)      => (>ld)        */           \
        x(_to_lx_, T(0xe), /*=>*/ _to_le_)         /* (>lx) T(e)      => (>le)        */           \
        x(_to_lx_, T(0xf), /*=>*/ _to_lf_)         /* (>lx) T(f)      => (>lf)        */           \
        x(_dup_to_lx_, T(0x0), /*=>*/ _dup_to_l0_) /* (dup>lx) T(0)   => (dup>l0)     */           \
        x(_dup_to_lx_, T(0x1), /*=>*/ _dup_to_l1_) /* _______________________________ */           \
        x(_dup_to_lx_, T(0x2), /*=>*/ _dup_to_l2_) /* _______________________________ */           \
        x(_dup_to_lx_, T(0x3), /*=>*/ _dup_to_l3_) /* _______________________________ */           \
        x(_dup_to_lx_, T(0x4), /*=>*/ _dup_to_l4_) /* _______________________________ */           \
        x(_dup_to_lx_, T(0x5), /*=>*/ _dup_to_l5_) /* _______________________________ */           \
        x(_dup_to_lx_, T(0x6), /*=>*/ _dup_to_l6_) /* _______________________________ */           \
        x(_dup_to_lx_, T(0x7), /*=>*/ _dup_to_l7_) /* _______________________________ */           \
        x(_dup_to_lx_, T(0x8), /*=>*/ _dup_to_l8_) /* _______________________________ */           \
        x(_dup_to_lx_, T(0x9), /*=>*/ _dup_to_l9_) /* _______________________________ */           \
        x(_dup_to_lx_, T(0xa), /*=>*/ _dup_to_la_) /* _______________________________ */           \
        x(_dup_to_lx_, T(0xb), /*=>*/ _dup_to_lb_) /* _______________________________ */           \
        x(_dup_to_lx_, T(0xc), /*=>*/ _dup_to_lc_) /* _______________________________ */           \
        x(_dup_to_lx_, T(0xd), /*=>*/ _dup_to_ld_) /* _______________________________ */           \
        x(_dup_to_lx_, T(0xe), /*=>*/ _dup_to_le_) /* _______________________________ */           \
        x(_dup_to_lx_, T(0xf), /*=>*/ _dup_to_lf_) /* _______________________________ */           \
        x(_l0_, _l0_, /*=>*/ _l0_, dup)            /* (l0)     (l0)   => (l0) dup     */           \
        x(_l1_, _l1_, /*=>*/ _l1_, dup)            /* _______________________________ */           \
        x(_l2_, _l2_, /*=>*/ _l2_, dup)            /* _______________________________ */           \
        x(_l3_, _l3_, /*=>*/ _l3_, dup)            /* _______________________________ */           \
        x(_l4_, _l4_, /*=>*/ _l4_, dup)            /* _______________________________ */           \
        x(_l5_, _l5_, /*=>*/ _l5_, dup)            /* _______________________________ */           \
        x(_l6_, _l6_, /*=>*/ _l6_, dup)            /* _______________________________ */           \
        x(_l7_, _l7_, /*=>*/ _l7_, dup)            /* _______________________________ */           \
        x(_l8_, _l8_, /*=>*/ _l8_, dup)            /* _______________________________ */           \
        x(_l9_, _l9_, /*=>*/ _l9_, dup)            /* _______________________________ */           \
        x(_la_, _la_, /*=>*/ _la_, dup)            /* _______________________________ */           \
        x(_lb_, _lb_, /*=>*/ _lb_, dup)            /* _______________________________ */           \
        x(_lc_, _lc_, /*=>*/ _lc_, dup)            /* _______________________________ */           \
        x(_ld_, _ld_, /*=>*/ _ld_, dup)            /* _______________________________ */           \
        x(_le_, _le_, /*=>*/ _le_, dup)            /* _______________________________ */           \
        x(_lf_, _lf_, /*=>*/ _lf_, dup)            /* _______________________________ */           \
        x(_to_l0_, _l0_, /*=>*/ _dup_to_l0_)       /* (>l0)    (l0)   => (dup>l0)     */           \
        x(_to_l1_, _l1_, /*=>*/ _dup_to_l1_)       /* _______________________________ */           \
        x(_to_l2_, _l2_, /*=>*/ _dup_to_l2_)       /* _______________________________ */           \
        x(_to_l3_, _l3_, /*=>*/ _dup_to_l3_)       /* _______________________________ */           \
        x(_to_l4_, _l4_, /*=>*/ _dup_to_l4_)       /* _______________________________ */           \
        x(_to_l5_, _l5_, /*=>*/ _dup_to_l5_)       /* _______________________________ */           \
        x(_to_l6_, _l6_, /*=>*/ _dup_to_l6_)       /* _______________________________ */           \
        x(_to_l7_, _l7_, /*=>*/ _dup_to_l7_)       /* _______________________________ */           \
        x(_to_l8_, _l8_, /*=>*/ _dup_to_l8_)       /* _______________________________ */           \
        x(_to_l9_, _l9_, /*=>*/ _dup_to_l9_)       /* _______________________________ */           \
        x(_to_la_, _la_, /*=>*/ _dup_to_la_)       /* _______________________________ */           \
        x(_to_lb_, _lb_, /*=>*/ _dup_to_lb_)       /* _______________________________ */           \
        x(_to_lc_, _lc_, /*=>*/ _dup_to_lc_)       /* _______________________________ */           \
        x(_to_ld_, _ld_, /*=>*/ _dup_to_ld_)       /* _______________________________ */           \
        x(_to_le_, _le_, /*=>*/ _dup_to_le_)       /* _______________________________ */           \
        x(_to_lf_, _lf_, /*=>*/ _dup_to_lf_)       /* _______________________________ */           \
        x(_lenter_x_, T(0x0) /*=>*/)               /* _______________________________ */           \
        x(_lenter_x_, T(0x1), /*=>*/ _lenter_1_)   /* _______________________________ */           \
        x(_lenter_x_, T(0x2), /*=>*/ _lenter_2_)   /* _______________________________ */           \
        x(_lenter_x_, T(0x3), /*=>*/ _lenter_3_)   /* _______________________________ */           \
        x(_lenter_x_, T(0x4), /*=>*/ _lenter_4_)   /* _______________________________ */           \
        x(_lenter_x_, T(0x5), /*=>*/ _lenter_5_)   /* _______________________________ */           \
        x(_lenter_x_, T(0x6), /*=>*/ _lenter_6_)   /* _______________________________ */           \
        x(_lenter_x_, T(0x7), /*=>*/ _lenter_7_)   /* _______________________________ */           \
        x(_lenter_x_, T(0x8), /*=>*/ _lenter_8_)   /* _______________________________ */           \
        x(_lenter_x_, T(0x9), /*=>*/ _lenter_9_)   /* _______________________________ */           \
        x(_lenter_x_, T(0xa), /*=>*/ _lenter_a_)   /* _______________________________ */           \
        x(_lenter_x_, T(0xb), /*=>*/ _lenter_b_)   /* _______________________________ */           \
        x(_lenter_x_, T(0xc), /*=>*/ _lenter_c_)   /* _______________________________ */           \
        x(_lenter_x_, T(0xd), /*=>*/ _lenter_d_)   /* _______________________________ */           \
        x(_lenter_x_, T(0xe), /*=>*/ _lenter_e_)   /* _______________________________ */           \
        x(_lenter_x_, T(0xf), /*=>*/ _lenter_f_)   /* _______________________________ */           \
        x(_lenter_x_, T(0x10), /*=>*/ _lenter_g_)  /* _______________________________ */           \
        x(_lexit_x_, T(0x0) /*=>*/)                /* _______________________________ */           \
        x(_lexit_x_, T(0x1), /*=>*/ _lexit_1_)     /* _______________________________ */           \
        x(_lexit_x_, T(0x2), /*=>*/ _lexit_2_)     /* _______________________________ */           \
        x(_lexit_x_, T(0x3), /*=>*/ _lexit_3_)     /* _______________________________ */           \
        x(_lexit_x_, T(0x4), /*=>*/ _lexit_4_)     /* _______________________________ */           \
        x(_lexit_x_, T(0x5), /*=>*/ _lexit_5_)     /* _______________________________ */           \
        x(_lexit_x_, T(0x6), /*=>*/ _lexit_6_)     /* _______________________________ */           \
        x(_lexit_x_, T(0x7), /*=>*/ _lexit_7_)     /* _______________________________ */           \
        x(_lexit_x_, T(0x8), /*=>*/ _lexit_8_)     /* _______________________________ */           \
        x(_lexit_x_, T(0x9), /*=>*/ _lexit_9_)     /* _______________________________ */           \
        x(_lexit_x_, T(0xa), /*=>*/ _lexit_a_)     /* _______________________________ */           \
        x(_lexit_x_, T(0xb), /*=>*/ _lexit_b_)     /* _______________________________ */           \
        x(_lexit_x_, T(0xc), /*=>*/ _lexit_c_)     /* _______________________________ */           \
        x(_lexit_x_, T(0xd), /*=>*/ _lexit_d_)     /* _______________________________ */           \
        x(_lexit_x_, T(0xe), /*=>*/ _lexit_e_)     /* _______________________________ */           \
        x(_lexit_x_, T(0xf), /*=>*/ _lexit_f_)     /* _______________________________ */           \
        x(_lexit_x_, T(0x10), /*=>*/ _lexit_g_)    /* _______________________________ */

/* low-priority optimizations: they may prevent some of the optimizations above */
/* not defined here. see (optimize-2token-lowprio) in forth/m64th/impl.S  */
#undef OPT2_RULES_LOWPRIO

#endif /* M64TH_INCLUDE_OPT_MH */
