/**
 * Copyright (C) 2020 Massimiliano Ghilardi
 *
 * This file is part of m64th.
 *
 * m64th is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * m64th is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with m64th.  If not, see <https://www.gnu.org/licenses/>.
 */

#ifndef M64TH_INCLUDE_DICT_M64TH_MH
#define M64TH_INCLUDE_DICT_M64TH_MH

/* ------- m64th-user ----------------------------------------------------------------------------
 */
#define DICT_TOKENS_M64TH_USER(X)                                                                  \
    X(2, "<=", less_equal)                                                                         \
    X(2, ">=", more_equal)                                                                         \
    X(3, "0<=", zero_less_equal)                                                                   \
    X(3, "0>=", zero_more_equal)                                                                   \
    X(2, "2+", two_plus)                                                                           \
    X(2, "2-", two_minus)                                                                          \
    X(4, "2sm/", two_sm_div) /* symmetric divide by 2 */                                           \
    X(2, "4*", four_times)                                                                         \
    X(2, "4+", four_plus)                                                                          \
    X(2, "4-", four_minus)                                                                         \
    X(2, "4/", four_div)      /* floored divide by 4 */                                            \
    X(4, "4sm/", four_sm_div) /* symmetric divide by 4 */                                          \
    X(2, "8*", eight_times)                                                                        \
    X(2, "8+", eight_plus)                                                                         \
    X(2, "8-", eight_minus)                                                                        \
    X(2, "8/", eight_div)             /* floored divide by 4 */                                    \
    X(4, "8sm/", eight_sm_div)        /* symmetric divide by 8 */                                  \
    /*                             */ /*                                                */         \
    /* attempt to narrow two double-width unsigned numbers         */                              \
    X(7, "2du>2u?", two_du_to_2u_q) /* ( du1 du2 -- u1 u2 t | du1 du2 f ) */                       \
    X(8, "2dup_2>r", two_dup_two_to_r)                                                             \
    X(4, "2nip", two_nip)                                                                          \
    X(5, "2pick", two_pick)                                                                        \
    X(8, "2r>2drop", two_r_from_two_drop)                                                          \
    X(5, "2roll", two_roll)                                                                        \
    X(6, "-2roll", minus_two_roll)                                                                 \
    X(5, "-2rot", minus_two_rot) /*             ( a b c d e f -- e f a b c d )                  */ \
    X(5, "2tuck", two_tuck)      /*             ( a b c d     -- c d a b c d )                  */ \
    X(8, "atomic+!", atomic_plus_store)      /* ( n addr -- n' ) atomically increment cell by n */ \
    X(9, "atomic1+!", atomic_one_plus_store) /* ( addr   -- n' ) atomically increment cell by 1 */ \
    X(6, "bounds", bounds)          /*   ( c-addr u -- c-addr+u c-addr ) get string bounds      */ \
    X(10, "breakpoint", breakpoint) /*   ( -- ) debugger breakpoint                             */ \
    X(6, "choose", choose)          /*   ( a b flag -- a|b ) if flag return a, otherwise b      */ \
    X(11, "cmove/count", cmove_count) /* ( src dst u -- src+u dst+u ) forward copy u bytes      */ \
                                      /* ( src dst u -- src+u dst+u ) backward copy u bytes     */ \
    X(12, "-cmove/count", minus_cmove_count)                                                       \
    X(8, "crc-cell", crc_cell)      /* ( x -- crc32 ) compute CRC32c of a cell                  */ \
    X(10, "crc-string", crc_string) /* ( c-addr u -- crc32 ) compute CRC32c of a string         */ \
    X(10, "do-i+-loop", do_i_plus_loop) /* do i + loop                                          */ \
    /*                              attempt to narrow a double-width unsigned number            */ \
    X(5, "du>u?", du_to_u_q) /* ( du -- u t | du f )                                        */     \
    X(5, "dup>r", dup_to_r)  /* ( x -- ) ( R: -- x )               equivalent to: dup >r */        \
    X(11, "ex-message!", ex_message_store) /* ( c-addr u --    ) store exception message string */ \
    X(11, "ex-message@", ex_message_fetch) /* (    -- c-addr u ) fetch exception message string */ \
    X(4, "flip", flip)                     /* ( a b c -- c b a ) equivalent to: swap rot        */ \
    X(3, "hop", hop)                       /* ( a b c -- a b c a )  equivalent to: 2 pick */       \
    X(2, "i*", i_times)                    /* equivalent to: i *         */                        \
    X(2, "i+", i_plus)                     /* equivalent to: i +         */                        \
    X(2, "i-", i_minus)                    /* equivalent to: i -         */                        \
    X(2, "i'", i_prime)                    /* fetch second item from return stack */               \
    X(7, "i_byte@", i_byte_fetch)          /* equivalent to: i byte@     */                        \
    X(7, "i_char@", i_char_fetch)          /* equivalent to: i char@     */                        \
    X(8, "i_short@", i_short_fetch)        /* equivalent to: i short@    */                        \
    X(9, "i_ushort@", i_ushort_fetch)      /* equivalent to: i ushort@   */                        \
    X(6, "i_int@", i_int_fetch)            /* equivalent to: i int@      */                        \
    X(7, "i_uint@", i_uint_fetch)          /* equivalent to: i uint@     */                        \
    X(2, "i@", i_fetch)                    /* equivalent to: i @         */                        \
    /* ( c-addr u ch -- u' ) get position of given char or CR/LF in string  */                     \
    X(14, "line-find-char", line_find_char)                                                        \
    X(4, "noop", noop)            /* ( -- ) do nothing                               */            \
    X(6, "n>drop", n_to_drop)     /* ( xn .. x1 n -- ) drop n cells                  */            \
    X(3, "r1+", r_one_plus)       /*          ( R: a -- a+1 )                         */           \
    X(3, "r1-", r_one_minus)      /*          ( R: a -- a-1 )                         */           \
    X(2, "r!", r_store)           /* ( a -- ) ( R: b -- a   )                         */           \
    X(3, "r+!", r_plus_store)     /* ( a -- ) ( R: b -- a+b )                         */           \
    X(6, "r>drop", r_from_drop)   /* ( R: x -- ) equivalent to: r> drop               */           \
    X(6, "rdepth", rdepth)        /* ( -- n ) get return stack depth                 */            \
    X(5, "-roll", minus_roll)     /* rotate in opposite direction than 'roll'        */            \
    X(4, "-rot", minus_rot)       /* equivalent to: rot rot                          */            \
    X(3, "sp@", sp_fetch)         /* ( x --- x addr-of-x ) get current data stack address */       \
    X(7, "squared", squared)      /* equivalent to: dup *                            */            \
    X(6, "state@", state_fetch)   /* equivalent to: state @                          */            \
    X(7, "string=", string_equal) /* ( addr1 addr2 u -- addr1 addr2 u t|f )          */            \
    X(10, "string-ci=", string_ci_equal) /* ( addr1 addr2 u -- addr1 addr2 u t|f )          */     \
    X(17, "string-find-blank", string_find_blank) /* ( c-addr u -- u' )                     */     \
    X(16, "string-find-char", string_find_char)   /* ( c-addr u ch -- u' )                  */     \
    X(20, "string-find-nonblank", string_find_nonblank) /* ( c-addr u -- u' )               */     \
    X(12, "string>lower", string_to_lower) /* ( c-addr-src c-addr-dst u -- c-addr-dst u )   */     \
    X(3, "sub", sub)                       /* equivalent to: swap -                         */     \
    X(5, "trail", trail)                   /* equivalent to: over swap                      */     \
    /*                             */      /*                                               */     \
    X(3, "u<=", u_less_equal)                                                                      \
    X(3, "u>=", u_more_equal)                                                                      \
    X(5, "u/mod", u_div_mod)             /* ( u1 u2 -- u1%u2 u1/u2 )                      */       \
    /*                              */   /*                                               */       \
    X(11, "xt>validate", xt_to_validate) /* ( xt -- xt ) throw if XT is invalid           */       \
    /*                              */   /*                                               */       \
    X(5, ">byte", to_byte)                                                                         \
    X(5, ">char", to_char)                                                                         \
    X(6, ">short", to_short)                                                                       \
    X(7, ">ushort", to_ushort)                                                                     \
    X(4, ">int", to_int)                                                                           \
    X(5, ">uint", to_uint)                                                                         \
    /*                              */ /*                                               */         \
    X(6, "short,", short_comma)                                                                    \
    X(4, "int,", int_comma)                                                                        \
    X(14, "countedstring,", countedstring_comma) /* ( c-addr u -- ) append countedstring to HERE*/ \
    X(7, "string,", string_comma)                /* ( c-addr u -- ) append string to HERE */       \
    /*                              */ /*                                               */         \
    X(11, "short-align", short_align)                                                              \
    X(9, "int-align", int_align)                                                                   \
    X(13, "short-aligned", short_aligned)                                                          \
    X(11, "int-aligned", int_aligned)                                                              \
    /*                              */ /*                                               */         \
    X(5, "byte@", byte_fetch)                                                                      \
    X(7, "byte[1]", byte_fetch_1)                                                                  \
    X(7, "byte[2]", byte_fetch_2)                                                                  \
    X(7, "byte[3]", byte_fetch_3)                                                                  \
    X(7, "byte[4]", byte_fetch_4)                                                                  \
    X(7, "byte[5]", byte_fetch_5)                                                                  \
    X(7, "byte[6]", byte_fetch_6)                                                                  \
    X(7, "byte[7]", byte_fetch_7)                                                                  \
    X(7, "byte[8]", byte_fetch_8)                                                                  \
    /*                              */ /*                                               */         \
    /* X(5, "char@", char_fetch)    */ /* alias of c@                                  */          \
    X(7, "char[1]", char_fetch_1)                                                                  \
    X(7, "char[2]", char_fetch_2)                                                                  \
    X(7, "char[3]", char_fetch_3)                                                                  \
    X(7, "char[4]", char_fetch_4)                                                                  \
    X(7, "char[5]", char_fetch_5)                                                                  \
    X(7, "char[6]", char_fetch_6)                                                                  \
    X(7, "char[7]", char_fetch_7)                                                                  \
    X(7, "char[8]", char_fetch_8)                                                                  \
    /*                              */ /*                                               */         \
    X(6, "short@", short_fetch)                                                                    \
    X(8, "short[1]", short_fetch_1)                                                                \
    X(8, "short[2]", short_fetch_2)                                                                \
    X(8, "short[3]", short_fetch_3)                                                                \
    X(8, "short[4]", short_fetch_4)                                                                \
    X(8, "short[5]", short_fetch_5)                                                                \
    X(8, "short[6]", short_fetch_6)                                                                \
    X(8, "short[7]", short_fetch_7)                                                                \
    X(8, "short[8]", short_fetch_8)                                                                \
    /*                              */ /*                                               */         \
    X(7, "ushort@", ushort_fetch)                                                                  \
    X(9, "ushort[1]", ushort_fetch_1)                                                              \
    X(9, "ushort[2]", ushort_fetch_2)                                                              \
    X(9, "ushort[3]", ushort_fetch_3)                                                              \
    X(9, "ushort[4]", ushort_fetch_4)                                                              \
    X(9, "ushort[5]", ushort_fetch_5)                                                              \
    X(9, "ushort[6]", ushort_fetch_6)                                                              \
    X(9, "ushort[7]", ushort_fetch_7)                                                              \
    X(9, "ushort[8]", ushort_fetch_8)                                                              \
    /*                              */ /*                                               */         \
    X(4, "int@", int_fetch)                                                                        \
    X(6, "int[1]", int_fetch_1)                                                                    \
    X(6, "int[2]", int_fetch_2)                                                                    \
    X(6, "int[3]", int_fetch_3)                                                                    \
    X(6, "int[4]", int_fetch_4)                                                                    \
    X(6, "int[5]", int_fetch_5)                                                                    \
    X(6, "int[6]", int_fetch_6)                                                                    \
    X(6, "int[7]", int_fetch_7)                                                                    \
    X(6, "int[8]", int_fetch_8)                                                                    \
    /*                              */ /*                                               */         \
    X(5, "uint@", uint_fetch)                                                                      \
    X(7, "uint[1]", uint_fetch_1)                                                                  \
    X(7, "uint[2]", uint_fetch_2)                                                                  \
    X(7, "uint[3]", uint_fetch_3)                                                                  \
    X(7, "uint[4]", uint_fetch_4)                                                                  \
    X(7, "uint[5]", uint_fetch_5)                                                                  \
    X(7, "uint[6]", uint_fetch_6)                                                                  \
    X(7, "uint[7]", uint_fetch_7)                                                                  \
    X(7, "uint[8]", uint_fetch_8)                                                                  \
    /*                              */ /*                                               */         \
    /* X(5, "cell@", cell_fetch)    */ /* alias of @                                    */         \
    X(7, "cell[1]", cell_fetch_1)                                                                  \
    X(7, "cell[2]", cell_fetch_2)                                                                  \
    X(7, "cell[3]", cell_fetch_3)                                                                  \
    X(7, "cell[4]", cell_fetch_4)                                                                  \
    X(7, "cell[5]", cell_fetch_5)                                                                  \
    X(7, "cell[6]", cell_fetch_6)                                                                  \
    X(7, "cell[7]", cell_fetch_7)                                                                  \
    X(7, "cell[8]", cell_fetch_8)                                                                  \
    /*                              */ /*                                               */         \
    /* X(5, "char!", char_store)    */ /* alias of c!                                   */         \
    X(8, "char[1]!", char_store_1)                                                                 \
    X(8, "char[2]!", char_store_2)                                                                 \
    X(8, "char[3]!", char_store_3)                                                                 \
    X(8, "char[4]!", char_store_4)                                                                 \
    X(8, "char[5]!", char_store_5)                                                                 \
    X(8, "char[6]!", char_store_6)                                                                 \
    X(8, "char[7]!", char_store_7)                                                                 \
    X(8, "char[8]!", char_store_8)                                                                 \
    /*                              */ /*                                               */         \
    X(6, "short!", short_store)                                                                    \
    X(9, "short[1]!", short_store_1)                                                               \
    X(9, "short[2]!", short_store_2)                                                               \
    X(9, "short[3]!", short_store_3)                                                               \
    X(9, "short[4]!", short_store_4)                                                               \
    X(9, "short[5]!", short_store_5)                                                               \
    X(9, "short[6]!", short_store_6)                                                               \
    X(9, "short[7]!", short_store_7)                                                               \
    X(9, "short[8]!", short_store_8)                                                               \
    /*                              */ /*                                               */         \
    X(4, "int!", int_store)                                                                        \
    X(7, "int[1]!", int_store_1)                                                                   \
    X(7, "int[2]!", int_store_2)                                                                   \
    X(7, "int[3]!", int_store_3)                                                                   \
    X(7, "int[4]!", int_store_4)                                                                   \
    X(7, "int[5]!", int_store_5)                                                                   \
    X(7, "int[6]!", int_store_6)                                                                   \
    X(7, "int[7]!", int_store_7)                                                                   \
    X(7, "int[8]!", int_store_8)                                                                   \
    /*                              */ /*                                               */         \
    /* X(5, "cell!", cell_store)    */ /* alias of !                                   */          \
    X(8, "cell[1]!", cell_store_1)                                                                 \
    X(8, "cell[2]!", cell_store_2)                                                                 \
    X(8, "cell[3]!", cell_store_3)                                                                 \
    X(8, "cell[4]!", cell_store_4)                                                                 \
    X(8, "cell[5]!", cell_store_5)                                                                 \
    X(8, "cell[6]!", cell_store_6)                                                                 \
    X(8, "cell[7]!", cell_store_7)                                                                 \
    X(8, "cell[8]!", cell_store_8)

#define DICT_WORDS_M64TH_USER(X)                                                                   \
    DICT_TOKENS_M64TH_USER(X)                                                                      \
    X(3, ".rs", dot_rs)             /* show return stack                              */           \
    X(5, "break", break)            /* TODO jump after 'loop', 'repeat'...            */           \
    X(8, "continue", continue)      /* TODO jump to 'loop', 'repeat'...               */           \
    X(10, "clearstack", clearstack) /* ( ... -- ) clear data stack                    */           \
    X(7, "cs-drop", cs_drop)        /* ( sys -- )                                     */           \
    X(6, "cs-dup", cs_dup)          /* ( sys -- sys sys )                             */           \
    X(8, "-cs-roll", minus_cs_roll) /* ( ... cs-depth -- ... )                        */           \
    X(7, "cs-swap", cs_swap)        /* ( a_sys b_sys -- b_sys a_sys )                 */           \
    X(4, "d>hi", d_to_hi) /*      ( d -- x ) extract high half from double width number */         \
    /* ( xt -- xt ) throw if XT wass not created by DEFER */                                       \
    X(14, "defer>validate", defer_to_validate)                                                     \
    X(11, "disassemble", disassemble) /* read name, find nt then show its disassembly   */         \
    X(16, "disassemble-name", disassemble_name) /* ( nt -- ) show disassembly of word   */         \
    /* ( ntu ... nt2 nt1 u -- ) show disassembly of N words */                                     \
    X(17, "disassemble-names", disassemble_names)                                                  \
    /*                          read name, find nt, show disassembly of all nt up to it */         \
    X(16, "disassemble-upto", disassemble_upto)                                                    \
    /* double-width unsigned remainder & divide                                         */         \
    X(6, "du/mod", du_div_mod)      /* ( du du-divisor -- du-rem du-quo )               */         \
    X(9, "ex>string", ex_to_string) /* ( ex -- c-addr u ) get exception name            */         \
    /* jump to next 'of' inside a 'case'.                                               */         \
    /* can appear only as last statement inside 'of' i.e. instead of 'endcase'          */         \
    X(11, "fallthrough", fallthrough)                                                              \
    X(10, "forth-root", forth_root) /* set first wordlist in searchorder to forth-root  */         \
    X(17, "hashmap-find/cell", hashmap_find_cell) /* ( map key -- key' &val|0 ) find key in map */ \
    X(16, "hashmap-find/int", hashmap_find_int)   /* ( map key -- key' &val|0 ) find key in map */ \
    X(9, "interpret", interpret)       /* one iteration of forth interpret/compile loop  */        \
    X(9, "m64th-asm", m64th_asm)       /* set first wordlist in searchorder to m64th-asm  */       \
    X(7, "m64th-c", m64th_c)           /* set first wordlist in searchorder to m64th-c    */       \
    X(10, "m64th-core", m64th_core)    /* set first wordlist in searchorder to m64th-core */       \
    X(10, "m64th-impl", m64th_impl)    /* set first wordlist in searchorder to m64th-impl */       \
    X(4, "repl", repl)                 /* call INTERPRET repeatedly until EOF or input error   */  \
    X(5, "r2nd@", r2nd_fetch)          /* alias of i' i.e. fetch second item from return stack */  \
    X(5, "r3rd@", r3rd_fetch)          /* alias of j i.e. fetch third item from return stack   */  \
    X(8, "see-name", see_name)         /* ( nt -- ) show definition of nt                */        \
    X(8, "string<>", string_ne)        /* ( addr1 addr2 u -- addr1 addr2 u t|f )         */        \
    X(11, "string-ci<>", string_ci_ne) /* ( addr1 addr2 u -- addr1 addr2 u t|f )         */        \
    X(9, "string2<>", string2_ne)      /* ( addr1 u1 addr2 u2  -- addr1 u1 t|f )         */        \
    X(8, "string2=", string2_equal)    /* ( addr1 u1 addr2 u2  -- addr1 u1 t|f )         */        \
    /*                                 convert string to number, recognizing base & sign */        \
    X(13, "string>number", string_to_number) /* ( caddr n -- caddr' n' x t|f )           */        \
    /*                              write cr exception and ex-message@ to current output */        \
    X(14, "type-exception", type_exception) /* ( ex|0 -- )                               */        \
    X(3, "u>d", u_to_d) /*            ( u -- du ) extend unsigned number to double width */        \
    X(11, "valid-base?", valid_base_q) /* ( base -- t|f ) true if 2 <= base <= 36        */        \
    /* get all words in wordlist up to nt1. newer words are placed toward stack top      */        \
    X(18, "wordlist-upto-name", wordlist_upto_name) /* ( wid nt1 -- 0 | ntu ... nt2 nt1 u ) */     \
    /*                             */ /*                                                */         \
    X(5, "/byte", div_byte)           /* alias of noop                                  */         \
    X(5, "/char", div_char)           /* alias of noop                                  */         \
    X(6, "/short", div_short)         /* alias of 2/                                    */         \
    X(7, "/ushort", div_ushort)       /* alias of 2/                                    */         \
    X(4, "/int", div_int)             /* alias of 4/                                    */         \
    X(5, "/uint", div_uint)           /* alias of 4/                                    */         \
    X(5, "/cell", div_cell)           /* alias of SZ/                                   */         \
    /*                             */ /*                                                */         \
    X(5, "char@", char_fetch)         /* alias of c@                                    */         \
    X(5, "cell@", cell_fetch)         /* alias of @                                     */         \
    X(5, "char!", char_store)         /* alias of c!                                    */         \
    X(5, "cell!", cell_store)         /* alias of !                                     */         \
    /*                             */ /*                                                */         \
    X(5, "1byte", one_byte)           /* alias of 1 i.e. sizeof(byte)                   */         \
    X(5, "1char", one_char)           /* alias of 1 i.e. sizeof(char)                   */         \
    X(6, "1short", one_short)         /* alias of 2 i.e. sizeof(short)                  */         \
    X(7, "1ushort", one_ushort)       /* alias of 2 i.e. sizeof(ushort)                 */         \
    X(4, "1int", one_int)             /* alias of 4 i.e. sizeof(int)                    */         \
    X(5, "1uint", one_uint)           /* alias of 4 i.e. sizeof(uint)                   */         \
    X(5, "1cell", one_cell)           /* alias of SZ i.e. sizeof(cell)                  */         \
    /*                             */ /*                                                */         \
    X(5, "byte+", byte_plus)          /* alias of 1+                                    */         \
    /* X(5, "char+", char_plus)    */ /* already in forth 'core' word set               */         \
    X(6, "short+", short_plus)        /* alias of 2+                                    */         \
    X(7, "ushort+", ushort_plus)      /* alias of 2+                                    */         \
    X(4, "int+", int_plus)            /* alias of 4+                                    */         \
    X(5, "uint+", uint_plus)          /* alias of 4+                                    */         \
    /*X(5, "cell+", cell_plus)     */ /* already in forth 'core' word set               */         \
    /*                             */ /*                                                */         \
    X(5, "bytes", bytes)              /*                                                */         \
    /* X(5, "chars", chars) */        /* already in forth 'core' word set               */         \
    X(6, "shorts", shorts)            /* alias of 2*                                    */         \
    X(7, "ushorts", ushorts)          /* alias of 2*                                    */         \
    X(4, "ints", ints)                /* alias of 4*                                    */         \
    X(5, "uints", uints)              /* alias of 4*                                    */         \
    /*X(5, "cells", cells)         */ /* already in forth 'core' word set               */         \
    /*                             */ /*                                                */

/**
 *
 *
 *
 *
 *
 *
 *
 */
/* ------- m64th-asm -----------------------------------------------------------------------------
 */
#define DICT_TOKENS_M64TH_ASM(X)                                                                   \
    X(9, "(asm/?if)", _asm_q_if_)     /* native ASM only: implement '(?if)'      */                \
    X(10, "(asm/?if0)", _asm_q_if0_)  /* native ASM only: implement '(?if0)'     */                \
    X(10, "(asm/else)", _asm_else_)   /* native ASM only: implement '(else)'     */                \
    X(8, "(asm/if)", _asm_if_)        /* native ASM only: implement '(if)'       */                \
    X(9, "(asm/if0)", _asm_if0_)      /* native ASM only: implement '(if0)'      */                \
    X(11, "(asm/lit8s)", _asm_lit8s_) /* native ASM only: implement '(lit8s)'    */                \
    X(9, "(asm/ret)", _asm_ret_)      /* native ASM only: return from ASM to ASM */                \
    X(10, "(asm/then)", _asm_then_)   /* native ASM only: implement 'then'       */                \
    /* native ASM only: pop XT and use '(vm)' to 'catch' it.  */                                   \
    X(14, "(asm/vm-catch)", _asm_vm_catch_) /* ( ... xt -- err ... ) */                            \
    /* native ASM only: pop XT and use '(vm)' to execute it. */                                    \
    X(16, "(asm/vm-execute)", _asm_vm_execute_)     /* ( ... xt -- ... ) */                        \
    X(18, "(vm-return-to/asm)", _vm_return_to_asm_) /* return from VM to ASM                    */ \
    X(10, "[asm-lit,]", _asm_lit_comma_)      /* followed by CELL(addr) T(u) just calls asm,    */ \
    X(4, "asm,", asm_comma)                   /* ( addr u  -- ) append ASM code to ASM-HERE     */ \
    X(9, "asm-clear", asm_clear)              /* ( -- ) forget current ASM code                 */ \
    X(8, "asm-func", asm_func)                /* ( -- addr ) get ASM_FUNC = start of ASM code   */ \
    X(8, "asm-here", asm_here)                /* ( -- addr ) get ASM_HERE = current ASM address */ \
    X(8, "asm-size", asm_size)                /* ( -- u    ) get ASM_HERE - ASM_FUNC in bytes   */ \
    X(10, "name>asm>n", name_to_asm_n)        /* ( nt -- u true | 0 false ) get nt.asm_len      */ \
    X(11, "name>asm>n!", name_to_asm_n_store) /* ( u nt -- ) set nt.asm_len                     */ \
    /* ( token -- asm-addr | 0 ) get token ASM address */                                          \
    X(14, "token>asm>addr", token_to_asm_addr)

#define DICT_WORDS_M64TH_ASM(X)                                                                    \
    DICT_TOKENS_M64TH_ASM(X)                                                                       \
    /* ( -- t|f ) if all tokens between XT and HERE can be compiled to ASM */                      \
    /* then initialize ASM buffer and return true */                                               \
    X(13, "(xt>asm-init)", _xt_to_asm_init_)                                                       \
    /* ( -- ) main part of 'xt>asm,' can be called only after (xt>asm-init) */                     \
    X(13, "(xt>asm-body)", _xt_to_asm_body_)                                                       \
    /* ( -- ) install already compiled ASM code into current XT */                                 \
    X(15, "(xt>asm-finish)", _xt_to_asm_finish_)                                                   \
    /* inject 16-bit immediate 'u' into arm64 ASM instruction at asm_here[-4] */                   \
    X(24, "[asm-arm64-inject-imm16]", _asm_arm64_inject_imm16_) /* ( x y u -- x>>16 y>>16 t|f ) */ \
    /* ( orig -- ) resolve an ASM jump to here */                                                  \
    X(23, "[asm-resolve-jump-here]", _asm_resolve_jump_here_)                                      \
    /* ( dest -- ) resolve an ASM jump from here */                                                \
    X(24, "[asm-resolve-jump-there]", _asm_resolve_jump_there_)                                    \
    X(13, "asm-make-func", asm_make_func) /* ( -- addr ) make ASM code executable and return it */ \
    X(11, "asm-reserve", asm_reserve) /* ( len -- ) reserve at least len bytes in ASM buffer    */ \
    X(5, "lit>n", lit_to_n) /* ( tok-addr -- n ) get literal value following a token (lit[248]s)*/ \
    X(9, "token>asm", token_to_asm) /* ( token -- addr u | 0 0 ) get token ASM address and len  */ \
    X(10, "token>asm,", token_to_asm_comma) /* ( sys* tok-addr -- sys'* ) compile token to ASM  */ \
    /* ( tok-addr -- tok' ) get replacement token for compiling token to ASM */                    \
    X(17, "token>asm-replace", token_to_asm_replace)                                               \
    X(11, "token>asm>n", token_to_asm_n) /* ( token -- u true | 0 false ) get token ASM len */     \
    /* ( -- ) attempt to compile to native ASM all tokens between XT and HERE */                   \
    X(7, "xt>asm,", xt_to_asm_comma)                                                               \
    /* ( -- u t|f ) return required len and true if all tokens between XT and HERE */              \
    /* can be compiled to native ASM, otherwise false */                                           \
    X(8, "xt>asm>n", xt_to_asm_n)                                                                  \
    /*  move forward by specified token offset all tokens between XT and HERE. updates HERE */     \
    X(15, "xt-shift-tokens", xt_shift_tokens) /* ( token_offset -- ) */

/**
 *
 *
 *
 *
 *
 *
 *
 */
/* ------- m64th-c -------------------------------------------------------------------------------
 */
#define DICT_TOKENS_M64TH_C(X)                                                                     \
    X(9, "(c-arg-0)", _c_arg_0_) /* prepare 0 args for C function call    */                       \
    X(9, "(c-arg-1)", _c_arg_1_) /* prepare 1 arg  for C function call    */                       \
    X(9, "(c-arg-2)", _c_arg_2_) /* prepare 2 args for C function call    */                       \
    X(9, "(c-arg-3)", _c_arg_3_) /* prepare 3 args for C function call    */                       \
    X(9, "(c-arg-4)", _c_arg_4_) /* prepare 4 args for C function call    */                       \
    X(9, "(c-arg-5)", _c_arg_5_) /* prepare 5 args for C function call    */                       \
    X(9, "(c-arg-6)", _c_arg_6_) /* prepare 6 args for C function call    */                       \
    X(8, "(c-call)", _c_call_)   /* must be followed by C function address. calls it. */           \
    X(9, "(c-ret-0)", _c_ret_0_) /* push 0 values returned by C function call */                   \
    X(9, "(c-ret-1)", _c_ret_1_) /* push 1 value  returned by C function call */                   \
    X(9, "(c-ret-2)", _c_ret_2_) /* push 2 values returned by C function call */                   \
    X(15, "(c-locals-load)", _c_locals_load_) /* reload local variables after a C call */          \
    X(15, "(c-locals-save)", _c_locals_save_) /* save local variables before a C call */

#define DICT_WORDS_M64TH_C(X)                                                                      \
    DICT_TOKENS_M64TH_C(X)                                                                         \
    X(7, "c-fread", c_fread) /* ( FILE* c-addr u -- u' err ) call C function fread()  */           \
    X(15, "c-fwrite+fflush", c_fwrite_fflush) /* ( FILE* c-addr u -- u' err ) fwrite()+fflush() */ \
    X(11, "c-linenoise", c_linenoise)         /* ( prompt c-addr u -- u' err ) call C linenoise() */

/* ------- m64th-core ----------------------------------------------------------------------------
 */
#define DICT_TOKENS_M64TH_CORE(X)                                                                  \
    X(12, "count-tokens", count_tokens) /* ( counted-tokens -- tok-addr u ) */                     \
    X(21, "flags>consumed-tokens", flags_to_consumed_tokens) /* ( flags -- u ) # consumed tokens*/ \
    X(7, "in>ibuf", in_to_ibuf)     /* (    -- io       ) get current input as iobuf     */        \
    X(10, "iobuf>addr", iobuf_addr) /* ( io -- c-addr   ) get start of iobuf data buffer */        \
    /* ( io -- c-addr u ) get iobuf entire content i.e. from 0 to iobuf>end */                     \
    X(14, "iobuf>all-data", iobuf_all_data)                                                        \
    /* ( io -- c-addr u ) get iobuf content i.e. from iobuf>pos to iobuf>end */                    \
    X(10, "iobuf>data", iobuf_data)                                                                \
    /* ( io -- u ) get iobuf content length i.e. the distance iobuf>end - iobuf>pos */             \
    X(12, "iobuf>data>n", iobuf_data_n)                                                            \
    /* ( io -- c-addr u ) get iobuf free space i.e. from iobuf>end to iobuf>max */                 \
    X(15, "iobuf>free-data", iobuf_free_data)                                                      \
    X(12, "iobuf-empty?", iobuf_empty_query) /* ( io -- t|f ) true if iobuf is currently empty */  \
    X(9, "iobuf>err", iobuf_err)         /* ( io -- addr ) get address of iobuf err          */    \
    X(10, "iobuf>func", iobuf_func)      /* ( io -- addr ) get address of iobuf I/O function */    \
    X(12, "iobuf>handle", iobuf_handle)  /* ( io -- addr ) get address of iobuf handle       */    \
    X(9, "iobuf>max", iobuf_max)         /* ( io -- u    ) get iobuf max size i.e. capacity  */    \
    X(9, "iobuf>pos", iobuf_pos)         /* ( io -- addr ) get address of iobuf position     */    \
    X(9, "iobuf>end", iobuf_end)         /* ( io -- addr ) get address of iobuf end position */    \
    X(6, "latest", latest)               /* (    -- nt   ) get last defined word             */    \
    X(9, "to-latest", to_latest)         /* ( nt --      ) set last defined word             */    \
    X(5, "name,", name_comma)            /* ( c-addr u -- nt ) create a new name             */    \
    X(9, "name>code", name_to_code)      /* ( nt  -- taddr n ) get code array from name      */    \
    X(11, "name>code>n", name_to_code_n) /* ( nt -- u        ) get code size from name       */    \
    X(12, "name>code>n!", name_to_code_n_store) /* ( u nt -- ) set code size of name         */    \
    X(9, "name>data", name_to_data) /*      ( nt -- addr u   ) get data array of name        */    \
    X(14, "name>data>addr", name_to_data_addr)  /* ( nt -- addr u ) get data address name    */    \
    X(12, "name>data>n!", name_to_data_n_store) /* ( u nt --  ) set data size of name        */    \
    X(10, "name>flags", name_to_flags) /*   ( nt -- m6flags  ) get m6flags of name           */    \
    X(11, "name>flags!", name_to_flags_store) /* ( m6flags nt -- ) set m6flags of name       */    \
    X(10, "name>ident", name_to_ident) /* ( nt -- addr n  ) convert name to asm/C identifier */    \
    /* name>string is already defined by forth 'tools ext' wordset */                              \
    X(9, "name>prev", name_to_prev) /* ( nt -- nt'|0   ) get previous word in wordlist       */    \
    X(7, "name>xt", name_to_xt)     /* ( nt -- XT      ) get XT == code address from name    */    \
    X(15, "obuf-write-char", obuf_write_char) /* ( io c -- err  ) write one char to iobuf    */    \
    /* ( io c-addr u -- err  ) write string to iobuf */                                            \
    X(17, "obuf-write-string", obuf_write_string)                                                  \
    X(8, "out>obuf", out_to_obuf) /*  (   -- io   ) get current output as iobuf                */  \
    X(17, "searchorder-clear", searchorder_clear) /* ( SO: wid_u-1 .. wid_0 -- ) */                \
    X(17, "searchorder-depth",                                                                     \
      searchorder_depth)                        /* ( SO: wid_u-1 .. wid_0 -- same ) ( -- u )   */  \
    X(16, "searchorder-drop", searchorder_drop) /* ( SO: wid -- )                              */  \
    X(15, "searchorder-dup", searchorder_dup)   /* ( SO: wid -- wid wid )                      */  \
    X(16, "searchorder-pick", searchorder_pick) /* ( SO: wid_u .. wid_0 -- same ) ( -- wid_u ) */  \
    X(15, "searchorder[0]!", searchorder_store_0) /* ( wid -- ) overwrite searchorder 0-th elem */ \
    X(10, "token>name", token_to_name)            /* ( token -- nt|0 ) convert token to name */    \
    X(8, "user-var", user_var) /*        ( -- addr ) must be followed by index of user variable */ \
    X(14, "user-var-m64th", user_var_m64th)      /* ( -- m ) get current m64th address */          \
    X(13, "wordlist>last", wordlist_to_last)     /* ( wid -- nt ) get last name in wordlist  */    \
    X(15, "wordlist>string", wordlist_to_string) /* ( wid -- c-addr u ) convert wid to string   */ \
    X(12, "wordlist-add", wordlist_add)          /*   ( nt wid -- ) add name to wordlist       */  \
    X(14, "wordlist-reset", wordlist_reset) /* ( wid -- ) remove all user-defined names from wid*/ \
    X(7, "xt>name", xt_to_name) /*                  ( XT  -- nt ) convert XT to name            */

#define DICT_WORDS_M64TH_CORE(X)                                                                   \
    DICT_TOKENS_M64TH_CORE(X)                                                                      \
    /* ( handle c-addr u -- 0 M6ERR_UNEXPECTED_EOF ) always return EOF. usable for iobuf>func */   \
    X(10, "always-eof", always_eof)                                                                \
    /* compile-string, ( c-addr u -- ) runtime effect: ( -- c-addr' u ) */                         \
    X(15, "compile-string,", compile_string_comma)                                                 \
    /* ( -- ) if compiling, forget latest word and discard compilation stack. */                   \
    X(14, "compiler-abort", compiler_abort)            /* also unconditionally stops compiling */  \
    X(14, "countedtokens,", countedtokens_comma)       /* ( counted-tokens -- ) */                 \
    X(18, "countedtokens>last", countedtokens_to_last) /* ( countedtokens -- tok|_missing_ ) */    \
    X(8, "i_token@", i_token_fetch) /* alias of i token@       no dedicated m6token */             \
    /*   ( io ch -- c-addr u ) get string before ch in iobuf (no refilling) */                     \
    X(14, "ibuf-find-char", ibuf_find_char)                                                        \
    /*   ( io -- c-addr u ) find non-blank string in iobuf (no refilling) */                       \
    X(19, "ibuf-find-nonblanks", ibuf_find_nonblanks)                                              \
    X(11, "ibuf-refill", ibuf_refill) /*   ( io -- err  ) read some data into iobuf   */           \
    X(20, "ibuf-refill-if-empty", ibuf_refill_if_empty) /* ( io -- err ) */                        \
    X(16, "ibuf-skip-1blank", ibuf_skip_1blank)         /* ( io --     ) */                        \
    X(16, "ibuf-skip-blanks", ibuf_skip_blanks)         /* ( io -- ) skip consecutive blanks */    \
    X(11, "latest-sync", latest_sync)        /* ( -- ) update data size of latest word   */        \
    X(12, "name-inline?", name_inline_query) /* ( nt -- flag ) calls to name should be inlined? */ \
    X(10, "obuf-flush", obuf_flush)          /* ( io -- err  ) flush iobuf data                 */ \
    /* ( io c -- err  ) flush iobuf, then write one char to it */                                  \
    X(23, "(obuf-flush-write-char)", _obuf_flush_write_char_)                                      \
    /* ( io c-addr u -- err  ) flush iobuf, then write string to it */                             \
    X(25, "(obuf-flush-write-string)", _obuf_flush_write_string_)                                  \
    /* ( io c-addr u -- c-addr' u' err  ) send string to iobuf I/O func, ignoring current data. */ \
    /* return string still to write - non-empty only on I/O error                               */ \
    X(15, "(obuf-overflow)", _obuf_overflow_)                                                      \
    /* parse-nt ( nt wid -1|1 ) throws if name not found. 1 if name is immediate, else -1 */       \
    X(8, "parse-nt", parse_nt)                                                                     \
    /* parse-xt ( xt -1|1 ) throws if name not found. 1 if name is immediate, else -1 */           \
    X(8, "parse-xt", parse_xt)                                                                     \
    /* ( c-addr u -- idx|-1 ) find local variable in m64th->locals */                              \
    X(12, "string>local", string_to_local)                                                         \
    /* find name in search order. 1 if name is immediate, else -1      */                          \
    X(11, "string>name", string_to_name)  /* ( c-addr u -- nt|0 wid|0 -1|0|1 )            */       \
    X(6, "/token", div_token)             /* alias of _SZt_div       no dedicated m6token */       \
    X(6, ">token", to_token)              /* alias of to_SZtu        no dedicated m6token */       \
    X(6, "token!", token_store)           /* alias of _SZt_store     no dedicated m6token */       \
    X(9, "token[1]!", token_store_1)      /* alias of _SZt_store_1   no dedicated m6token */       \
    X(9, "token[2]!", token_store_2)      /* alias of _SZt_store_2   no dedicated m6token */       \
    X(9, "token[3]!", token_store_3)      /* alias of _SZt_store_3   no dedicated m6token */       \
    X(9, "token[4]!", token_store_4)      /* alias of _SZt_store_4   no dedicated m6token */       \
    X(9, "token[5]!", token_store_5)      /* alias of _SZt_store_5   no dedicated m6token */       \
    X(9, "token[6]!", token_store_6)      /* alias of _SZt_store_6   no dedicated m6token */       \
    X(9, "token[7]!", token_store_7)      /* alias of _SZt_store_7   no dedicated m6token */       \
    X(9, "token[8]!", token_store_8)      /* alias of _SZt_store_8   no dedicated m6token */       \
    X(6, "token@", token_fetch)           /* alias of _SZtu_fetch    no dedicated m6token */       \
    X(8, "token[1]", token_fetch_1)       /* alias of _SZtu_fetch_1  no dedicated m6token */       \
    X(8, "token[2]", token_fetch_2)       /* alias of _SZtu_fetch_2  no dedicated m6token */       \
    X(8, "token[3]", token_fetch_3)       /* alias of _SZtu_fetch_3  no dedicated m6token */       \
    X(8, "token[4]", token_fetch_4)       /* alias of _SZtu_fetch_4  no dedicated m6token */       \
    X(8, "token[5]", token_fetch_5)       /* alias of _SZtu_fetch_5  no dedicated m6token */       \
    X(8, "token[6]", token_fetch_6)       /* alias of _SZtu_fetch_6  no dedicated m6token */       \
    X(8, "token[7]", token_fetch_7)       /* alias of _SZtu_fetch_7  no dedicated m6token */       \
    X(8, "token[8]", token_fetch_8)       /* alias of _SZtu_fetch_8  no dedicated m6token */       \
    X(6, "1token", one_token)             /* alias of _SZt           no dedicated m6token */       \
    X(6, "token+", token_plus)            /* alias of _SZt_plus      no dedicated m6token */       \
    X(6, "tokens", tokens)                /* alias of _SZt_times     no dedicated m6token */       \
    X(6, "token,", token_comma)           /* ( token      -- )       compile one token    */       \
    X(7, "tokens,", tokens_comma)         /* ( tok-addr u -- )       compile u tokens     */       \
    X(11, "token-align", token_align)     /* alias of _SZt_align     no dedicated m6token */       \
    X(13, "token-aligned", token_aligned) /* alias of _SZt_aligned   no dedicated m6token */       \
    X(13, "wordlist-find", wordlist_find) /* ( c-addr u wid -- nt|0 -1|0|1 ) search in wordlist */

/* ------- m64th-impl ----------------------------------------------------------------------------
 */
#define DICT_TOKENS_M64TH_IMPL(X)                                                                  \
    X(7, "(+loop)", _plus_loop_)                                                                   \
    X(5, "(>l0)", _to_l0_) /* store 0-th local variable */                                         \
    X(5, "(>l1)", _to_l1_) /* store 1-st local variable */                                         \
    X(5, "(>l2)", _to_l2_) /* store 2-nd local variable */                                         \
    X(5, "(>l3)", _to_l3_) /* store 3-rd local variable */                                         \
    X(5, "(>l4)", _to_l4_) /* store 4-th local variable */                                         \
    X(5, "(>l5)", _to_l5_) /* store 5-th local variable */                                         \
    X(5, "(>l6)", _to_l6_) /* store 6-th local variable */                                         \
    X(5, "(>l7)", _to_l7_) /* store 7-th local variable */                                         \
    X(5, "(>l8)", _to_l8_) /* store 8-th local variable */                                         \
    X(5, "(>l9)", _to_l9_) /* store 9-th local variable */                                         \
    X(5, "(>la)", _to_la_) /* store 10-th local variable */                                        \
    X(5, "(>lb)", _to_lb_) /* store 11-th local variable */                                        \
    X(5, "(>lc)", _to_lc_) /* store 12-th local variable */                                        \
    X(5, "(>ld)", _to_ld_) /* store 13-th local variable */                                        \
    X(5, "(>le)", _to_le_) /* store 14-th local variable */                                        \
    X(5, "(>lf)", _to_lf_) /* store 15-th local variable */                                        \
    X(5, "(>lx)", _to_lx_) /* followed by T(N) store N-th local variable */                        \
    X(14, "(?continue-if)", _q_continue_if_)                                                       \
    X(15, "(?continue-if0)", _q_continue_if0_)                                                     \
    X(5, "(?do)", _q_do_)                                                                          \
    X(5, "(?if)", _q_if_)                                                                          \
    X(6, "(?if0)", _q_if0_)                                                                        \
    X(8, "(?until)", _q_until_)                                                                    \
    X(9, "(?until0)", _q_until0_)                                                                  \
    X(8, "(?while)", _q_while_)                                                                    \
    X(9, "(?while0)", _q_while0_)                                                                  \
    X(7, "(again)", _again_)                                                                       \
    X(7, "(ahead)", _ahead_)                                                                       \
    X(7, "(break)", _break_)                                                                       \
    X(10, "(call-asm)", _call_asm_)           /* call forth code compiled to native ASM */         \
    X(6, "(call)", _call_)                    /* call forth XT                     */              \
    X(11, "(catch-beg)", _catch_beg_)         /* first half of 'catch'             */              \
    X(11, "(catch-end)", _catch_end_)         /* second half of 'catch'            */              \
    X(15, "(check-lit-tok)", _check_lit_tok_) /* ( x -- x ) followed by expected x: a token */     \
    X(10, "(continue)", _continue_)           /* execution semantics of 'continue' */              \
    X(13, "(continue-if)", _continue_if_)                                                          \
    X(14, "(continue-if0)", _continue_if0_)                                                        \
    X(4, "(do)", _do_)                /* execution semantics of 'do'       */                      \
    X(11, "(does-exit)", _does_exit_) /* alias of exit. used immediately after (does) */           \
    X(9, "(drop&l0)", _drop_l0_)      /* drop & fetch 0-th local variable */                       \
    X(9, "(drop&l1)", _drop_l1_)      /* drop & fetch 1-st local variable */                       \
    X(9, "(drop&l2)", _drop_l2_)      /* drop & fetch 2-nd local variable */                       \
    X(9, "(drop&l3)", _drop_l3_)      /* drop & fetch 3-rd local variable */                       \
    X(9, "(drop&l4)", _drop_l4_)      /* drop & fetch 4-th local variable */                       \
    X(9, "(drop&l5)", _drop_l5_)      /* drop & fetch 5-th local variable */                       \
    X(9, "(drop&l6)", _drop_l6_)      /* drop & fetch 6-th local variable */                       \
    X(9, "(drop&l7)", _drop_l7_)      /* drop & fetch 7-th local variable */                       \
    X(9, "(drop&l8)", _drop_l8_)      /* drop & fetch 8-th local variable */                       \
    X(9, "(drop&l9)", _drop_l9_)      /* drop & fetch 9-th local variable */                       \
    X(9, "(drop&la)", _drop_la_)      /* drop & fetch 10-th local variable */                      \
    X(9, "(drop&lb)", _drop_lb_)      /* drop & fetch 11-th local variable */                      \
    X(9, "(drop&lc)", _drop_lc_)      /* drop & fetch 12-th local variable */                      \
    X(9, "(drop&ld)", _drop_ld_)      /* drop & fetch 14-th local variable */                      \
    X(9, "(drop&le)", _drop_le_)      /* drop & fetch 14-th local variable */                      \
    X(9, "(drop&lf)", _drop_lf_)      /* drop & fetch 15-th local variable */                      \
    X(9, "(drop&lx)", _drop_lx_)      /* drop & fetch N-th local variable */                       \
    X(8, "(dup>l0)", _dup_to_l0_)     /*  dup & store 0-th local variable */                       \
    X(8, "(dup>l1)", _dup_to_l1_)     /*  dup & store 1-st local variable */                       \
    X(8, "(dup>l2)", _dup_to_l2_)     /*  dup & store 2-nd local variable */                       \
    X(8, "(dup>l3)", _dup_to_l3_)     /*  dup & store 3-rd local variable */                       \
    X(8, "(dup>l4)", _dup_to_l4_)     /*  dup & store 4-th local variable */                       \
    X(8, "(dup>l5)", _dup_to_l5_)     /*  dup & store 5-th local variable */                       \
    X(8, "(dup>l6)", _dup_to_l6_)     /*  dup & store 6-th local variable */                       \
    X(8, "(dup>l7)", _dup_to_l7_)     /*  dup & store 7-th local variable */                       \
    X(8, "(dup>l8)", _dup_to_l8_)     /*  dup & store 8-th local variable */                       \
    X(8, "(dup>l9)", _dup_to_l9_)     /*  dup & store 9-th local variable */                       \
    X(8, "(dup>la)", _dup_to_la_)     /*  dup & store 10-th local variable */                      \
    X(8, "(dup>lb)", _dup_to_lb_)     /*  dup & store 11-th local variable */                      \
    X(8, "(dup>lc)", _dup_to_lc_)     /*  dup & store 12-th local variable */                      \
    X(8, "(dup>ld)", _dup_to_ld_)     /*  dup & store 13-th local variable */                      \
    X(8, "(dup>le)", _dup_to_le_)     /*  dup & store 14-th local variable */                      \
    X(8, "(dup>lf)", _dup_to_lf_)     /*  dup & store 15-th local variable */                      \
    X(8, "(dup>lx)", _dup_to_lx_)     /*  dup & store  N-th local variable */                      \
    X(6, "(else)", _else_)            /* execution semantics of 'else'     */                      \
    X(7, "(endof)", _endof_)          /* execution semantics of 'endof'    */                      \
    X(12, "(exec-token)", _exec_token_)                                                            \
    X(13, "(fallthrough)", _fallthrough_) /* jump to next 'of' inside a 'case' */                  \
    X(4, "(if)", _if_)                                                                             \
    X(5, "(if0)", _if0_)                                                                           \
    X(8, "(ignore)", _ignore_) /* followed by IP offset, ignores it.  */                           \
    X(4, "(ip)", _ip_)                                                                             \
    X(9, "(ip>data)", _ip_to_data_)                                                                \
    X(14, "(ip>data>addr)", _ip_to_data_addr_)                                                     \
    X(7, "(leave)", _leave_)                                                                       \
    X(6, "(lit,)", _lit_comma_)                                                                    \
    X(7, "(lit2s)", _lit2s_)                                                                       \
    X(7, "(lit4s)", _lit4s_)                                                                       \
    X(7, "(lit8s)", _lit8s_)                                                                       \
    X(8, "(lit-nt)", _lit_nt_)                                                                     \
    X(12, "(lit-string)", _lit_string_)                                                            \
    X(9, "(lit-tok)", _lit_tok_)                                                                   \
    X(8, "(lit-xt)", _lit_xt_)                                                                     \
    X(4, "(l0)", _l0_)              /* fetch 0-th local variable */                                \
    X(4, "(l1)", _l1_)              /* fetch 1-st local variable */                                \
    X(4, "(l2)", _l2_)              /* fetch 2-nd local variable */                                \
    X(4, "(l3)", _l3_)              /* fetch 3-rd local variable */                                \
    X(4, "(l4)", _l4_)              /* fetch 4-th local variable */                                \
    X(4, "(l5)", _l5_)              /* fetch 5-th local variable */                                \
    X(4, "(l6)", _l6_)              /* fetch 6-th local variable */                                \
    X(4, "(l7)", _l7_)              /* fetch 7-th local variable */                                \
    X(4, "(l8)", _l8_)              /* fetch 8-th local variable */                                \
    X(4, "(l9)", _l9_)              /* fetch 9-th local variable */                                \
    X(4, "(la)", _la_)              /* fetch 10-th local variable */                               \
    X(4, "(lb)", _lb_)              /* fetch 11-th local variable */                               \
    X(4, "(lc)", _lc_)              /* fetch 12-th local variable */                               \
    X(4, "(ld)", _ld_)              /* fetch 13-th local variable */                               \
    X(4, "(le)", _le_)              /* fetch 14-th local variable */                               \
    X(4, "(lf)", _lf_)              /* fetch 15-th local variable */                               \
    X(4, "(lx)", _lx_)              /* followed by T(N), fetch N-th local variable */              \
    X(10, "(lenter-1)", _lenter_1_) /* reserve space for 1 local variable  */                      \
    X(10, "(lenter-2)", _lenter_2_) /* reserve space for 2 local variables */                      \
    X(10, "(lenter-3)", _lenter_3_) /* reserve space for 3 local variables */                      \
    X(10, "(lenter-4)", _lenter_4_) /* reserve space for 4 local variables */                      \
    X(10, "(lenter-5)", _lenter_5_) /* reserve space for 5 local variables */                      \
    X(10, "(lenter-6)", _lenter_6_) /* reserve space for 6 local variables */                      \
    X(10, "(lenter-7)", _lenter_7_) /* reserve space for 7 local variables */                      \
    X(10, "(lenter-8)", _lenter_8_) /* reserve space for 8 local variables */                      \
    X(10, "(lenter-9)", _lenter_9_) /* reserve space for 9 local variables */                      \
    X(10, "(lenter-a)", _lenter_a_) /* reserve space for 10 local variables */                     \
    X(10, "(lenter-b)", _lenter_b_) /* reserve space for 11 local variables */                     \
    X(10, "(lenter-c)", _lenter_c_) /* reserve space for 12 local variables */                     \
    X(10, "(lenter-d)", _lenter_d_) /* reserve space for 13 local variables */                     \
    X(10, "(lenter-e)", _lenter_e_) /* reserve space for 14 local variables */                     \
    X(10, "(lenter-f)", _lenter_f_) /* reserve space for 15 local variables */                     \
    X(10, "(lenter-g)", _lenter_g_) /* reserve space for 16 local variables */                     \
    X(10, "(lenter-x)", _lenter_x_) /* followed by T(N), reserve space for N local variables */    \
    X(9, "(lexit-x)", _lexit_x_)    /* followed by T(N), release space for N local variables */    \
    X(9, "(lexit-1)", _lexit_1_)    /* release space for 1 local variable  */                      \
    X(9, "(lexit-2)", _lexit_2_)    /* release space for 2 local variables */                      \
    X(9, "(lexit-3)", _lexit_3_)    /* release space for 3 local variables */                      \
    X(9, "(lexit-4)", _lexit_4_)    /* release space for 4 local variables */                      \
    X(9, "(lexit-5)", _lexit_5_)    /* release space for 5 local variables */                      \
    X(9, "(lexit-6)", _lexit_6_)    /* release space for 6 local variables */                      \
    X(9, "(lexit-7)", _lexit_7_)    /* release space for 7 local variables */                      \
    X(9, "(lexit-8)", _lexit_8_)    /* release space for 8 local variables */                      \
    X(9, "(lexit-9)", _lexit_9_)    /* release space for 9 local variables */                      \
    X(9, "(lexit-a)", _lexit_a_)    /* release space for 10 local variables */                     \
    X(9, "(lexit-b)", _lexit_b_)    /* release space for 11 local variables */                     \
    X(9, "(lexit-c)", _lexit_c_)    /* release space for 12 local variables */                     \
    X(9, "(lexit-d)", _lexit_d_)    /* release space for 13 local variables */                     \
    X(9, "(lexit-e)", _lexit_e_)    /* release space for 14 local variables */                     \
    X(9, "(lexit-f)", _lexit_f_)    /* release space for 15 local variables */                     \
    X(9, "(lexit-g)", _lexit_g_)    /* release space for 16 local variables */                     \
    X(6, "(loop)", _loop_)                                                                         \
    X(9, "(missing)", _missing_)                                                                   \
    X(4, "(of)", _of_)           /* ( x y -- x| ) execution semantics of 'of'      */              \
    X(9, "(recurse)", _recurse_) /* ( x y -- x| ) execution semantics of 'recurse' */              \
    X(8, "(repeat)", _repeat_)                                                                     \
    X(7, "(until)", _until_)                                                                       \
    X(8, "(until0)", _until0_)                                                                     \
    X(7, "(while)", _while_)                                                                       \
    X(8, "(while0)", _while0_)                                                                     \
    X(11, "[#compiled]", _num_compiled_)                                                           \
    /* ( token category -- sys ) compile an unresolved jump. */                                    \
    X(14, "[compile-jump]", _compile_jump_)                                                        \
    /* ( -- sys ) compile an unresolved jump. must be followed by jump token and its category */   \
    X(18, "[compile-jump-lit]", _compile_jump_lit_)                                                \
    /* ( -- sys ) compile a non-jump token. must be followed by token and its category */          \
    X(17, "[compile-sys-lit]", _compile_sys_lit_)                                                  \
    X(13, "[cs-find-lit]", _cs_find_lit_) /* ( sys+ -- sys+ cs-depth ) followed by category */     \
    X(2, "-2", minus_two)                                                                          \
    X(2, "-1", minus_one)                                                                          \
    X(1, "0", zero)                                                                                \
    X(1, "1", one)                                                                                 \
    X(1, "2", two)                                                                                 \
    X(1, "3", three)                                                                               \
    X(1, "4", four)                                                                                \
    X(1, "5", five)                                                                                \
    X(1, "6", six)                                                                                 \
    X(1, "7", seven)                                                                               \
    X(1, "8", eight)                                                                               \
    X(2, "16", sixteen)                                                                            \
    X(3, "lp@", lp_fetch) /* ( -- addr-of-locals ) get current local variables address */          \
    X(3, "rp@", rp_fetch) /* ( R: x y -- x y ) ( -- &x ) get current return stack address */

#define DICT_WORDS_M64TH_IMPL(X)                                                                   \
    DICT_TOKENS_M64TH_IMPL(X)                                                                      \
    X(6, "(>lx,)", _to_lx_comma_) /* ( c-addr u N -- ) compile a store to N-th local variable */   \
    X(13, "(abort-quote)", _abort_quote_)   /* ( x c-addr u ) runtime part of abort" */            \
    X(14, "(check-stacks)", _check_stacks_) /* throw on stack underflow              */            \
    /* ( m6flags -- sys ) read non-blanks string, create new word for it. set LATEST */            \
    X(8, "(create)", _create_)                                                                     \
    X(21, "(defer-uninitialized)", _defer_uninitialized_) /* throw M6ERR_DEFER_UNINITIALIZED */    \
    /* ( nt -1|1 -- ) interpret or compile name. dtop == -1 if name is immediate */                \
    X(6, "(does)", _does_) /* ( -- ) replace execution semantics of latest word */                 \
    X(11, "(eval-name)", _eval_name_)                                                              \
    X(13, "(eval-number)", _eval_number_) /* ( x -- ) interpret or compile number */               \
    /* ( vec pos -- key &val next ) fetch entry from hashmap/cell bucket index */                  \
    X(21, "(hashmap-entry@/cell)", _hashmap_entry_fetch_cell_)                                     \
    /* ( vec pos -- key &val next ) fetch entry from hashmap/int bucket index */                   \
    X(20, "(hashmap-entry@/int)", _hashmap_entry_fetch_int_)                                       \
    /* ( map key -- pos ) get bucket index for key in hashmap/cell */                              \
    X(22, "(hashmap-indexof/cell)", _hashmap_indexof_cell_)                                        \
    /* ( map key -- pos ) get bucket index for key in hashmap/int */                               \
    X(21, "(hashmap-indexof/int)", _hashmap_indexof_int_)                                          \
    X(17, "(locals-allocate)", _locals_allocate_) /* ( -- ls ) allocate a new m6locals struct   */ \
    X(12, "(locals-add)", _locals_add_)         /* ( ls c-addr u -- )   create a local variable */ \
    X(14, "(locals-clear)", _locals_clear_)     /* ( ls -- )         remove all local variables */ \
    X(13, "(locals-find)", _locals_find_)       /* ( ls c-addr u -- idx|-1) find local variable */ \
    X(14, "(locals-first)", _locals_first_)     /* ( ls   -- ls l|0  ) get first local variable */ \
    X(13, "(locals-next)", _locals_next_)       /* ( ls l -- ls l'|0 ) get  next local variable */ \
    X(16, "(locals-set-idx)", _locals_set_idx_) /* ( ls   -- )   set indexes of local variables */ \
    /*  find an optimized sequence to replace a single token being compiled. */                    \
    X(17, "(optimize-1token)", _optimize_1token_) /* ( tok-addr -- counted-tokens|0 ) */           \
    /*  find an optimized sequence to replace 2 tokens being compiled. */                          \
    X(17, "(optimize-2token)", _optimize_2token_) /* ( tok-addr -- counted-tokens|0 ) */           \
    /*  find a mid-priority optimized sequence to replace 2 tokens being compiled. */              \
    X(25, "(optimize-2token-midprio)", _optimize_2token_midprio_) /* ( tok-addr -- ctokens|0 ) */  \
    /*  find a low-priority optimized sequence to replace 2 tokens being compiled. */              \
    X(25, "(optimize-2token-lowprio)", _optimize_2token_lowprio_) /* ( tok-addr -- ctokens|0 ) */  \
    /* find an optimized sequence to replace three tokens being compiled, */                       \
    /* which may be part of control flow i.e. 'if' 'else' 'case' etc.  */                          \
    X(16, "(optimize-3jump)", _optimize_3jump_) /* ( tok-addr -- counted-tokens|0 ) */             \
    /* find an optimized sequence to replace three tokens being compiled, */                       \
    /* related to local variables.  */                                                             \
    X(17, "(optimize-3local)", _optimize_3local_) /* ( tok-addr -- counted-tokens|0 ) */           \
    /*  find an optimized sequence to replace 3 tokens being compiled. */                          \
    X(17, "(optimize-3token)", _optimize_3token_) /* ( tok-addr -- counted-tokens|0 ) */           \
    /*  find an optimized sequence to replace 4 tokens being compiled. */                          \
    X(17, "(optimize-4token)", _optimize_4token_) /* ( tok-addr -- counted-tokens|0 ) */           \
    /*  find an optimized sequence to replace 5 tokens being compiled. */                          \
    X(17, "(optimize-5token)", _optimize_5token_) /* ( tok-addr -- counted-tokens|0 ) */           \
    /*  find an optimized sequence to replace 7 tokens being compiled. */                          \
    X(17, "(optimize-7token)", _optimize_7token_) /* ( tok-addr -- counted-tokens|0 ) */           \
    /*  find an optimized sequence to replace N tokens being compiled. */                          \
    X(17, "(optimize-tokens)", _optimize_tokens_) /* ( tok-addr u -- counted-tokens u' | 0 0 ) */  \
    /* copy and optimize at least one token from src to HERE. updates HERE src and u */            \
    X(18, "(optimize-tokens,)", _optimize_tokens_comma_) /* ( src u -- src' u' ) */                \
    /* find an optimized sequence to replace '[ x ] literal' */                                    \
    X(18, "(optimize-literal)", _optimize_literal_) /* ( x -- token t | x f ) */                   \
    X(15, "(repl-type-ack)", _repl_type_ack_)                                                      \
    X(10, "(to-value)", _to_value_) /* ( nt -- ) execute or compile a store to a VALUE */          \
    /* ( -- ) parse words and skip them until :} is found */                                       \
    X(14, "(skip-until:})", _skip_until_colon_brace_)                                              \
    /* ( -- ls ) allocate m64th->locals data structure if not present */                           \
    X(22, "(user-locals-allocate)", _user_locals_allocate_)                                        \
    /* ( -- ) remove all local variables from m64th->locals */                                     \
    X(19, "(user-locals-clear)", _user_locals_clear_)                                              \
    /* ( -- ) set indexes of local variables in m64th->locals */                                   \
    X(21, "(user-locals-set-idx)", _user_locals_set_idx_)                                          \
    /* ({:found|) ( i j -- ^j i ) update {: internal state to remember that | was found */         \
    X(10, "({:found|)", _brace_colon_found_pipe_)                                                  \
    X(15, "[compile-local]", _compile_local_) /* ( idx -- ) compile a local variable fetch */      \
    /* ( n1_before_pipe n2_after_pipe -- ) compile code to initialize local variables */           \
    X(22, "[compile-lenter]", _compile_lenter_)                                                    \
    X(7, "[finish", _finish_)  /* ( sys -- ) finish compiling a word, make it findable   */        \
    X(8, "[inline]", _inline_) /* ( nt -- ) inline a call to word into XT being compiled */        \
    X(14, "[inline-value]", _inline_value_) /* ( nt -- ) inline a VALUE into XT being compiled */  \
    X(12, "[inline-var]", _inline_var_) /* ( nt -- ) inline a VARIABLE into XT being compiled */   \
    X(17, "[latest-optimize]", _latest_optimize_) /* try to optimize last created XT    */         \
    X(10, "[optimize]", _optimize_)               /* optimize current XT being compiled */         \
    X(15, "[optimize-opts]", _optimize_opts_) /* ( opts -- ) optimize current XT being compiled */ \
    /* optimize exactly HERE-XT tokens starting from XT. optimized tokens are initially written */ \
    /* to HERE and up, then copied back to XT and up. updates HERE. */                             \
    /* return t if something was optimized, else false */                                          \
    X(15, "[optimize-once]", _optimize_once_) /* ( opts -- t|f ) */                                \
    /* copy and optimize exactly u tokens from XT+offset to HERE. updates HERE. */                 \
    X(14, "[optimize-xt,]", _optimize_xt_comma_)  /* ( offset u opts -- ) */                       \
    X(11, "[recompile]", _recompile_)             /* rebuild XT jump offsets after optimization */ \
    X(17, "[recompile-token]", _recompile_token_) /* recompile one token after optimization */     \
    X(22, "[resolve-begin-repeat]", _resolve_begin_repeat_) /* common back-end of 'begin..' */     \
    X(19, "[resolve-jump-here]", _resolve_jump_here_) /* ( orig -- ) resolve a jump to here */     \
    /* ( dest orig -- ) resolve a jump from orig to dest */                                        \
    X(20, "[resolve-jump-there]", _resolve_jump_there_)                                            \
    X(14, "[resolve-loop]", _resolve_loop_) /* common back-end of 'loop' and '+loop'        */     \
    X(20, "(token-consumed-ip,)", _token_consumed_ip_comma_) /* ( tok -- ) */                      \
    X(23, "[throw-compile-only-xt]", _throw_compile_only_xt_)                                      \
    X(24, "[throw-if-not-compiling]", _throw_if_not_compiling_)                                    \
    X(8, "[until,]", _until_comma_) /* compile one of 'until' '(until)' '(until0)'    */           \
    X(9, "char>base", char_to_base) /* convert '#' to 10, '$' to 16, '%' to 2, else 0 */           \
    X(6, "char>u", char_to_u) /* convert numeric digit from char to unsigned number, else -1 */    \
    /* ( caddr n -- caddr' n' base ) convert prefix # $ % to base, else fetch current base   */    \
    X(11, "string>base", string_to_base)                                                           \
    /* ( caddr n -- caddr' n' ch ) convert "'x'" to 'x' for any char x, else -1 */                 \
    X(11, "string>char", string_to_char)                                                           \
    X(11, "string>sign", string_to_sign) /* ( caddr n -- caddr' n' sign ) parse initial '-' */     \
    /* ( caddr n base -- caddr' n' u ) convert string from base to unsigned number */              \
    X(13, "string&base>u", string_base_to_u)                                                       \
    X(6, "u>char", u_to_char) /* convert unsigned number to to char in current base */

/* ------- m64th-* -------------------------------------------------------------------------------
 */
#define DICT_TOKENS_M64TH(X)  /* contains all DICT_TOKENS_M64TH_* */                               \
    DICT_TOKENS_M64TH_USER(X) /*                                                            */     \
    DICT_TOKENS_M64TH_ASM(X)  /*                                                            */     \
    DICT_TOKENS_M64TH_C(X)    /*                                                            */     \
    DICT_TOKENS_M64TH_CORE(X) /*                                                            */     \
    DICT_TOKENS_M64TH_IMPL(X)

#define DICT_WORDS_M64TH(X)  /* contains all DICT_WORDS_M64TH_* */                                 \
    DICT_WORDS_M64TH_USER(X) /*                                                            */      \
    DICT_WORDS_M64TH_ASM(X)  /*                                                            */      \
    DICT_WORDS_M64TH_C(X)    /*                                                            */      \
    DICT_WORDS_M64TH_CORE(X) /*                                                            */      \
    DICT_WORDS_M64TH_IMPL(X) /*                                                            */

#endif /* M64TH_INCLUDE_DICT_M64TH_MH */
