/**
 * Copyright (C) 2020 Massimiliano Ghilardi
 *
 * This file is part of m4th.
 *
 * m4th is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * m4th is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with m4th.  If not, see <https://www.gnu.org/licenses/>.
 */

#ifndef M4TH_ARM64_ASM_MH
#define M4TH_ARM64_ASM_MH

#include "../include/asm.mh"
#include "../include/macro.mh"
#include "sz.mh"

#define IMM(constant) constant /* immediate constant */

/*
 * arm64 ABI:
 * argument registers:     x0 ... x7
 * return   registers:     x0 x1. also x8 for wider returns
 * caller-saved registers: x9 ... x17 and argument/return registers
 * callee-saved registers: x18 ... x30 and sp (i.e. x31)
 *  note: x18 is reserved as 'platform register' at least on OS X and Windows
 *  note: x29 is frame pointer, it shoud point to previous x29,x30 pair on C stack
 *  note: x30 is link register 'lr', automatically set to return addr by ASM calls
 */

#define REG0 x0 /* scratch register 0 */
#define REG1 x1 /* scratch register 1 */
#define REG2 x2 /* scratch register 2 */
#define REG3 x3 /* scratch register 3 */
#define REG4 x4 /* scratch register 4 */
/* additional scratch registers:      x5 .. x17           */
/* additional callee-saved registers: x18 x29 x30         */

#define REG0b w0   /* low  8 bits of REG0 */
#define REG0h w0   /* low 16 bits of REG0 */
#define REG0w w0   /* low 32 bits of REG0 */
#define REG0t w0   /* (m4token)REG0       */
#define REG0_sb x0 /* sign-extend  8 bits into REG0 */
#define REG0_sh x0 /* sign-extend 16 bits into REG0 */
#define REG0_sw x0 /* sign-extend 32 bits into REG0 */
#define REG0_st x0 /* sign-extend m4token into REG0 */
#define REG0_ub w0 /* zero-extend  8 bits into REG0 */
#define REG0_uh w0 /* zero-extend 16 bits into REG0 */
#define REG0_uw w0 /* zero-extend 32 bits into REG0 */
#define REG0_ut w0 /* zero-extend m4token into REG0 */

#define REG1b w1   /* low 8 bits of REG1 */
#define REG1h w1   /* low 16 bits of REG1 */
#define REG1w w1   /* low 32 bits of REG1 */
#define REG1t w1   /* (m4token)REG1       */
#define REG1_sb x1 /* sign-extend  8 bits into REG1 */
#define REG1_sh x1 /* sign-extend 16 bits into REG1 */
#define REG1_sw x1 /* sign-extend 32 bits into REG1 */
#define REG1_st x1 /* sign-extend m4token into REG1 */
#define REG1_ub w1 /* zero-extend  8 bits into REG1 */
#define REG1_uh w1 /* zero-extend 16 bits into REG1 */
#define REG1_uw w1 /* zero-extend 32 bits into REG1 */
#define REG1_ut w1 /* zero-extend m4token into REG1 */

#define REG2b w2   /* low  8 bits of REG2 */
#define REG2h w2   /* low 16 bits of REG2 */
#define REG2w w2   /* low 32 bits of REG2 */
#define REG2t w2   /* (m4token)REG2       */
#define REG2_sb x2 /* sign-extend  8 bits into REG2 */
#define REG2_sh x2 /* sign-extend 16 bits into REG2 */
#define REG2_sw x2 /* sign-extend 32 bits into REG2 */
#define REG2_st x2 /* sign-extend m4token into REG2 */
#define REG2_ub w2 /* zero-extend  8 bits into REG2 */
#define REG2_uh w2 /* zero-extend 16 bits into REG2 */
#define REG2_uw w2 /* zero-extend 32 bits into REG2 */
#define REG2_ut w2 /* zero-extend m4token into REG2 */

#define REG3b w3   /* low  8 bits of REG3 */
#define REG3h w3   /* low 16 bits of REG3 */
#define REG3w w3   /* low 32 bits of REG3 */
#define REG3t w3   /* (m4token)REG3       */
#define REG3_sb x3 /* sign-extend  8 bits into REG3 */
#define REG3_sh x3 /* sign-extend 16 bits into REG3 */
#define REG3_sw x3 /* sign-extend 32 bits into REG3 */
#define REG3_st x3 /* sign-extend m4token into REG3 */
#define REG3_ub w3 /* zero-extend  8 bits into REG3 */
#define REG3_uh w3 /* zero-extend 16 bits into REG3 */
#define REG3_uw w3 /* zero-extend 32 bits into REG3 */
#define REG3_ut w3 /* zero-extend m4token into REG3 */

#define REG4b w4   /* low  8 bits of REG4 */
#define REG4h w4   /* low 16 bits of REG4 */
#define REG4w w4   /* low 32 bits of REG4 */
#define REG4t w4   /* (m4token)REG4       */
#define REG4_sb x4 /* sign-extend  8 bits into REG4 */
#define REG4_sh x4 /* sign-extend 16 bits into REG4 */
#define REG4_sw x4 /* sign-extend 32 bits into REG4 */
#define REG4_st x4 /* sign-extend m4token into REG4 */
#define REG4_ub w4 /* zero-extend  8 bits into REG4 */
#define REG4_uh w4 /* zero-extend 16 bits into REG4 */
#define REG4_uw w4 /* zero-extend 32 bits into REG4 */
#define REG4_ut w4 /* zero-extend m4token into REG4 */

#define DTOP x20    /* value of first data stack element */
#define DTOPb w20   /* low  8 bits of DTOP */
#define DTOPh w20   /* low 16 bits of DTOP */
#define DTOPw w20   /* low 32 bits of DTOP */
#define DTOPt w20   /* (m4token)DTOP       */
#define DTOP_sb x20 /* sign-extend  8 bits into DTOP */
#define DTOP_sh x20 /* sign-extend 16 bits into DTOP */
#define DTOP_sw x20 /* sign-extend 32 bits into DTOP */
#define DTOP_st x20 /* sign-extend m4token into DTOP */
#define DTOP_ub w20 /* zero-extend  8 bits into DTOP */
#define DTOP_uh w20 /* zero-extend 16 bits into DTOP */
#define DTOP_uw w20 /* zero-extend 32 bits into DTOP */
#define DTOP_ut w20 /* zero-extend m4token into DTOP */

#define RTOP x22    /* value of first return stack element */
#define RTOPb w22   /* low  8 bits of RTOP */
#define RTOPh w22   /* low 16 bits of RTOP */
#define RTOPw w22   /* low 32 bits of RTOP */
#define RTOPt w22   /* (m4token)RTOP       */
#define RTOP_sb x22 /* sign-extend  8 bits into RTOP */
#define RTOP_sh x22 /* sign-extend 16 bits into RTOP */
#define RTOP_sw x22 /* sign-extend 32 bits into RTOP */
#define RTOP_st x22 /* sign-extend m4token into RTOP */
#define RTOP_ub w22 /* zero-extend  8 bits into RTOP */
#define RTOP_uh w22 /* zero-extend 16 bits into RTOP */
#define RTOP_uw w22 /* zero-extend 32 bits into RTOP */
#define RTOP_ut w22 /* zero-extend m4token into RTOP */

#define DSTK x21 /* pointer to second data stack element             */
#define RSTK x23 /* pointer to second return stack element           */
#define LOCL x24 /* pointer to local variables (inside return stack) */
#define M4TH x25 /* pointer to C struct field &m4th->user            */
#define HERE x26 /* pointer to first available code/data location    */
#define FTBL x27 /* pointer to table m4func[m4token] containing asm function addresses */
#define IP x28   /* forth bytecode instruction pointer               */
#define VM x19   /* pointer to '(vm)' bytecode interpreter           */

#define R000 xzr  /* 64 bit, always 0 */
#define R000b wzr /*  8 bit, always 0 */
#define R000h wzr /* 16 bit, always 0 */
#define R000w wzr /* 32 bit, always 0 */

/* clang-format off */

#define ADD2(src,dst)     add   dst, dst, src;      /* dst += src     */
#define ADD4(a,b,shl,dst) add   dst, a, b, lsl shl; /* dst  = a_reg + (b_reg << shl) */
#define ADDI(a,b,dst)     add   dst, a, IMM(b);     /* dst  = a_reg + b_imm */
#define AND2(src,dst)     and   dst, dst, src;      /* dst &= src     */
#define AND3(a,b,dst)     and   dst, a, b;          /* dst  = a & b   */
#define AT0(reg)                [reg]               /* mem[reg]       */
#define ATx(reg,imm)            [reg,imm]           /* mem[reg+imm]   */
#define ATxy(reg1,reg2,rmul) CAT2(ATxy_,rmul)(reg1,reg2) /* mem[reg1+reg2*rmul] */
#define ATxy_1(reg1,reg2)       [reg1,reg2]         /* mem[reg1+reg2]   */
#define ATxy_2(reg1,reg2)       [reg1,reg2,lsl 1]   /* mem[reg1+reg2*2] */
#define ATxy_4(reg1,reg2)       [reg1,reg2,lsl 2]   /* mem[reg1+reg2*4] */
#define ATxy_8(reg1,reg2)       [reg1,reg2,lsl 3]   /* mem[reg1+reg2*8] */
#define DEC1(dst)         sub   dst, dst, 1;        /* dst--          */
#define DIV3(a,b,dst)     sdiv  dst, a, b;          /* dst  = a / b   */
#define INC1(dst)         add   dst, dst, 1;        /* dst++          */
#define LOAD(reg, ...)    ldr   reg, __VA_ARGS__;   /* reg  = *at     */
#define MOVE(src,dst)     mov   dst, src;           /* dst  = src     */
#define MUL2(src,dst)     mul   dst, dst, src;      /* dst *= src     */
#define NEG1(dst)         neg   dst, dst;           /* dst  = -dst    */
#define NOT1(dst)         mvn   dst, dst;           /* dst  = ~dst    */
#define NOT2(src,dst)     mvn   dst, src;           /* dst  = ~src    */
#define ORR2(src,dst)     orr   dst, dst, src;      /* dst |= src     */
#define SAR2(src,dst)     asr   dst, dst, src;      /* dst >>= src    signed   */
#define SHL2(src,dst)     lsl   dst, dst, src;      /* dst <<= src    */
#define SHR2(src,dst)     lsr   dst, dst, src;      /* dst >>= src    unsigned */
#define SUB2(src,dst)     sub   dst, dst, src;      /* dst -= src     */
#define SUB3(a,b,dst)     sub   dst, a, b;          /* dst  = a - b   */
#define STOR(reg, ...)    str   reg, __VA_ARGS__;   /* *at  = reg     */
#define XOR2(src,dst)     eor   dst, dst, src;      /* dst ^= src     */
#define XSUB2(a,b)        sub   b,   a, b;          /* b    = a - b   */
#define ZERO(dst)         mov   dst, 0;             /* dst  = 0       */

/* clang-format on */

#define LD_sb(reg, ...) ldrsb reg##_sb, __VA_ARGS__; /* reg = *(int8_t *)at   */
#define LD_sh(reg, ...) ldrsh reg##_sh, __VA_ARGS__; /* reg = *(int16_t*)at   */
#define LD_sw(reg, ...) ldrsw reg##_sw, __VA_ARGS__; /* reg = *(int32_t*)at   */
#define LD_st(reg, ...) ldrsh reg##_st, __VA_ARGS__; /* reg = *(signed m4token*)at */

#define LD_ub(reg, ...) ldrb reg##_ub, __VA_ARGS__; /* reg = *(uint8_t *)at  */
#define LD_uh(reg, ...) ldrh reg##_uh, __VA_ARGS__; /* reg = *(uint16_t*)at  */
#define LD_uw(reg, ...) ldr reg##_uw, __VA_ARGS__;  /* reg = *(uint32_t*)at  */
#define LD_ut(reg, ...) ldrh reg##_ut, __VA_ARGS__; /* reg = *(unsigned m4token*)at */

/* no difference between signed and unsigned STOR* */
#define STORb(reg, ...) strb reg##b, __VA_ARGS__; /* *(uint8_t *)at  = reg */
#define STORh(reg, ...) strh reg##h, __VA_ARGS__; /* *(uint16_t*)at  = reg */
#define STORw(reg, ...) str reg##w, __VA_ARGS__;  /* *(uint32_t*)at  = reg */
#define STORt(reg, ...) strh reg##t, __VA_ARGS__; /* *(m4token *)at  = reg */

#define ASM_CALL(func)               /* raw/native assembly: call function        */               \
    RPUSH(lr)                        /*                                           */               \
    ASM_CALL_BODY(func)              /*                                           */               \
    RPOP(lr)                         /*                                           */
#define ASM_CALL_BODY(func) bl func; /*                                           */
#define ASM_RET() ret;               /* raw/native assembly: return from function */

#define TOKEN_CALL_PREPARE() /* cheat slightly to reduce code size: reorder rstack    */           \
    RPUSH(VM)                /* acceptable, functions must not access caller's rstack */
#define TOKEN_CALL_CLEANUP() /* _______________________________________________________________ */ \
    RPOP(VM)
#define TOKEN_CALL_BODY(func, retlabel) /* raw/native assembly: call token->token           */     \
    ADDROF_1M(TO(retlabel), VM)                                                                    \
    b func;                                                                                        \
    LABEL(retlabel)
#define TOKEN_CALL_NOTHROW(func, retlabel) /* call token from another token         */             \
    TOKEN_CALL_PREPARE()                   /* the callee must NOT throw because     */             \
    TOKEN_CALL_BODY(func, retlabel)        /* it will receive a mangled VM register */             \
    TOKEN_CALL_CLEANUP()                   /*                                       */

#define JA(reg, val, label) /*  if reg u>  val jump to label */                                    \
    cmp reg, val;                                                                                  \
    b.hi label;
#define JAE(reg, val, label) /* if reg u>= val jump to label */                                    \
    cmp reg, val;                                                                                  \
    b.hs label;
#define JB(reg, val, label) /*  if reg u<  val jump to label */                                    \
    cmp reg, val;                                                                                  \
    b.lo label;
#define JBE(reg, val, label) /* if reg u<= val jump to label */                                    \
    cmp reg, val;                                                                                  \
    b.ls label;
#define JG(reg, val, label) /*  if reg  >  val jump to label */                                    \
    cmp reg, val;                                                                                  \
    b.gt label;
#define JGE(reg, val, label) /* if reg  >= val jump to label */                                    \
    cmp reg, val;                                                                                  \
    b.ge label;
#define JL(reg, val, label) /*  if reg  <  val jump to label */                                    \
    cmp reg, val;                                                                                  \
    b.lt label;
#define JLE(reg, val, label) /* if reg  <= val jump to label */                                    \
    cmp reg, val;                                                                                  \
    b.le label;
#define JEQ(reg, val, label) /* if reg  =  val jump to label */                                    \
    cmp reg, val;                                                                                  \
    b.eq label;
#define JNE(reg, val, label) /* if reg  <> val jump to label */                                    \
    cmp reg, val;                                                                                  \
    b.ne label;
#define JNZ(reg, label) /* if reg != 0 jump to label    */ cbnz reg, label;
#define JZ(reg, label) /* if reg == 0 jump to label    */ cbz reg, label;
#define JUMP(label) /* unconditional jump to label ____________________________________________ */ \
    b label;

/* clang-format off */

#define ADDROF_4G(sym, dst) /* load symbol address into dst. symbol must be within +/- 4GB */ \
    adrp  dst,  sym;             /* high 21 bits */ \
    add   dst,  dst,  :lo12:sym; /* low  12 bits */

#define ADDROF_1M(sym, dst) /* load symbol address into dst. symbol must be within +/- 1MB */ \
    adr   dst,  sym;             /* low 21 bits */

#define DPUSH(reg)        str   reg, [DSTK, -SZ]!;        /* push reg to second data stack element */
#define DPUSH2(reg1,reg2) stp   reg2, reg1, [DSTK, -SZ2]!;/* push reg1, then reg2 to data stack */
#define DPUSH__DTOP()     DPUSH(DTOP)

#define DPOP(reg)         ldr   reg, [DSTK], SZ;         /* pop second data stack element into reg */
#define DPOP2(reg1,reg2)  ldp   reg1, reg2, [DSTK], SZ2; /* pop 2nd, 3rd data stack elements into reg1, reg2 */
#define DPOP___DTOP()     DPOP(DTOP)

#define RPUSH(reg)       str   reg, [RSTK, -SZ]!;        /* push val to second return stack element */
#define RPUSH2(reg1,reg2) stp  reg2, reg1, [RSTK, -SZ2]!;/* push reg1, then reg2 to return stack */

#define RPOP(reg)        ldr   reg, [RSTK], SZ;          /* pop second return stack element into val */
#define RPOP2(reg1,reg2) ldp   reg1, reg2, [RSTK], SZ2;  /* pop 2nd, 3rd return stack elements into reg1, reg2 */

/* clang-format on */

#define NEXT0() /* jump to current instruction. useful after manually updating IP _____________ */ \
    br VM;

#define NEXT() /* jump to following instruction _______________________________________________ */ \
    br VM;

#define NEXT2() /* skip 2 bytes, jump to following instruction */                                  \
    ADD2(IMM(2), IP);                                                                              \
    br VM;

#define NEXT4() /* skip 4 bytes, jump to following instruction */                                  \
    ADD2(IMM(4), IP);                                                                              \
    br VM;

#define NEXT8() /* skip 8 bytes (four instructions), jump to following instruction */              \
    ADD2(IMM(8), IP);                                                                              \
    br VM;

#define NEXTT() CAT2(NEXT, SZt)()   /* skip SZt bytes,   jump to following instruction */
#define NEXTT2() CAT2(NEXT, SZt2)() /* skip SZt*2 bytes, jump to following instruction */
#define NEXTCELL() CAT2(NEXT, SZ)() /* skip SZ bytes,    jump to following instruction */

#define RELJUMP()                                                                                  \
    LD_st(REG0, AT(IP), IMM(SZt)) /* REG0 = IP jump offset; IP += SZt       */                     \
        ADD4(IP, REG0, PSZt, IP)  /* IP = TARGET_IP - SZt                   */                     \
        NEXT0()                   /* jump to TARGET_IP                      */

#endif /* M4TH_ARM64_ASM_MH */
