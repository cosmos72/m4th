/**
 * Copyright (C) 2020 Massimiliano Ghilardi
 *
 * This file is part of m4th.
 *
 * m4th is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * m4th is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with m4th.  If not, see <https://www.gnu.org/licenses/>.
 */

#ifndef M4TH_ARM_ASM_MH
#define M4TH_ARM_ASM_MH

#include "../include/asm.mh"
#include "../include/macro.mh"
#include "sz.mh"

#define IMM(constant) constant /* immediate constant */

/*
 * arm ABI:
 * argument registers:     r0 ... r3 then on stack
 * return   registers:     r0 ... r3 then on stack
 * caller-saved registers: r12 and argument/return registers
 * callee-saved registers: r4 ... r11, sp = r13, lr = r14
 */

#define REG0 r0  /* scratch register 0 */
#define REG1 r1  /* scratch register 1 */
#define REG2 r2  /* scratch register 2 */
#define REG3 r3  /* scratch register 3 */
#define REG4 r12 /* scratch register 4 */
/* additional callee-saved registers:  */

#define REG0b r0   /* low  8 bits of REG0 */
#define REG0h r0   /* low 16 bits of REG0 */
#define REG0w r0   /* low 32 bits of REG0 */
#define REG0t r0   /* (m4token)REG0       */
#define REG0_sb r0 /* sign-extend  8 bits into REG0 */
#define REG0_sh r0 /* sign-extend 16 bits into REG0 */
#define REG0_sw r0 /* sign-extend 32 bits into REG0 */
#define REG0_st r0 /* sign-extend m4token into REG0 */
#define REG0_ub r0 /* zero-extend  8 bits into REG0 */
#define REG0_uh r0 /* zero-extend 16 bits into REG0 */
#define REG0_uw r0 /* zero-extend 32 bits into REG0 */
#define REG0_ut r0 /* zero-extend m4token into REG0 */

#define REG1b w1   /* low 8 bits of REG1 */
#define REG1h w1   /* low 16 bits of REG1 */
#define REG1w w1   /* low 32 bits of REG1 */
#define REG1t w1   /* (m4token)REG1       */
#define REG1_sb r1 /* sign-extend  8 bits into REG1 */
#define REG1_sh r1 /* sign-extend 16 bits into REG1 */
#define REG1_sw r1 /* sign-extend 32 bits into REG1 */
#define REG1_st r1 /* sign-extend m4token into REG1 */
#define REG1_ub r1 /* zero-extend  8 bits into REG1 */
#define REG1_uh r1 /* zero-extend 16 bits into REG1 */
#define REG1_uw r1 /* zero-extend 32 bits into REG1 */
#define REG1_ut r1 /* zero-extend m4token into REG1 */

#define REG2b r2   /* low  8 bits of REG2 */
#define REG2h r2   /* low 16 bits of REG2 */
#define REG2w r2   /* low 32 bits of REG2 */
#define REG2t r2   /* (m4token)REG2       */
#define REG2_sb r2 /* sign-extend  8 bits into REG2 */
#define REG2_sh r2 /* sign-extend 16 bits into REG2 */
#define REG2_sw r2 /* sign-extend 32 bits into REG2 */
#define REG2_st r2 /* sign-extend m4token into REG2 */
#define REG2_ub r2 /* zero-extend  8 bits into REG2 */
#define REG2_uh r2 /* zero-extend 16 bits into REG2 */
#define REG2_uw r2 /* zero-extend 32 bits into REG2 */
#define REG2_ut r2 /* zero-extend m4token into REG2 */

#define REG3b r3   /* low  8 bits of REG3 */
#define REG3h r3   /* low 16 bits of REG3 */
#define REG3w r3   /* low 32 bits of REG3 */
#define REG3t r3   /* (m4token)REG3       */
#define REG3_sb r3 /* sign-extend  8 bits into REG3 */
#define REG3_sh r3 /* sign-extend 16 bits into REG3 */
#define REG3_sw r3 /* sign-extend 32 bits into REG3 */
#define REG3_st r3 /* sign-extend m4token into REG3 */
#define REG3_ub r3 /* zero-extend  8 bits into REG3 */
#define REG3_uh r3 /* zero-extend 16 bits into REG3 */
#define REG3_uw r3 /* zero-extend 32 bits into REG3 */
#define REG3_ut r3 /* zero-extend m4token into REG3 */

#define REG4b r12   /* low  8 bits of REG4 */
#define REG4h r12   /* low 16 bits of REG4 */
#define REG4w r12   /* low 32 bits of REG4 */
#define REG4t r12   /* (m4token)REG4       */
#define REG4_sb r12 /* sign-extend  8 bits into REG4 */
#define REG4_sh r12 /* sign-extend 16 bits into REG4 */
#define REG4_sw r12 /* sign-extend 32 bits into REG4 */
#define REG4_st r12 /* sign-extend m4token into REG4 */
#define REG4_ub r12 /* zero-extend  8 bits into REG4 */
#define REG4_uh r12 /* zero-extend 16 bits into REG4 */
#define REG4_uw r12 /* zero-extend 32 bits into REG4 */
#define REG4_ut r12 /* zero-extend m4token into REG4 */

#define DTOP r4    /* value of first data stack element */
#define DTOPb r4   /* low  8 bits of DTOP */
#define DTOPh r4   /* low 16 bits of DTOP */
#define DTOPw r4   /* low 32 bits of DTOP */
#define DTOPt r4   /* (m4token)DTOP       */
#define DTOP_sb r4 /* sign-extend  8 bits into DTOP */
#define DTOP_sh r4 /* sign-extend 16 bits into DTOP */
#define DTOP_sw r4 /* sign-extend 32 bits into DTOP */
#define DTOP_st r4 /* sign-extend m4token into DTOP */
#define DTOP_ub r4 /* zero-extend  8 bits into DTOP */
#define DTOP_uh r4 /* zero-extend 16 bits into DTOP */
#define DTOP_uw r4 /* zero-extend 32 bits into DTOP */
#define DTOP_ut r4 /* zero-extend m4token into DTOP */

#define RTOP r6    /* value of first return stack element */
#define RTOPb r6   /* low  8 bits of RTOP */
#define RTOPh r6   /* low 16 bits of RTOP */
#define RTOPw r6   /* low 32 bits of RTOP */
#define RTOPt r6   /* (m4token)RTOP       */
#define RTOP_sb r6 /* sign-extend  8 bits into RTOP */
#define RTOP_sh r6 /* sign-extend 16 bits into RTOP */
#define RTOP_sw r6 /* sign-extend 32 bits into RTOP */
#define RTOP_st r6 /* sign-extend m4token into RTOP */
#define RTOP_ub r6 /* zero-extend  8 bits into RTOP */
#define RTOP_uh r6 /* zero-extend 16 bits into RTOP */
#define RTOP_uw r6 /* zero-extend 32 bits into RTOP */
#define RTOP_ut r6 /* zero-extend m4token into RTOP */

#define DSTK r5  /* pointer to second data stack element */
#define RSTK r7  /* pointer to second return stack element */
#define M4TH r8  /* pointer to C struct m4th */
#define HERE r9  /* pointer to first available code/data location */
#define FTBL r10 /* pointer to table m4func[m4token] containing asm function addresses */
#define IP r11   /* instruction pointer */

#define Ln 0 /* number of local variables stored in registers */

/* clang-format off */

#define ADD2(src,dst)     add   dst, dst, src;      /* dst += src     */
#define ADD4(a,b,shl,dst) add   dst, a, b, lsl shl; /* dst  = a_reg + (b_reg << shl) */
#define ADDI(a,b,dst)     add   dst, a, IMM(b);     /* dst  = a_reg + b_imm */
#define AND2(src,dst)     and   dst, dst, src;      /* dst &= src     */
#define AT0(reg)                [reg]               /* mem[reg]       */
#define ATx(reg,imm)            [reg,imm]           /* mem[reg+imm]   */
#define ATxy(reg1,reg2,rmul) CAT2(ATxy_,rmul)(reg1,reg2) /* mem[reg1+reg2*rmul] */
#define ATxy_1(reg1,reg2)       [reg1,reg2]         /* mem[reg1+reg2]   */
#define ATxy_2(reg1,reg2)       [reg1,reg2,lsl 1]   /* mem[reg1+reg2*2] */
#define ATxy_4(reg1,reg2)       [reg1,reg2,lsl 2]   /* mem[reg1+reg2*4] */
#define ATxy_8(reg1,reg2)       [reg1,reg2,lsl 3]   /* mem[reg1+reg2*8] */
#define DEC1(dst)         sub   dst, dst, 1;        /* dst--          */
#define DIV3(a,b,dst)     sdiv  dst, a, b;          /* dst  = a / b   */
#define INC1(dst)         add   dst, dst, 1;        /* dst++          */
#define LOAD(reg,mem)     ldr   reg, mem;           /* reg  = *mem    */
#define MOVE(src,dst)     mov   dst, src;           /* dst  = src     */
#define MUL2(src,dst)     mul   dst, dst, src;      /* dst *= src     */
#define NEG1(dst)         neg   dst, dst;           /* dst  = -dst    */
#define NOT1(dst)         mvn   dst, dst;           /* dst  = ~dst    */
#define ORR2(src,dst)     orr   dst, dst, src;      /* dst |= src     */
#define SAR2(src,dst)     asr   dst, dst, src;      /* dst >>= src    signed   */
#define SHL2(src,dst)     lsl   dst, dst, src;      /* dst <<= src    */
#define SHR2(src,dst)     lsr   dst, dst, src;      /* dst >>= src    unsigned */
#define SUB2(src,dst)     sub   dst, dst, src;      /* dst -= src     */
#define SUB3(a,b,dst)     sub   dst, a, b;          /* dst  = a - b   */
#define STOR(reg,at)      str   reg, at;            /* *at  = reg     */
#define UDIV3(a,b,dst)    udiv  dst, a, b;          /* dst  = a / b   */
#define XOR2(src,dst)     eor   dst, dst, src;      /* dst ^= src     */
#define XSUB2(a,b)        sub   b,   a, b;          /* b    = a - b   */
#define ZERO(dst)         mov   dst, xzr;           /* dst  = 0       */

/* clang-format on */

#define LD_sb(reg, at) ldrsb reg##_sb, at; /* reg = *(int8_t *)at   */
#define LD_sh(reg, at) ldrsh reg##_sh, at; /* reg = *(int16_t*)at   */
#define LD_sw(reg, at) ldr reg##_sw, at;   /* reg = *(int32_t*)at   */
#define LD_st(reg, at) ldrsh reg##_st, at; /* reg = *(signed m4token*)at */

#define LD_ub(reg, at) ldrb reg##_ub, at; /* reg = *(uint8_t *)at  */
#define LD_uh(reg, at) ldrh reg##_uh, at; /* reg = *(uint16_t*)at  */
#define LD_uw(reg, at) ldr reg##_uw, at;  /* reg = *(uint32_t*)at  */
#define LD_ut(reg, at) ldrh reg##_ut, at; /* reg = *(unsigned m4token*)at */

/* no difference between signed and unsigned STOR* */
#define STORb(reg, at) strb reg##b, at; /* *(uint8_t *)at  = reg */
#define STORh(reg, at) strh reg##h, at; /* *(uint16_t*)at  = reg */
#define STORw(reg, at) str reg##w, at;  /* *(uint32_t*)at  = reg */
#define STORt(reg, at) strh reg##t, at; /* *(m4token *)at  = reg */

#define ASM_CALL(func)               /* raw/native assembly: call function        */               \
    RPUSH(lr)                        /*                                           */               \
    ASM_CALL_BODY(func)              /*                                           */               \
    RPOP(lr)                         /*                                           */
#define ASM_CALL_BODY(func) bl func; /*                                           */
#define ASM_RET() bx lr;             /* raw/native assembly: return               */

#define TOKEN_CALL_PREPARE() /* prepare to call token from another token ______________________ */ \
    RPUSH(VM)
#define TOKEN_CALL_CLEANUP() /* cleanup after call token->token _______________________________ */ \
    RPOP(VM)
#define TOKEN_CALL_BODY(func, retlabel) /* actually call token from another token _____________ */ \
    ADDROF_1M(TO(retlabel), VM)                                                                    \
    jmp func;                                                                                      \
    LABEL(retlabel)
#define TOKEN_CALL_NOTHROW(func, retlabel) /* call token from another token         */             \
    TOKEN_CALL_PREPARE()                   /* the callee must NOT throw because     */             \
    TOKEN_CALL_BODY(func, retlabel)        /* it will receive a mangled VM register */             \
    TOKEN_CALL_CLEANUP()                   /*                                       */

#define JA(reg, val, label) /*  if reg u>  val jump to label */                                    \
    cmp reg, val;                                                                                  \
    b.hi label;
#define JAE(reg, val, label) /* if reg u>= val jump to label */                                    \
    cmp reg, val;                                                                                  \
    b.hs label;
#define JB(reg, val, label) /*  if reg u<  val jump to label */                                    \
    cmp reg, val;                                                                                  \
    b.lo label;
#define JBE(reg, val, label) /* if reg u<= val jump to label */                                    \
    cmp reg, val;                                                                                  \
    b.ls label;
#define JG(reg, val, label) /*  if reg  >  val jump to label */                                    \
    cmp reg, val;                                                                                  \
    b.gt label;
#define JGE(reg, val, label) /* if reg  >= val jump to label */                                    \
    cmp reg, val;                                                                                  \
    b.ge label;
#define JL(reg, val, label) /*  if reg  <  val jump to label */                                    \
    cmp reg, val;                                                                                  \
    b.lt label;
#define JLE(reg, val, label) /* if reg  <= val jump to label */                                    \
    cmp reg, val;                                                                                  \
    b.le label;
#define JEQ(reg, val, label) /* if reg  =  val jump to label */                                    \
    cmp reg, val;                                                                                  \
    b.eq label;
#define JNE(reg, val, label) /* if reg  <> val jump to label */                                    \
    cmp reg, val;                                                                                  \
    b.ne label;
#define JNZ(reg, label) /* if reg != 0 jump to label    */ cbnz reg, label;
#define JZ(reg, label) /*  if reg == 0 jump to label    */ cbz reg, label;
#define JUMP(label) /*     unconditional jump to label ________________________________________ */ \
    b label;
#define JUMP_REG(reg) /*   unconditional jump to address stored in register ___________________ */ \
    br reg;

/* clang-format off */

#define ADDROF_4G(sym, dst) /* load symbol address into dst. symbol can be within +/- 4GB */ \
    TODO_ADDROF_4G
#define ADDROF_1M(sym, dst) /* load symbol address into dst. symbol can be within +/- 1MB */ \
    TODO_ADDROF_1M

#define DPUSH(val)       str val, [DSTK, -SZ]!; /* push val to second data stack element */
#define DPOP(val)        ldr val, [DSTK], SZ;   /* pop second data stack element into val */

#define RPUSH(val)       str val, [RSTK, -SZ]!; /* push val to second return stack element */
#define RPOP(val)        ldr val, [RSTK], SZ;   /* pop second return stack element into val */

/* clang-format on */

#define NEXT0() /* jump to current instruction. useful after manually updating IP _____________ */ \
    ASM_RET()

#define NEXT() /* jump to following instruction _______________________________________________ */ \
    ASM_RET()

#define NEXT2() /* skip 2 bytes, jump to following instruction */                                  \
    ADD2(IMM(2), IP)                                                                               \
    ASM_RET()

#define NEXT4() /* skip 4 bytes, jump to following instruction */                                  \
    ADD2(IMM(4), IP)                                                                               \
    ASM_RET()

#define NEXT8() /* skip 8 bytes (four instructions), jump to following instruction */              \
    ADD2(IMM(8), IP)                                                                               \
    ASM_RET()

#define NEXTT() CAT2(NEXT, SZt)()   /* skip SZt bytes,   jump to following instruction */
#define NEXTT2() CAT2(NEXT, SZt2)() /* skip SZt*2 bytes, jump to following instruction */
#define NEXTCELL() CAT2(NEXT, SZ)() /* skip SZ bytes,    jump to following instruction */

#define RELJUMP()                                                                                  \
    LD_st(REG0, AT(IP));        /* REG0 = IP jump offset       */                                  \
    add IP, IP, REG0, lsl PSZt; /* IP = TARGET_IP - SZt        */                                  \
    ADD2(IMM(SZt), IP);         /* IP = TARGET_IP              */                                  \
    NEXT0()                     /* jump to TARGET_IP           */

#endif /* M4TH_ARM_ASM_MH */
