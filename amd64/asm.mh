/**
 * Copyright (C) 2020 Massimiliano Ghilardi
 *
 * This file is part of m4th.
 *
 * m4th is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * m4th is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with m4th.  If not, see <https://www.gnu.org/licenses/>.
 */

#ifndef M4TH_AMD64_ASM_MH
#define M4TH_AMD64_ASM_MH

#include "../include/asm.mh"
#include "../include/macro.mh"
#include "sz.mh"

#define IMM(constant) $constant /* immediate constant */

/* clang-format off */

/*
 * SYS-V ABI:
 * argument registers:     %rdi %rsi %rdx %rcx %r8 %r9
 * return   registers:     %rax %rdx
 * caller-saved registers: %r10 %r11 and argument/return registers
 * callee-saved registers: %rbx %rbp %rsp %r12 %r13 %r14 %r15
 */
#define REG0  %r10  /* scratch register 0 */
#define REG1  %rax  /* scratch register 1 */
#define REG2  %rcx  /* scratch register 2 */
#define REG3  %rdx  /* scratch register 3 */
#define REG4  %r8   /* scratch register 4 */
/* additional scratch registers: %r9 */

#define REG0b   %r10b /* low  8 bits of REG0 */
#define REG0h   %r10w /* low 16 bits of REG0 */
#define REG0w   %r10d /* low 32 bits of REG0 */
#define REG0t   %r10w /* (m4token)REG0        */
#define REG0_sb %r10  /* sign-extend  8 bits into REG0 */
#define REG0_sh %r10  /* sign-extend 16 bits into REG0 */
#define REG0_sw %r10  /* sign-extend 32 bits into REG0 */
#define REG0_st %r10  /* sign-extend m4token into REG0 */
#define REG0_ub %r10d /* zero-extend  8 bits into REG0 */
#define REG0_uh %r10d /* zero-extend 16 bits into REG0 */
#define REG0_uw %r10d /* zero-extend 32 bits into REG0 */
#define REG0_ut %r10d /* zero-extend m4token into REG0 */

#define REG1b   %al  /* low  8 bits of REG1 */
#define REG1h   %ax  /* low 16 bits of REG1 */
#define REG1w   %eax /* low 32 bits of REG1 */
#define REG1t   %ax  /* (m4token)REG1       */
#define REG1_sb %rax /* sign-extend  8 bits into REG1 */
#define REG1_sh %rax /* sign-extend 16 bits into REG1 */
#define REG1_sw %rax /* sign-extend 32 bits into REG1 */
#define REG1_st %rax /* sign-extend m4token into REG1 */
#define REG1_ub %eax /* zero-extend  8 bits into REG1 */
#define REG1_uh %eax /* zero-extend 16 bits into REG1 */
#define REG1_uw %eax /* zero-extend 32 bits into REG1 */
#define REG1_ut %eax /* zero-extend m4token into REG1 */

#define REG2b   %cl  /* low  8 bits of REG2 */
#define REG2h   %cx  /* low 16 bits of REG2 */
#define REG2w   %ecx /* low 32 bits of REG2 */
#define REG2t   %cx  /* (m4token)REG2       */
#define REG2_sb %rcx /* sign-extend  8 bits into REG2 */
#define REG2_sh %rcx /* sign-extend 16 bits into REG2 */
#define REG2_sw %rcx /* sign-extend 32 bits into REG2 */
#define REG2_st %rcx /* sign-extend m4token into REG2 */
#define REG2_ub %ecx /* zero-extend  8 bits into REG2 */
#define REG2_uh %ecx /* zero-extend 16 bits into REG2 */
#define REG2_uw %ecx /* zero-extend 32 bits into REG2 */
#define REG2_ut %ecx /* zero-extend m4token into REG2 */

#define REG3b   %dl  /* low  8 bits of REG3 */
#define REG3h   %dx  /* low 16 bits of REG3 */
#define REG3w   %edx /* low 32 bits of REG3 */
#define REG3t   %dx  /* (m4token)REG3       */
#define REG3_sb %rdx /* sign-extend  8 bits into REG3 */
#define REG3_sh %rdx /* sign-extend 16 bits into REG3 */
#define REG3_sw %rdx /* sign-extend 32 bits into REG3 */
#define REG3_st %rdx /* sign-extend m4token into REG3 */
#define REG3_ub %edx /* zero-extend  8 bits into REG3 */
#define REG3_uh %edx /* zero-extend 16 bits into REG3 */
#define REG3_uw %edx /* zero-extend 32 bits into REG3 */
#define REG3_ut %edx /* zero-extend m4token into REG3 */

#define REG4b   %r8b /* low  8 bits of REG4 */
#define REG4h   %r8w /* low 16 bits of REG4 */
#define REG4w   %r8d /* low 32 bits of REG4 */
#define REG4t   %r8w /* (m4token)REG4        */
#define REG4_sb %r8  /* sign-extend  8 bits into REG4 */
#define REG4_sh %r8  /* sign-extend 16 bits into REG4 */
#define REG4_sw %r8  /* sign-extend 32 bits into REG4 */
#define REG4_st %r8  /* sign-extend m4token into REG4 */
#define REG4_ub %r8d /* zero-extend  8 bits into REG4 */
#define REG4_uh %r8d /* zero-extend 16 bits into REG4 */
#define REG4_uw %r8d /* zero-extend 32 bits into REG4 */
#define REG4_ut %r8d /* zero-extend m4token into REG4 */

#define DTOP    %rbx  /* value of first data stack element */
#define DTOPb   %bl   /* low  8 bits of DTOP */
#define DTOPh   %bx   /* low 16 bits of DTOP */
#define DTOPw   %ebx  /* low 32 bits of DTOP */
#define DTOPt   %bx   /* (m4token)DTOP        */
#define DTOP_sb %rbx  /* sign-extend  8 bits into DTOP */
#define DTOP_sh %rbx  /* sign-extend 16 bits into DTOP */
#define DTOP_sw %rbx  /* sign-extend 32 bits into DTOP */
#define DTOP_st %rbx  /* sign-extend m4token into DTOP */
#define DTOP_ub %ebx  /* zero-extend  8 bits into DTOP */
#define DTOP_uh %ebx  /* zero-extend 16 bits into DTOP */
#define DTOP_uw %ebx  /* zero-extend 32 bits into DTOP */
#define DTOP_ut %ebx  /* zero-extend m4token into DTOP */

#define RTOP    %rbp  /* value of first data stack element */
#define RTOPb   %bpl  /* low  8 bits of RTOP */
#define RTOPh   %bp   /* low 16 bits of RTOP */
#define RTOPw   %ebp  /* low 32 bits of RTOP */
#define RTOPt   %bp   /* (m4token)RTOP        */
#define RTOP_sb %rbp  /* sign-extend  8 bits into RTOP */
#define RTOP_sh %rbp  /* sign-extend 16 bits into RTOP */
#define RTOP_sw %rbp  /* sign-extend 32 bits into RTOP */
#define RTOP_st %rbp  /* sign-extend m4token into RTOP */
#define RTOP_ub %ebp  /* zero-extend  8 bits into RTOP */
#define RTOP_uh %ebp  /* zero-extend 16 bits into RTOP */
#define RTOP_uw %ebp  /* zero-extend 32 bits into RTOP */
#define RTOP_ut %ebp  /* zero-extend m4token into RTOP */

#define RFFF  %r11  /* always contains -1 */
#define RFFFt %r11w /* (m4token)-1        */

#define DSTK  %rdi  /* pointer to second data stack element */
#define RSTK  %rsi  /* pointer to second return stack element */
#define M4TH  %r13  /* pointer to C struct m4th */
#define HERE  %r14  /* pointer to first available code/data location */
#define FTBL  %r12  /* pointer to table m4func[m4token] containing asm function addresses */
#define IP    %r15  /* forth bytecode instruction pointer */
#define RIP   %rip  /* x86-64 instruction pointer */

#define AND2(src, dst)        and  src,     dst;   /* dst &= src     */
#define ADD2(src, dst)        add  src,     dst;   /* dst += src     */
#define ADD4(a, b,shl, dst)   lea  (a, b, 1<<(shl)), dst; /* dst  = a_reg + (b_reg << shl) */
#define ADDI(src, imm, dst)   lea  imm(src),dst;   /* dst  = src + imm */
#define AT0( reg)                  (reg)           /* mem[reg]       */
#define ATx( reg,  imm)            imm(reg)        /* mem[reg+imm]   */
#define ATxy(reg1, reg2, rmul)    (reg1,reg2,rmul) /* mem[reg1+reg2*rmul] */
#define DEC1(dst)             dec  dst;            /* dst--          */
#define INC1(dst)             inc  dst;            /* dst++          */
#define LOAD(reg, at)         mov  at,      reg;   /* reg  = *at     */
#define MOVE(src, dst)        mov  src,     dst;   /* dst  = src     */
#define MUL2(src, dst)        imul src,     dst;   /* dst *= src     */
#define NEG1(dst)             neg  dst;            /* dst  = -dst    */
#define NOT1(dst)             not  dst;            /* dst  = ~dst    */
#define ORR2(src, dst)        or   src,     dst;   /* dst |= src     */
#define SAR2(src, dst)        sar  src,     dst;   /* dst >>= src    signed   */
#define SHL2(src, dst)        shl  src,     dst;   /* dst <<= src    */
#define SHR2(src, dst)        shr  src,     dst;   /* dst >>= src    unsigned */
#define SUB2(src, dst)        sub  src,     dst;   /* dst -= src     */
#define STOR(reg, at)         mov  reg,     at;    /* *at  = reg     */
#define XOR2(src, dst)        xor  src,     dst;   /* dst ^= src     */
#define ZERO(dst)             xor  dst,     dst;   /* dst  = 0       */

#define LD_sb(reg, at)        movsbq at,    reg;   /* reg = *(int8_t *)at  */
#define LD_sh(reg, at)        movswq at,    reg;   /* reg = *(int16_t*)at  */
#define LD_sw(reg, at)        movslq at,    reg;   /* reg = *(int32_t*)at  */
#define LD_st(reg, at)        LD_sh(reg, at)     /* reg = *(signed m4token*)at */

#define LD_ub(reg, at)        movzbl at,    reg;   /* reg = *(uint8_t *)at  */
#define LD_uh(reg, at)        movzwl at,    reg;   /* reg = *(uint16_t*)at  */
#define LD_uw(reg, at)        movl   at,    reg;   /* reg = *(uint32_t*)at  */
#define LD_ut(reg, at)        LD_uh(reg, at)     /* reg = *(unsigned m4token*)at */

/* no difference between signed and unsigned STOR* */
#define STORb(reg, at)        movb   reg,   at;    /* *(uint8_t *)at  = reg */
#define STORh(reg, at)        movw   reg,   at;    /* *(uint16_t*)at  = reg */
#define STORw(reg, at)        movl   reg,   at;    /* *(uint32_t*)at  = reg */
#define STORt(reg, at)        STORh(reg, at)       /* *(m4token  *)at  = reg */

/* clang-format on */

#define ASM_CALL(func) call func; /* raw/native assembly: call native code */
#define ASM_RET() ret;            /* raw/native assembly: return */

#define JA(reg, val, label) /*  if reg u> val jump to label */                                     \
    cmp val, reg;                                                                                  \
    ja label;
#define JAE(reg, val, label) /* if reg u>= val jump to label */                                    \
    cmp val, reg;                                                                                  \
    jae label;
#define JB(reg, val, label) /*  if reg u<  val jump to label */                                    \
    cmp val, reg;                                                                                  \
    jb label;
#define JBE(reg, val, label) /* if reg u<= val jump to label */                                    \
    cmp val, reg;                                                                                  \
    jbe label;
#define JEQ(reg, val, label) /* if reg  =  val jump to label */                                    \
    cmp val, reg;                                                                                  \
    je label;
#define JNE(reg, val, label) /* if reg <>  val jump to label */                                    \
    cmp val, reg;                                                                                  \
    jne label;
#define JNZ(reg, label) /* if reg != 0 jump to label */                                            \
    test reg, reg;                                                                                 \
    jnz label;
#define JZ(reg, label) /*  if reg == 0 jump to label */                                            \
    test reg, reg;                                                                                 \
    jz label;
#define JUMP(label) /*     unconditional jump to label _______________________________________ */  \
    jmp label;

#define ADDROF_4G(sym, dst) lea sym(RIP), dst; /* load symbol address into dst */
#define ADDROF_1M(sym, dst) lea sym(RIP), dst; /* load symbol address into dst */

#define DPUSH(val) /* push val to second data stack element */                                     \
    STOR(val, AT(DSTK, -SZ))                                                                       \
    SUB2(IMM(SZ), DSTK)

#define DPOP(val) /* pop second data stack element into val */                                     \
    LOAD(val, AT(DSTK))                                                                            \
    ADD2(IMM(SZ), DSTK)

#define RPUSH(val) /* push val to second return stack element */                                   \
    STOR(val, AT(RSTK, -SZ))                                                                       \
    SUB2(IMM(SZ), RSTK)

#define RPOP(val) /* pop second return stack element into val */                                   \
    LOAD(val, AT(RSTK))                                                                            \
    ADD2(IMM(SZ), RSTK)

#define NEXT0() /* jump to current instruction. useful after manually updating IP              */  \
    ret;

#define NEXT() /* jump to following instruction ______________________________________________ */  \
    ret;

#define NEXT2() /* skip 2 bytes, jump to following instruction */                                  \
    ADD2(IMM(2), IP)                                                                               \
    ret;

#define NEXT4() /* skip 4 bytes, jump to following instruction */                                  \
    ADD2(IMM(4), IP)                                                                               \
    ret;

#define NEXT8() /* skip 8 bytes, jump to following instruction */                                  \
    ADD2(IMM(8), IP)                                                                               \
    ret;

#define NEXTT() CAT2(NEXT, SZt)()   /* skip SZt bytes,   jump to following instruction */
#define NEXTT2() CAT2(NEXT, SZt2)() /* skip SZt*2 bytes, jump to following instruction */
#define NEXTCELL() CAT2(NEXT, SZ)() /* skip SZ bytes,    jump to following instruction */

#define RELJUMP()               /* relative jump by number of instructions stored at next IP */    \
    LD_st(REG3_st, AT(IP));     /* REG3 = IP jump offset */                                        \
    lea SZt(IP, REG3, SZt), IP; /* IP = TARGET_IP        */                                        \
    NEXT0()                     /* jump to TARGET_IP     */

#endif /* M4TH_AMD64_ASM_MH */
