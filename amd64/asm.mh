/**
 * This file is part of m4th.
 *
 * m4th is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * m4th is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with m4th.  If not, see <https://www.gnu.org/licenses/>.
 */

#ifndef M4TH_AMD64_ASM_MH
#define M4TH_AMD64_ASM_MH

#include "../common/asm.mh"

#define SZ 8     /* width of registers, m4long and void* in bytes */
#define SZ2 16   /* SZ * 2 */
#define SZ3 24   /* SZ * 3 */
#define SZ4 32   /* SZ * 4 */
#define SZ5 40   /* SZ * 5 */
#define SZ6 48   /* SZ * 6 */
#define SZ7 56   /* SZ * 7 */
#define SZ8 64   /* SZ * 8 */
#define SZ9 72   /* SZ * 9 */
#define SZ10 80  /* SZ * 10 */
#define SZ11 88  /* SZ * 11 */
#define SZ12 96  /* SZ * 12 */
#define SZ13 104 /* SZ * 13 */
#define SZ14 112 /* SZ * 14 */
#define SZ15 120 /* SZ * 15 */
#define SZ16 128 /* SZ * 16 */
#define PSZ 3    /* (1 << PSZ) == SZ */

#define SZe 2   /* sizeof(m4enum) in bytes */
#define SZe2 4  /* SZe * 2 */
#define SZe3 6  /* SZe * 3 */
#define SZe4 8  /* SZe * 4 */
#define SZe5 10 /* SZe * 5 */

#define IMM(constant) $constant /* immediate constant */

/* clang-format off */

/*
 * SYS-V ABI:
 * argument registers:     %rdi %rsi %rdx %rcx %r8 %r9
 * return   registers:     %rax %rdx
 * caller-saved registers: %r10 %r11 and argument/return registers
 * callee-saved registers: %rbx %rbp %rsp %r12 %r13 %r14 %r15
 */
#define REG1  %rax  /* scratch register 1 */
#define REG2  %rcx  /* scratch register 2 */
#define REG3  %rdx  /* scratch register 3 */
/* additional scratch registers: %r8 %r9 %r10 */
/* additional callee-saved registers: %rbp */

#define REG1b   %al  /* low  8 bits of REG1 */
#define REG1h   %ax  /* low 16 bits of REG1 */
#define REG1w   %eax /* low 32 bits of REG1 */
#define REG1e   %ax  /* (m4enum)REG1        */
#define REG1_sb %rax /* sign-extend  8 bits into REG1 */
#define REG1_sh %rax /* sign-extend 16 bits into REG1 */
#define REG1_sw %rax /* sign-extend 32 bits into REG1 */
#define REG1_se %rax /* sign-extend m4enum  into REG1 */
#define REG1_ub %eax /* zero-extend  8 bits into REG1 */
#define REG1_uh %eax /* zero-extend 16 bits into REG1 */
#define REG1_uw %eax /* zero-extend 32 bits into REG1 */
#define REG1_ue %eax /* zero-extend m4enum  into REG1 */

#define REG2b   %cl  /* low  8 bits of REG2 */
#define REG2h   %cx  /* low 16 bits of REG2 */
#define REG2w   %ecx /* low 32 bits of REG2 */
#define REG2e   %cx  /* (m4enum)REG2        */
#define REG2_sb %rcx /* sign-extend  8 bits into REG2 */
#define REG2_sh %rcx /* sign-extend 16 bits into REG2 */
#define REG2_sw %rcx /* sign-extend 32 bits into REG2 */
#define REG2_se %rcx /* sign-extend m4enum  into REG2 */
#define REG2_ub %ecx /* zero-extend  8 bits into REG2 */
#define REG2_uh %ecx /* zero-extend 16 bits into REG2 */
#define REG2_uw %ecx /* zero-extend 32 bits into REG2 */
#define REG2_ue %ecx /* zero-extend m4enum  into REG2 */

#define REG3b   %dl  /* low  8 bits of REG3 */
#define REG3h   %dx  /* low 16 bits of REG3 */
#define REG3w   %edx /* low 32 bits of REG3 */
#define REG3e   %dx  /* (m4enum)REG3        */
#define REG3_sb %rdx /* sign-extend  8 bits into REG3 */
#define REG3_sh %rdx /* sign-extend 16 bits into REG3 */
#define REG3_sw %rdx /* sign-extend 32 bits into REG3 */
#define REG3_se %rdx /* sign-extend m4enum  into REG3 */
#define REG3_ub %edx /* zero-extend  8 bits into REG3 */
#define REG3_uh %edx /* zero-extend 16 bits into REG3 */
#define REG3_uw %edx /* zero-extend 32 bits into REG3 */
#define REG3_ue %edx /* zero-extend m4enum  into REG3 */

#define DTOP    %rbx /* value of first data stack element */
#define DTOPb   %bl  /* low  8 bits of DTOP */
#define DTOPh   %bx  /* low 16 bits of DTOP */
#define DTOPw   %ebx /* low 32 bits of DTOP */
#define DTOPe   %bx  /* (m4enum)DTOP        */
#define DTOP_sb %rbx /* sign-extend  8 bits into DTOP */
#define DTOP_sh %rbx /* sign-extend 16 bits into DTOP */
#define DTOP_sw %rbx /* sign-extend 32 bits into DTOP */
#define DTOP_ub %ebx /* zero-extend  8 bits into DTOP */
#define DTOP_uh %ebx /* zero-extend 16 bits into DTOP */
#define DTOP_uw %ebx /* zero-extend 32 bits into DTOP */
#define DTOP_se %rbx /* sign-extend m4enum  into DTOP */
#define DTOP_ue %ebx /* zero-extend m4enum  into DTOP */

#define RTOP    %rsi /* value of first return stack element */
#define RTOPb   %sil /* low 8 bits of RTOP */
#define RTOPh   %si  /* low 16 bits of RTOP */
#define RTOPw   %esi /* low 32 bits of RTOP */
#define RTOPe   %si  /* (m4enum)RTOP        */
#define RTOP_sb %rsi /* sign-extend  8 bits into RTOP */
#define RTOP_sh %rsi /* sign-extend 16 bits into RTOP */
#define RTOP_sw %rsi /* sign-extend 32 bits into RTOP */
#define RTOP_se %rsi /* sign-extend m4enum  into RTOP */
#define RTOP_ub %esi /* zero-extend  8 bits into RTOP */
#define RTOP_uh %esi /* zero-extend 16 bits into RTOP */
#define RTOP_uw %esi /* zero-extend 32 bits into RTOP */
#define RTOP_ue %esi /* zero-extend m4enum  into RTOP */

#define IP    %rdi  /* forth instruction pointer */
#define DSTK  %rsp  /* pointer to second data stack element */
#define RFFF  %r11  /* always contains -1 */
#define RSTK  %r12  /* pointer to second return stack element */
#define M4XT  %r13  /* pointer to word being compiled */
#define M4TH  %r14  /* pointer to C struct m4th */
#define ETBL  %r15  /* pointer to table m4enum -> asm function address */
#define RIP   %rip  /* x86-64 instruction pointer */

#define AND2(src, dst)        and  src,     dst;   /* dst &= src     */
#define ADD2(src, dst)        add  src,     dst;   /* dst += src     */
#define AT0( reg)                  (reg)           /* mem[reg]       */
#define ATx( reg,  imm)            imm(reg)        /* mem[reg+imm]   */
#define ATxy(reg1, reg2, rmul)    (reg1,reg2,rmul) /* mem[reg1+reg2*rmul] */
#define DEC1(dst)             dec  dst;            /* dst--          */
#define INC1(dst)             inc  dst;            /* dst++          */
#define LOAD(reg, at)         mov  at,      reg;   /* reg  = *at     */
#define MOVE(src, dst)        mov  src,     dst;   /* dst  = src     */
#define MUL2(src, dst)        imul src,     dst;   /* dst *= src     */
#define NEG1(dst)             neg  dst;            /* dst  = -dst    */
#define NOT1(dst)             not  dst;            /* dst  = ~dst    */
#define ORR2(src, dst)        or   src,     dst;   /* dst |= src     */
#define SAR2(src, dst)        sar  src,     dst;   /* dst >>= src    signed */
#define SHL2(src, dst)        shl  src,     dst;   /* dst <<= src    */
#define SUB2(src, dst)        sub  src,     dst;   /* dst -= src     */
#define STOR(reg, at)         mov  reg,     at;    /* *at  = reg     */
#define ZERO(dst)             xor  dst,     dst;   /* dst  = 0       */

#define LD_sb(reg, at)        movsbq at,    reg;   /* reg = *(int8_t *)at  */
#define LD_sh(reg, at)        movswq at,    reg;   /* reg = *(int16_t*)at  */
#define LD_sw(reg, at)        movslq at,    reg;   /* reg = *(int32_t*)at  */
#define LD_se(reg, at)        LD_sh(reg, at)     /* reg = *(signed m4enum*)at */

#define LD_ub(reg, at)        movzbl at,    reg;   /* reg = *(uint8_t *)at  */
#define LD_uh(reg, at)        movzwl at,    reg;   /* reg = *(uint16_t*)at  */
#define LD_uw(reg, at)        movl   at,    reg;   /* reg = *(uint32_t*)at  */
#define LD_ue(reg, at)        LD_uh(reg, at)     /* reg = *(unsigned m4enum*)at */

/* no difference between signed and unsigned STOR* */
#define STORb(reg, at)        movb   reg,   at;    /* *(uint8_t *)at  = reg */
#define STORh(reg, at)        movw   reg,   at;    /* *(uint16_t*)at  = reg */
#define STORw(reg, at)        movl   reg,   at;    /* *(uint32_t*)at  = reg */
#define STORe(reg, at)        STORh(reg, at)       /* *(m4enum  *)at  = reg */

/* clang-format on */

#define FADDR(fun, dst) lea fun(RIP), dst; /* load function address */

#define DPUSH(val) pushq val; /* push val to second data stack element */
#define DPOP(val) popq val;   /* pop second data stack element into val */

#define RPUSH(val) /* push val to second return stack element */                                   \
    STOR(val, AT(RSTK, -SZ))                                                                       \
    SUB2(IMM(SZ), RSTK)

#define RPOP(val) /* pop second return stack element into val */                                   \
    LOAD(val, AT(RSTK))                                                                            \
    ADD2(IMM(SZ), RSTK)

#define NEXT0() /* jump to current instruction. useful after manually updating IP              */  \
    LD_ue(REG3_ue, AT(IP));                                                                        \
    jmp *(ETBL, REG3, SZ);

#define NEXT() /* jump to next instruction */                                                      \
    LD_ue(REG3_ue, AT(IP, SZe));                                                                   \
    ADD2(IMM(SZe), IP)                                                                             \
    jmp *(ETBL, REG3, SZ);

#define NEXT2() /* skip 2 bytes (one instruction), jump to second instruction */                   \
    LD_ue(REG3_ue, AT(IP, SZe2));                                                                  \
    ADD2(IMM(SZe2), IP)                                                                            \
    jmp *(ETBL, REG3, SZ);

#define NEXT4() /* skip 4 bytes (two instructions), jump to third instruction */                   \
    LD_ue(REG3_ue, AT(IP, SZe3));                                                                  \
    ADD2(IMM(SZe2), IP)                                                                            \
    jmp *(ETBL, REG3, SZ);

#define NEXT8() /* skip 8 bytes (four instructions), jump to fifth instruction */                  \
    LD_ue(REG3_ue, AT(IP, SZe5));                                                                  \
    ADD2(IMM(SZe2), IP)                                                                            \
    jmp *(ETBL, REG3, SZ);

#define RELJUMP()                 /* relative jump by number of instructions stored at next IP */  \
    LD_se(REG3_se, AT(IP, SZe));  /* REG3 = IP jump offset */                                      \
    lea /**/ (IP, REG3, SZe), IP; /* IP = TARGET_IP        */                                      \
    NEXT0()                       /* jump to TARGET_IP     */

#endif /* M4TH_AMD64_ASM_MH */
