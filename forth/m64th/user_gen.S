/**
 * Copyright (C) 2020 Massimiliano Ghilardi
 *
 * This file is part of m64th.
 *
 * m64th is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * m64th is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with m64th.  If not, see <https://www.gnu.org/licenses/>.
 */

/* clang-format off */

/*
 * generated by command "m64th < forth/m64th_user.forth"
 * with some manual fixes to stack effects and flags
 */

WORD_START(clearstack, LASTWORD)
    WORD_DSTACK(-1,0)
    WORD_RSTACK(0,0)
    WORD_STACK_NONE()
    WORD_ASM_NONE()
    WORD_FLAGS(M6FLAG_INLINE|M6FLAG_PURE)
    WORD_CODE(
        /*3*/ depth, n_to_drop, exit
    )
WORD_END(clearstack)
/* string2= ( c-addr1 u1 c-addr2 u2  -- c-addr1 u1 t|f ) */
WORD_START(string2_equal, clearstack)
    WORD_DSTACK(4,3)
    WORD_RSTACK(0,0)
    WORD_STACK_ANY()
    WORD_ASM_NONE()
    WORD_FLAGS(M6FLAG_INLINE | M6FLAG_MEM_FETCH)
    WORD_CODE(
        /*14*/ rot, tuck, equal,
        _if_, T(5),
            string_equal, rot, drop,
        _else_, T(3),
            nip, zero,
        then, exit
    )
WORD_END(string2_equal)
/* string2<> ( c-addr1 u1 c-addr2 u2  -- c-addr1 u1 t|f ) */
WORD_START(string2_ne, string2_equal)
    WORD_DSTACK(4,3)
    WORD_RSTACK(0,0)
    WORD_STACK_ANY()
    WORD_ASM_NONE()
    WORD_FLAGS(M6FLAG_INLINE | M6FLAG_MEM_FETCH)
    WORD_CODE(
        /* optimizes better than "string2= invert" */
        CALL(string2_equal), zero_equal, exit
    )
WORD_END(string2_ne)
WORD_START(wordlist_upto_name, string2_ne)
    WORD_DSTACK(2,-1)
    WORD_RSTACK(0,0)
    WORD_STACK_NONE()
    WORD_ASM_NONE()
    WORD_FLAGS(M6FLAG_INLINE)
    WORD_CODE_AND_DATA(wordlist_upto_name,
        WORD_CODE_TOKENS(
            /*24*/ to_r, wordlist_to_last, zero, swap, begin, dup, _while_, T(12), swap, one_plus, over, dup, r_fetch, ne, _while_, T(3), name_to_prev, _repeat_, T(-14), then, drop, r_from, drop, exit
        ),
    )
WORD_END(wordlist_upto_name)
WORD_START(disassemble_names, wordlist_upto_name)
    WORD_DSTACK(-1,0)
    WORD_RSTACK(0,0)
    WORD_STACK_NONE()
    WORD_ASM_NONE()
    WORD_FLAGS(M6FLAG_INLINE)
    WORD_CODE_AND_DATA(disassemble_names,
        WORD_CODE_TOKENS(
            /*11*/ zero, _q_do_, T(7), CALL(disassemble_name), _loop_, T(-7), exit
        ),
    )
WORD_END(disassemble_names)
WORD_START(disassemble_upto, disassemble_names)
    WORD_STACK_NONE()
    WORD_STACK_NONE()
    WORD_ASM_NONE()
    WORD_FLAGS(M6FLAG_INLINE)
    WORD_CODE_AND_DATA(disassemble_upto,
        WORD_CODE_TOKENS(
            /*18*/ CALL(parse_nt), drop, swap, CALL(wordlist_upto_name), CALL(disassemble_names), exit
        ),
    )
WORD_END(disassemble_upto)

#undef LASTWORD
#define LASTWORD disassemble_upto
